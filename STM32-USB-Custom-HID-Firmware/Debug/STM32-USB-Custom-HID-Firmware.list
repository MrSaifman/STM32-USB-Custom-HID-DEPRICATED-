
STM32-USB-Custom-HID-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009538  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c4  080097c4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080097cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200000f4  080098c0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  080098c0  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015641  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350e  00000000  00000000  0003575d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00038c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00039bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e52d  00000000  00000000  0003aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e3c  00000000  00000000  00058f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5966  00000000  00000000  0006dd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001236f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  00123748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000f4 	.word	0x200000f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080095dc 	.word	0x080095dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f8 	.word	0x200000f8
 8000100:	080095dc 	.word	0x080095dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa1a 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f826 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8be 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f86e 	bl	800070c <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000630:	f008 fa6a 	bl	8008b08 <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  data[0] = '0'; //Resets the buffer value each loop
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <main+0x4c>)
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	701a      	strb	r2, [r3, #0]

	  //If button is pressed, sets the press in the buffer
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == GPIO_PIN_RESET)
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <main+0x50>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f000 fcfc 	bl	8001040 <HAL_GPIO_ReadPin>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d102      	bne.n	8000652 <main+0x36>
		  data[0] = '1';
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <main+0x4c>)
 800064e:	2231      	movs	r2, #49	; 0x31
 8000650:	701a      	strb	r2, [r3, #0]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, data, 2);
 8000652:	4905      	ldr	r1, [pc, #20]	; (8000668 <main+0x4c>)
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x54>)
 8000656:	2202      	movs	r2, #2
 8000658:	0018      	movs	r0, r3
 800065a:	f006 fc11 	bl	8006e80 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 800065e:	2064      	movs	r0, #100	; 0x64
 8000660:	f000 fa80 	bl	8000b64 <HAL_Delay>
	  data[0] = '0'; //Resets the buffer value each loop
 8000664:	e7e6      	b.n	8000634 <main+0x18>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000000 	.word	0x20000000
 800066c:	50000800 	.word	0x50000800
 8000670:	200001ac 	.word	0x200001ac

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b095      	sub	sp, #84	; 0x54
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	233c      	movs	r3, #60	; 0x3c
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f008 ffa1 	bl	80095cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f008 ff9a 	bl	80095cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fb67 	bl	8002d70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2222      	movs	r2, #34	; 0x22
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	03d2      	lsls	r2, r2, #15
 80006b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2240      	movs	r2, #64	; 0x40
 80006c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 fb9b 	bl	8002e08 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006d6:	f000 f8e1 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2100      	movs	r1, #0
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fee6 	bl	80034c8 <HAL_RCC_ClockConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000700:	f000 f8cc 	bl	800089c <Error_Handler>
  }
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b015      	add	sp, #84	; 0x54
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_USART2_UART_Init+0x98>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000718:	22e1      	movs	r2, #225	; 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000756:	0018      	movs	r0, r3
 8000758:	f003 fa9c 	bl	8003c94 <HAL_UART_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f89c 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000766:	2100      	movs	r1, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f004 f843 	bl	80047f4 <HAL_UARTEx_SetTxFifoThreshold>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f893 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f004 f87a 	bl	8004874 <HAL_UARTEx_SetRxFifoThreshold>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f88a 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x94>)
 800078a:	0018      	movs	r0, r3
 800078c:	f003 fff8 	bl	8004780 <HAL_UARTEx_DisableFifoMode>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f882 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000110 	.word	0x20000110
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f008 ff07 	bl	80095cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <MX_GPIO_Init+0xec>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_GPIO_Init+0xec>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <MX_GPIO_Init+0xec>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2204      	movs	r2, #4
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <MX_GPIO_Init+0xec>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <MX_GPIO_Init+0xec>)
 80007dc:	2120      	movs	r1, #32
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_GPIO_Init+0xec>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	2220      	movs	r2, #32
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0xec>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xec>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0xec>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fc33 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xf0>)
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fc2d 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2220      	movs	r2, #32
 8000824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000838:	193a      	adds	r2, r7, r4
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fa91 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2240      	movs	r2, #64	; 0x40
 800084a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800085e:	193b      	adds	r3, r7, r4
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <MX_GPIO_Init+0xf0>)
 8000862:	0019      	movs	r1, r3
 8000864:	0010      	movs	r0, r2
 8000866:	f000 fa7f 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2201      	movs	r2, #1
 800087e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000880:	187b      	adds	r3, r7, r1
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <MX_GPIO_Init+0xf0>)
 8000884:	0019      	movs	r1, r3
 8000886:	0010      	movs	r0, r2
 8000888:	f000 fa6e 	bl	8000d68 <HAL_GPIO_Init>

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b009      	add	sp, #36	; 0x24
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	50000800 	.word	0x50000800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0549      	lsls	r1, r1, #21
 80008d0:	430a      	orrs	r2, r1
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_MspInit+0x44>)
 80008d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b09d      	sub	sp, #116	; 0x74
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	235c      	movs	r3, #92	; 0x5c
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	0018      	movs	r0, r3
 80008fe:	2314      	movs	r3, #20
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f008 fe62 	bl	80095cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	2410      	movs	r4, #16
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	234c      	movs	r3, #76	; 0x4c
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f008 fe5a 	bl	80095cc <memset>
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_UART_MspInit+0xb8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d13e      	bne.n	80009a0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2202      	movs	r2, #2
 8000926:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	f002 ff73 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800093a:	f7ff ffaf 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_UART_MspInit+0xbc>)
 8000940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <HAL_UART_MspInit+0xbc>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0289      	lsls	r1, r1, #10
 8000948:	430a      	orrs	r2, r1
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0xbc>)
 800094e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	029b      	lsls	r3, r3, #10
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0xbc>)
 800095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_UART_MspInit+0xbc>)
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0xbc>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	2201      	movs	r2, #1
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000972:	215c      	movs	r1, #92	; 0x5c
 8000974:	187b      	adds	r3, r7, r1
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2201      	movs	r2, #1
 8000990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	187a      	adds	r2, r7, r1
 8000994:	23a0      	movs	r3, #160	; 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f9e4 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b01d      	add	sp, #116	; 0x74
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f8aa 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <USB_UCPD1_2_IRQHandler+0x14>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fd26 	bl	8001438 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000688 	.word	0x20000688

080009f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a08:	f7ff fff6 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a32:	f008 fda7 	bl	8009584 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a36:	f7ff fdf1 	bl	800061c <main>

08000a3a <LoopForever>:

LoopForever:
  b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000a48:	080097cc 	.word	0x080097cc
  ldr r2, =_sbss
 8000a4c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000a50:	200009b0 	.word	0x200009b0

08000a54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_COMP_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x3c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Init+0x3c>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f810 	bl	8000a98 <HAL_InitTick>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff ff10 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_InitTick+0x88>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d02b      	beq.n	8000b08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_InitTick+0x8c>)
 8000ab2:	681c      	ldr	r4, [r3, #0]
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_InitTick+0x88>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	0019      	movs	r1, r3
 8000aba:	23fa      	movs	r3, #250	; 0xfa
 8000abc:	0098      	lsls	r0, r3, #2
 8000abe:	f7ff fb21 	bl	8000104 <__udivsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f7ff fb1c 	bl	8000104 <__udivsi3>
 8000acc:	0003      	movs	r3, r0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f93d 	bl	8000d4e <HAL_SYSTICK_Config>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d112      	bne.n	8000afe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d80a      	bhi.n	8000af4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f90c 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_InitTick+0x90>)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	e00d      	b.n	8000b10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e008      	b.n	8000b10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	230f      	movs	r3, #15
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e003      	b.n	8000b10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	781b      	ldrb	r3, [r3, #0]
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b005      	add	sp, #20
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	20000004 	.word	0x20000004
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	001a      	movs	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	200001a4 	.word	0x200001a4

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	200001a4 	.word	0x200001a4

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	001a      	movs	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	189b      	adds	r3, r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	0002      	movs	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	2000000c 	.word	0x2000000c

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bbe:	d809      	bhi.n	8000bd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	231f      	movs	r3, #31
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_EnableIRQ+0x30>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	; 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	; 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d301      	bcc.n	8000cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <SysTick_Config+0x44>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff7c 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x44>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	0002      	movs	r2, r0
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff33 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ffaf 	bl	8000cbc <SysTick_Config>
 8000d5e:	0003      	movs	r3, r0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e14d      	b.n	8001014 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <HAL_GPIO_Init+0x28>
 8000d8e:	e13e      	b.n	800100e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d005      	beq.n	8000da8 <HAL_GPIO_Init+0x40>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d130      	bne.n	8000e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	43da      	mvns	r2, r3
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	2201      	movs	r2, #1
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d017      	beq.n	8000e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d123      	bne.n	8000e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2207      	movs	r2, #7
 8000e64:	4013      	ands	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	400b      	ands	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x174>
 8000eda:	e098      	b.n	800100e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000edc:	4a53      	ldr	r2, [pc, #332]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	589b      	ldr	r3, [r3, r2]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	23a0      	movs	r3, #160	; 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x1d6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	; (8001030 <HAL_GPIO_Init+0x2c8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1d2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_GPIO_Init+0x2cc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1ce>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a46      	ldr	r2, [pc, #280]	; (8001038 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1ca>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	; (800103c <HAL_GPIO_Init+0x2d4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1c6>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x1d8>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x1d8>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x1d8>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x1d8>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x1d8>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	2103      	movs	r1, #3
 8000f44:	400a      	ands	r2, r1
 8000f46:	00d2      	lsls	r2, r2, #3
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f50:	4936      	ldr	r1, [pc, #216]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3318      	adds	r3, #24
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5e:	4b33      	ldr	r3, [pc, #204]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	035b      	lsls	r3, r3, #13
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	039b      	lsls	r3, r3, #14
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000fb4:	2384      	movs	r3, #132	; 0x84
 8000fb6:	58d3      	ldr	r3, [r2, r3]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd8:	4914      	ldr	r1, [pc, #80]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000fda:	2284      	movs	r2, #132	; 0x84
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	58d3      	ldr	r3, [r2, r3]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001006:	4909      	ldr	r1, [pc, #36]	; (800102c <HAL_GPIO_Init+0x2c4>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	40da      	lsrs	r2, r3
 800101c:	1e13      	subs	r3, r2, #0
 800101e:	d000      	beq.n	8001022 <HAL_GPIO_Init+0x2ba>
 8001020:	e6aa      	b.n	8000d78 <HAL_GPIO_Init+0x10>
  }
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b006      	add	sp, #24
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021800 	.word	0x40021800
 8001030:	50000400 	.word	0x50000400
 8001034:	50000800 	.word	0x50000800
 8001038:	50000c00 	.word	0x50000c00
 800103c:	50001000 	.word	0x50001000

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	000a      	movs	r2, r1
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	1cba      	adds	r2, r7, #2
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	4013      	ands	r3, r2
 8001058:	d004      	beq.n	8001064 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e003      	b.n	800106c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	0008      	movs	r0, r1
 8001084:	0011      	movs	r1, r2
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	1c02      	adds	r2, r0, #0
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	1c7b      	adds	r3, r7, #1
 800108e:	1c0a      	adds	r2, r1, #0
 8001090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001092:	1c7b      	adds	r3, r7, #1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a2:	e003      	b.n	80010ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a4:	1cbb      	adds	r3, r7, #2
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	000a      	movs	r2, r1
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c8:	1cbb      	adds	r3, r7, #2
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	1cb9      	adds	r1, r7, #2
 80010d8:	8809      	ldrh	r1, [r1, #0]
 80010da:	400b      	ands	r3, r1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	000a      	movs	r2, r1
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80010fa:	230a      	movs	r3, #10
 80010fc:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80010fe:	e002      	b.n	8001106 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3b01      	subs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f9      	bne.n	8001100 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <PCD_GET_EP_RX_CNT+0x40>)
 8001114:	4694      	mov	ip, r2
 8001116:	4463      	add	r3, ip
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	b29b      	uxth	r3, r3
 800111e:	059b      	lsls	r3, r3, #22
 8001120:	0d9b      	lsrs	r3, r3, #22
 8001122:	b29b      	uxth	r3, r3
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40009800 	.word	0x40009800

08001130 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	000a      	movs	r2, r1
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800113e:	230a      	movs	r3, #10
 8001140:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001142:	e002      	b.n	800114a <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f9      	bne.n	8001144 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8001150:	1cbb      	adds	r3, r7, #2
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8001158:	4694      	mov	ip, r2
 800115a:	4463      	add	r3, ip
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	b29b      	uxth	r3, r3
 8001162:	059b      	lsls	r3, r3, #22
 8001164:	0d9b      	lsrs	r3, r3, #22
 8001166:	b29b      	uxth	r3, r3
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b004      	add	sp, #16
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40009800 	.word	0x40009800

08001174 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	000a      	movs	r2, r1
 800117e:	1cbb      	adds	r3, r7, #2
 8001180:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8001182:	230a      	movs	r3, #10
 8001184:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001186:	e002      	b.n	800118e <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b01      	subs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f9      	bne.n	8001188 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8001194:	1cbb      	adds	r3, r7, #2
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800119c:	4694      	mov	ip, r2
 800119e:	4463      	add	r3, ip
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	059b      	lsls	r3, r3, #22
 80011a8:	0d9b      	lsrs	r3, r3, #22
 80011aa:	b29b      	uxth	r3, r3
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b004      	add	sp, #16
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40009800 	.word	0x40009800

080011b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	b08f      	sub	sp, #60	; 0x3c
 80011bc:	af0a      	add	r7, sp, #40	; 0x28
 80011be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e10a      	b.n	80013e0 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a86      	ldr	r2, [pc, #536]	; (80013e8 <HAL_PCD_Init+0x230>)
 80011ce:	5c9b      	ldrb	r3, [r3, r2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	23af      	movs	r3, #175	; 0xaf
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	2100      	movs	r1, #0
 80011de:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f007 fe1e 	bl	8008e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a7f      	ldr	r2, [pc, #508]	; (80013e8 <HAL_PCD_Init+0x230>)
 80011ec:	2103      	movs	r1, #3
 80011ee:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f003 fbee 	bl	80049dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e05b      	b.n	80012c2 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800120a:	240f      	movs	r4, #15
 800120c:	193b      	adds	r3, r7, r4
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	203d      	movs	r0, #61	; 0x3d
 8001214:	0013      	movs	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	189b      	adds	r3, r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	18cb      	adds	r3, r1, r3
 800121e:	181b      	adds	r3, r3, r0
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	0013      	movs	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	189b      	adds	r3, r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	18cb      	adds	r3, r1, r3
 8001236:	181b      	adds	r3, r3, r0
 8001238:	193a      	adds	r2, r7, r4
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800123e:	0025      	movs	r5, r4
 8001240:	193b      	adds	r3, r7, r4
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	197b      	adds	r3, r7, r5
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b29c      	uxth	r4, r3
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2048      	movs	r0, #72	; 0x48
 800124e:	0013      	movs	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	189b      	adds	r3, r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	18cb      	adds	r3, r1, r3
 8001258:	181b      	adds	r3, r3, r0
 800125a:	1c22      	adds	r2, r4, #0
 800125c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	203f      	movs	r0, #63	; 0x3f
 8001266:	0013      	movs	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	189b      	adds	r3, r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	18cb      	adds	r3, r1, r3
 8001270:	181b      	adds	r3, r3, r0
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001276:	197b      	adds	r3, r7, r5
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	0013      	movs	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	189b      	adds	r3, r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	18cb      	adds	r3, r1, r3
 8001286:	334c      	adds	r3, #76	; 0x4c
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	0013      	movs	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	18cb      	adds	r3, r1, r3
 800129c:	3350      	adds	r3, #80	; 0x50
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a2:	197b      	adds	r3, r7, r5
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	0013      	movs	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	189b      	adds	r3, r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	18cb      	adds	r3, r1, r3
 80012b2:	3354      	adds	r3, #84	; 0x54
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	197b      	adds	r3, r7, r5
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	197b      	adds	r3, r7, r5
 80012be:	3201      	adds	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	210f      	movs	r1, #15
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d39c      	bcc.n	800120a <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e056      	b.n	8001386 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d8:	240f      	movs	r4, #15
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	237e      	movs	r3, #126	; 0x7e
 80012e2:	33ff      	adds	r3, #255	; 0xff
 80012e4:	0019      	movs	r1, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	18c3      	adds	r3, r0, r3
 80012f0:	185b      	adds	r3, r3, r1
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	23be      	movs	r3, #190	; 0xbe
 80012fe:	0059      	lsls	r1, r3, #1
 8001300:	0013      	movs	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	189b      	adds	r3, r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	18c3      	adds	r3, r0, r3
 800130a:	185b      	adds	r3, r3, r1
 800130c:	193a      	adds	r2, r7, r4
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001312:	193b      	adds	r3, r7, r4
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	33ff      	adds	r3, #255	; 0xff
 800131c:	0019      	movs	r1, r3
 800131e:	0013      	movs	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	189b      	adds	r3, r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	18c3      	adds	r3, r0, r3
 8001328:	185b      	adds	r3, r3, r1
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800132e:	193b      	adds	r3, r7, r4
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	23c6      	movs	r3, #198	; 0xc6
 8001336:	0059      	lsls	r1, r3, #1
 8001338:	0013      	movs	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	189b      	adds	r3, r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	18c3      	adds	r3, r0, r3
 8001342:	185b      	adds	r3, r3, r1
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	23c8      	movs	r3, #200	; 0xc8
 8001350:	0059      	lsls	r1, r3, #1
 8001352:	0013      	movs	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	189b      	adds	r3, r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	18c3      	adds	r3, r0, r3
 800135c:	185b      	adds	r3, r3, r1
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	23ca      	movs	r3, #202	; 0xca
 800136a:	0059      	lsls	r1, r3, #1
 800136c:	0013      	movs	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	189b      	adds	r3, r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	18c3      	adds	r3, r0, r3
 8001376:	185b      	adds	r3, r3, r1
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	193b      	adds	r3, r7, r4
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	193b      	adds	r3, r7, r4
 8001382:	3201      	adds	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	230f      	movs	r3, #15
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3a1      	bcc.n	80012d8 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681c      	ldr	r4, [r3, #0]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	466b      	mov	r3, sp
 800139c:	001a      	movs	r2, r3
 800139e:	0003      	movs	r3, r0
 80013a0:	3310      	adds	r3, #16
 80013a2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80013a4:	c262      	stmia	r2!, {r1, r5, r6}
 80013a6:	cb62      	ldmia	r3!, {r1, r5, r6}
 80013a8:	c262      	stmia	r2!, {r1, r5, r6}
 80013aa:	cb62      	ldmia	r3!, {r1, r5, r6}
 80013ac:	c262      	stmia	r2!, {r1, r5, r6}
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	6841      	ldr	r1, [r0, #4]
 80013b4:	6882      	ldr	r2, [r0, #8]
 80013b6:	68c3      	ldr	r3, [r0, #12]
 80013b8:	0020      	movs	r0, r4
 80013ba:	f003 fb41 	bl	8004a40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2238      	movs	r2, #56	; 0x38
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_PCD_Init+0x230>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d103      	bne.n	80013de <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fc99 	bl	8002d10 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b005      	add	sp, #20
 80013e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e8:	000002bd 	.word	0x000002bd

080013ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	23af      	movs	r3, #175	; 0xaf
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_PCD_Start+0x18>
 8001400:	2302      	movs	r3, #2
 8001402:	e014      	b.n	800142e <HAL_PCD_Start+0x42>
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	23af      	movs	r3, #175	; 0xaf
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	2101      	movs	r1, #1
 800140c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	f003 face 	bl	80049b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f005 f99e 	bl	800675e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	23af      	movs	r3, #175	; 0xaf
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	2100      	movs	r1, #0
 800142a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	f005 f99a 	bl	800677e <USB_ReadInterrupts>
 800144a:	0003      	movs	r3, r0
 800144c:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800144e:	4a7c      	ldr	r2, [pc, #496]	; (8001640 <HAL_PCD_IRQHandler+0x208>)
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	2204      	movs	r2, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_PCD_IRQHandler+0x24>
 800145a:	e0ed      	b.n	8001638 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4013      	ands	r3, r2
 8001464:	d004      	beq.n	8001470 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f000 fb41 	bl	8001af0 <PCD_EP_ISR_Handler>

    return;
 800146e:	e0e4      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4013      	ands	r3, r2
 8001478:	d011      	beq.n	800149e <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	496f      	ldr	r1, [pc, #444]	; (8001644 <HAL_PCD_IRQHandler+0x20c>)
 8001486:	400a      	ands	r2, r1
 8001488:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f007 fd8c 	bl	8008faa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2100      	movs	r1, #0
 8001496:	0018      	movs	r0, r3
 8001498:	f000 f8e4 	bl	8001664 <HAL_PCD_SetAddress>

    return;
 800149c:	e0cd      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4013      	ands	r3, r2
 80014a6:	d008      	beq.n	80014ba <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4965      	ldr	r1, [pc, #404]	; (8001648 <HAL_PCD_IRQHandler+0x210>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80014b8:	e0bf      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	019b      	lsls	r3, r3, #6
 80014c0:	4013      	ands	r3, r2
 80014c2:	d008      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	495f      	ldr	r1, [pc, #380]	; (800164c <HAL_PCD_IRQHandler+0x214>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80014d4:	e0b1      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	4013      	ands	r3, r2
 80014de:	d02c      	beq.n	800153a <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2104      	movs	r1, #4
 80014ec:	438a      	bics	r2, r1
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2108      	movs	r1, #8
 80014fc:	438a      	bics	r2, r1
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	23bd      	movs	r3, #189	; 0xbd
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d109      	bne.n	8001520 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	23bd      	movs	r3, #189	; 0xbd
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	2100      	movs	r1, #0
 8001514:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2100      	movs	r1, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f007 ffa6 	bl	800946c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f007 fd82 	bl	800902c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4947      	ldr	r1, [pc, #284]	; (8001650 <HAL_PCD_IRQHandler+0x218>)
 8001534:	400a      	ands	r2, r1
 8001536:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001538:	e07f      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d01c      	beq.n	800157e <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2108      	movs	r1, #8
 8001550:	430a      	orrs	r2, r1
 8001552:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	493d      	ldr	r1, [pc, #244]	; (8001654 <HAL_PCD_IRQHandler+0x21c>)
 8001560:	400a      	ands	r2, r1
 8001562:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2104      	movs	r1, #4
 8001570:	430a      	orrs	r2, r1
 8001572:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f007 fd3c 	bl	8008ff4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800157c:	e05d      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	4013      	ands	r3, r2
 8001584:	d038      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4931      	ldr	r1, [pc, #196]	; (8001658 <HAL_PCD_IRQHandler+0x220>)
 8001592:	400a      	ands	r2, r1
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	23bd      	movs	r3, #189	; 0xbd
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d125      	bne.n	80015ee <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2104      	movs	r1, #4
 80015ae:	430a      	orrs	r2, r1
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2108      	movs	r1, #8
 80015be:	430a      	orrs	r2, r1
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	23bd      	movs	r3, #189	; 0xbd
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	2101      	movs	r1, #1
 80015ca:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	223c      	movs	r2, #60	; 0x3c
 80015d6:	4013      	ands	r3, r2
 80015d8:	0019      	movs	r1, r3
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	23be      	movs	r3, #190	; 0xbe
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2101      	movs	r1, #1
 80015e6:	0018      	movs	r0, r3
 80015e8:	f007 ff40 	bl	800946c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80015ec:	e025      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f007 fcff 	bl	8008ff4 <HAL_PCD_SuspendCallback>
    return;
 80015f6:	e020      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d00c      	beq.n	800161c <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4913      	ldr	r1, [pc, #76]	; (800165c <HAL_PCD_IRQHandler+0x224>)
 800160e:	400a      	ands	r2, r1
 8001610:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f007 fcb9 	bl	8008f8c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800161a:	e00e      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d009      	beq.n	800163a <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	490b      	ldr	r1, [pc, #44]	; (8001660 <HAL_PCD_IRQHandler+0x228>)
 8001632:	400a      	ands	r2, r1
 8001634:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001636:	e000      	b.n	800163a <HAL_PCD_IRQHandler+0x202>
    return;
 8001638:	46c0      	nop			; (mov r8, r8)
  }
}
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40010000 	.word	0x40010000
 8001644:	0000fbff 	.word	0x0000fbff
 8001648:	0000bfff 	.word	0x0000bfff
 800164c:	0000dfff 	.word	0x0000dfff
 8001650:	0000efff 	.word	0x0000efff
 8001654:	0000f7ff 	.word	0x0000f7ff
 8001658:	0000ff7f 	.word	0x0000ff7f
 800165c:	0000fdff 	.word	0x0000fdff
 8001660:	0000feff 	.word	0x0000feff

08001664 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	000a      	movs	r2, r1
 800166e:	1cfb      	adds	r3, r7, #3
 8001670:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	23af      	movs	r3, #175	; 0xaf
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PCD_SetAddress+0x1e>
 800167e:	2302      	movs	r3, #2
 8001680:	e017      	b.n	80016b2 <HAL_PCD_SetAddress+0x4e>
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	23af      	movs	r3, #175	; 0xaf
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	2101      	movs	r1, #1
 800168a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	1cfa      	adds	r2, r7, #3
 8001690:	2138      	movs	r1, #56	; 0x38
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	1cfb      	adds	r3, r7, #3
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	0019      	movs	r1, r3
 80016a0:	0010      	movs	r0, r2
 80016a2:	f005 f849 	bl	8006738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	23af      	movs	r3, #175	; 0xaf
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	2100      	movs	r1, #0
 80016ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016ba:	b590      	push	{r4, r7, lr}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	000c      	movs	r4, r1
 80016c4:	0010      	movs	r0, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	1cfb      	adds	r3, r7, #3
 80016ca:	1c22      	adds	r2, r4, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	003b      	movs	r3, r7
 80016d0:	1c02      	adds	r2, r0, #0
 80016d2:	801a      	strh	r2, [r3, #0]
 80016d4:	1cbb      	adds	r3, r7, #2
 80016d6:	1c0a      	adds	r2, r1, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016da:	230b      	movs	r3, #11
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016e2:	1cfb      	adds	r3, r7, #3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da10      	bge.n	800170e <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	1cfb      	adds	r3, r7, #3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	401a      	ands	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	3338      	adds	r3, #56	; 0x38
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	3304      	adds	r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	705a      	strb	r2, [r3, #1]
 800170c:	e010      	b.n	8001730 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2207      	movs	r2, #7
 8001714:	401a      	ands	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	189b      	adds	r3, r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	3379      	adds	r3, #121	; 0x79
 8001720:	33ff      	adds	r3, #255	; 0xff
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	18d3      	adds	r3, r2, r3
 8001726:	3304      	adds	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001730:	1cfb      	adds	r3, r7, #3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2207      	movs	r2, #7
 8001736:	4013      	ands	r3, r2
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800173e:	003b      	movs	r3, r7
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1cba      	adds	r2, r7, #2
 800174a:	7812      	ldrb	r2, [r2, #0]
 800174c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	785b      	ldrb	r3, [r3, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001760:	1cbb      	adds	r3, r7, #2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d102      	bne.n	800176e <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	23af      	movs	r3, #175	; 0xaf
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_PCD_EP_Open+0xc4>
 800177a:	2302      	movs	r3, #2
 800177c:	e013      	b.n	80017a6 <HAL_PCD_EP_Open+0xec>
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	23af      	movs	r3, #175	; 0xaf
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	2101      	movs	r1, #1
 8001786:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f003 f97f 	bl	8004a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	23af      	movs	r3, #175	; 0xaf
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	2100      	movs	r1, #0
 800179e:	54d1      	strb	r1, [r2, r3]

  return ret;
 80017a0:	230b      	movs	r3, #11
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b005      	add	sp, #20
 80017ac:	bd90      	pop	{r4, r7, pc}

080017ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	000a      	movs	r2, r1
 80017b8:	1cfb      	adds	r3, r7, #3
 80017ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017bc:	1cfb      	adds	r3, r7, #3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da10      	bge.n	80017e8 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c6:	1cfb      	adds	r3, r7, #3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2207      	movs	r2, #7
 80017cc:	401a      	ands	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	189b      	adds	r3, r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	3338      	adds	r3, #56	; 0x38
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	3304      	adds	r3, #4
 80017de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	705a      	strb	r2, [r3, #1]
 80017e6:	e010      	b.n	800180a <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e8:	1cfb      	adds	r3, r7, #3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2207      	movs	r2, #7
 80017ee:	401a      	ands	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	3379      	adds	r3, #121	; 0x79
 80017fa:	33ff      	adds	r3, #255	; 0xff
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	18d3      	adds	r3, r2, r3
 8001800:	3304      	adds	r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800180a:	1cfb      	adds	r3, r7, #3
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2207      	movs	r2, #7
 8001810:	4013      	ands	r3, r2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	23af      	movs	r3, #175	; 0xaf
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_PCD_EP_Close+0x7a>
 8001824:	2302      	movs	r3, #2
 8001826:	e011      	b.n	800184c <HAL_PCD_EP_Close+0x9e>
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	23af      	movs	r3, #175	; 0xaf
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	2101      	movs	r1, #1
 8001830:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f003 fc6e 	bl	800511c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	23af      	movs	r3, #175	; 0xaf
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	2100      	movs	r1, #0
 8001848:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	200b      	movs	r0, #11
 8001862:	183b      	adds	r3, r7, r0
 8001864:	1c0a      	adds	r2, r1, #0
 8001866:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001868:	0001      	movs	r1, r0
 800186a:	187b      	adds	r3, r7, r1
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2207      	movs	r2, #7
 8001870:	401a      	ands	r2, r3
 8001872:	0013      	movs	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	189b      	adds	r3, r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	3379      	adds	r3, #121	; 0x79
 800187c:	33ff      	adds	r3, #255	; 0xff
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	18d3      	adds	r3, r2, r3
 8001882:	3304      	adds	r3, #4
 8001884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2200      	movs	r2, #0
 800189c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2207      	movs	r2, #7
 80018a4:	4013      	ands	r3, r2
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2207      	movs	r2, #7
 80018b2:	4013      	ands	r3, r2
 80018b4:	d107      	bne.n	80018c6 <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	0011      	movs	r1, r2
 80018be:	0018      	movs	r0, r3
 80018c0:	f003 fd92 	bl	80053e8 <USB_EPStartXfer>
 80018c4:	e006      	b.n	80018d4 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f003 fd8a 	bl	80053e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	200b      	movs	r0, #11
 80018ec:	183b      	adds	r3, r7, r0
 80018ee:	1c0a      	adds	r2, r1, #0
 80018f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f2:	183b      	adds	r3, r7, r0
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2207      	movs	r2, #7
 80018f8:	401a      	ands	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	3338      	adds	r3, #56	; 0x38
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	18d3      	adds	r3, r2, r3
 8001908:	3304      	adds	r3, #4
 800190a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	2101      	movs	r1, #1
 800191e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001932:	183b      	adds	r3, r7, r0
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	b2da      	uxtb	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001940:	183b      	adds	r3, r7, r0
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2207      	movs	r2, #7
 8001946:	4013      	ands	r3, r2
 8001948:	d107      	bne.n	800195a <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	0011      	movs	r1, r2
 8001952:	0018      	movs	r0, r3
 8001954:	f003 fd48 	bl	80053e8 <USB_EPStartXfer>
 8001958:	e006      	b.n	8001968 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	0011      	movs	r1, r2
 8001962:	0018      	movs	r0, r3
 8001964:	f003 fd40 	bl	80053e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	000a      	movs	r2, r1
 800197c:	1cfb      	adds	r3, r7, #3
 800197e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001980:	1cfb      	adds	r3, r7, #3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2207      	movs	r2, #7
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d901      	bls.n	8001994 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e048      	b.n	8001a26 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b25b      	sxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	da10      	bge.n	80019c0 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199e:	1cfb      	adds	r3, r7, #3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2207      	movs	r2, #7
 80019a4:	401a      	ands	r2, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	189b      	adds	r3, r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	3338      	adds	r3, #56	; 0x38
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	3304      	adds	r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	705a      	strb	r2, [r3, #1]
 80019be:	e00e      	b.n	80019de <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019c0:	1cfb      	adds	r3, r7, #3
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	0013      	movs	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	189b      	adds	r3, r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	3379      	adds	r3, #121	; 0x79
 80019ce:	33ff      	adds	r3, #255	; 0xff
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	3304      	adds	r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e4:	1cfb      	adds	r3, r7, #3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2207      	movs	r2, #7
 80019ea:	4013      	ands	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	23af      	movs	r3, #175	; 0xaf
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_EP_SetStall+0x90>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e011      	b.n	8001a26 <HAL_PCD_EP_SetStall+0xb4>
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	23af      	movs	r3, #175	; 0xaf
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	2101      	movs	r1, #1
 8001a0a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f004 fdbb 	bl	8006590 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	23af      	movs	r3, #175	; 0xaf
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	2100      	movs	r1, #0
 8001a22:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	000a      	movs	r2, r1
 8001a38:	1cfb      	adds	r3, r7, #3
 8001a3a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a3c:	1cfb      	adds	r3, r7, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	220f      	movs	r2, #15
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d901      	bls.n	8001a50 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04a      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a50:	1cfb      	adds	r3, r7, #3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da10      	bge.n	8001a7c <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	1cfb      	adds	r3, r7, #3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	401a      	ands	r2, r3
 8001a62:	0013      	movs	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	3338      	adds	r3, #56	; 0x38
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	3304      	adds	r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	705a      	strb	r2, [r3, #1]
 8001a7a:	e010      	b.n	8001a9e <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a7c:	1cfb      	adds	r3, r7, #3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2207      	movs	r2, #7
 8001a82:	401a      	ands	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	189b      	adds	r3, r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	3379      	adds	r3, #121	; 0x79
 8001a8e:	33ff      	adds	r3, #255	; 0xff
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	3304      	adds	r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa4:	1cfb      	adds	r3, r7, #3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4013      	ands	r3, r2
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	23af      	movs	r3, #175	; 0xaf
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_PCD_EP_ClrStall+0x94>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e011      	b.n	8001ae6 <HAL_PCD_EP_ClrStall+0xb8>
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	23af      	movs	r3, #175	; 0xaf
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	2101      	movs	r1, #1
 8001aca:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f004 fd9d 	bl	8006614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	23af      	movs	r3, #175	; 0xaf
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001af8:	f000 fb90 	bl	800221c <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b02:	202a      	movs	r0, #42	; 0x2a
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	2429      	movs	r4, #41	; 0x29
 8001b10:	193b      	adds	r3, r7, r4
 8001b12:	210f      	movs	r1, #15
 8001b14:	400a      	ands	r2, r1
 8001b16:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d000      	beq.n	8001b22 <PCD_EP_ISR_Handler+0x32>
 8001b20:	e136      	b.n	8001d90 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d143      	bne.n	8001bb4 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4acb      	ldr	r2, [pc, #812]	; (8001e60 <PCD_EP_ISR_Handler+0x370>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0209      	lsls	r1, r1, #8
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	333c      	adds	r3, #60	; 0x3c
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4ac4      	ldr	r2, [pc, #784]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001b54:	4694      	mov	ip, r2
 8001b56:	4463      	add	r3, ip
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	059b      	lsls	r3, r3, #22
 8001b5e:	0d9a      	lsrs	r2, r3, #22
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	18d2      	adds	r2, r2, r3
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	0018      	movs	r0, r3
 8001b78:	f007 f9ea 	bl	8008f50 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2238      	movs	r2, #56	; 0x38
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d100      	bne.n	8001b8a <PCD_EP_ISR_Handler+0x9a>
 8001b88:	e348      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d000      	beq.n	8001b94 <PCD_EP_ISR_Handler+0xa4>
 8001b92:	e343      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2238      	movs	r2, #56	; 0x38
 8001b98:	5c9b      	ldrb	r3, [r3, r2]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2238      	movs	r2, #56	; 0x38
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]
 8001bb2:	e333      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	337d      	adds	r3, #125	; 0x7d
 8001bb8:	33ff      	adds	r3, #255	; 0xff
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2126      	movs	r1, #38	; 0x26
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d02a      	beq.n	8001c2a <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f7ff fa83 	bl	80010ec <PCD_GET_EP_RX_CNT>
 8001be6:	0003      	movs	r3, r0
 8001be8:	001a      	movs	r2, r3
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	22b1      	movs	r2, #177	; 0xb1
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	1899      	adds	r1, r3, r2
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f004 fe3e 	bl	8006884 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <PCD_EP_ISR_Handler+0x378>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f007 f95e 	bl	8008ee4 <HAL_PCD_SetupStageCallback>
 8001c28:	e2f8      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8001c2a:	2326      	movs	r3, #38	; 0x26
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	5e9b      	ldrsh	r3, [r3, r2]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db00      	blt.n	8001c38 <PCD_EP_ISR_Handler+0x148>
 8001c36:	e2f1      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <PCD_EP_ISR_Handler+0x378>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	f7ff fa45 	bl	80010ec <PCD_GET_EP_RX_CNT>
 8001c62:	0003      	movs	r3, r0
 8001c64:	001a      	movs	r2, r3
 8001c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c68:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01a      	beq.n	8001ca8 <PCD_EP_ISR_Handler+0x1b8>
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d016      	beq.n	8001ca8 <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	6959      	ldr	r1, [r3, #20]
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f004 fdfa 	bl	8006884 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	18d2      	adds	r2, r2, r3
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f007 f933 	bl	8008f0e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2126      	movs	r1, #38	; 0x26
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d000      	beq.n	8001cc2 <PCD_EP_ISR_Handler+0x1d2>
 8001cc0:	e2ac      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	401a      	ands	r2, r3
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d100      	bne.n	8001cd6 <PCD_EP_ISR_Handler+0x1e6>
 8001cd4:	e2a2      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001cdc:	0412      	lsls	r2, r2, #16
 8001cde:	0c12      	lsrs	r2, r2, #16
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce8:	d916      	bls.n	8001d18 <PCD_EP_ISR_Handler+0x228>
 8001cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <PCD_EP_ISR_Handler+0x212>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	069b      	lsls	r3, r3, #26
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0609      	lsls	r1, r1, #24
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e024      	b.n	8001d62 <PCD_EP_ISR_Handler+0x272>
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10d      	bne.n	8001d3c <PCD_EP_ISR_Handler+0x24c>
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d26:	4951      	ldr	r1, [pc, #324]	; (8001e6c <PCD_EP_ISR_Handler+0x37c>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	0609      	lsls	r1, r1, #24
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e012      	b.n	8001d62 <PCD_EP_ISR_Handler+0x272>
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d002      	beq.n	8001d54 <PCD_EP_ISR_Handler+0x264>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	069a      	lsls	r2, r3, #26
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <PCD_EP_ISR_Handler+0x374>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <PCD_EP_ISR_Handler+0x380>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	0152      	lsls	r2, r2, #5
 8001d74:	4053      	eors	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	0192      	lsls	r2, r2, #6
 8001d7e:	4053      	eors	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	493a      	ldr	r1, [pc, #232]	; (8001e74 <PCD_EP_ISR_Handler+0x384>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e245      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	001a      	movs	r2, r3
 8001d96:	2129      	movs	r1, #41	; 0x29
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	18d3      	adds	r3, r2, r3
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2026      	movs	r0, #38	; 0x26
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8001da8:	183b      	adds	r3, r7, r0
 8001daa:	2200      	movs	r2, #0
 8001dac:	5e9b      	ldrsh	r3, [r3, r2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db00      	blt.n	8001db4 <PCD_EP_ISR_Handler+0x2c4>
 8001db2:	e0e4      	b.n	8001f7e <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	001a      	movs	r2, r3
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <PCD_EP_ISR_Handler+0x378>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	0008      	movs	r0, r1
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	0013      	movs	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	189b      	adds	r3, r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	3379      	adds	r3, #121	; 0x79
 8001df0:	33ff      	adds	r3, #255	; 0xff
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	18d3      	adds	r3, r2, r3
 8001df6:	3304      	adds	r3, #4
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	7a9b      	ldrb	r3, [r3, #10]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11d      	bne.n	8001e3e <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	252c      	movs	r5, #44	; 0x2c
 8001e0e:	197c      	adds	r4, r7, r5
 8001e10:	0019      	movs	r1, r3
 8001e12:	0010      	movs	r0, r2
 8001e14:	f7ff f96a 	bl	80010ec <PCD_GET_EP_RX_CNT>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8001e1c:	002c      	movs	r4, r5
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <PCD_EP_ISR_Handler+0x338>
 8001e26:	e082      	b.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	6959      	ldr	r1, [r3, #20]
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	889a      	ldrh	r2, [r3, #4]
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	f004 fd24 	bl	8006884 <USB_ReadPMA>
 8001e3c:	e077      	b.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d118      	bne.n	8001e78 <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e46:	232c      	movs	r3, #44	; 0x2c
 8001e48:	18fc      	adds	r4, r7, r3
 8001e4a:	2326      	movs	r3, #38	; 0x26
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 f9ef 	bl	8002238 <HAL_PCD_EP_DB_Receive>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	8023      	strh	r3, [r4, #0]
 8001e5e:	e066      	b.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
 8001e60:	07ff8f0f 	.word	0x07ff8f0f
 8001e64:	40009800 	.word	0x40009800
 8001e68:	07ff0f8f 	.word	0x07ff0f8f
 8001e6c:	83ffffff 	.word	0x83ffffff
 8001e70:	07ffbf8f 	.word	0x07ffbf8f
 8001e74:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4adb      	ldr	r2, [pc, #876]	; (80021f8 <PCD_EP_ISR_Handler+0x708>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	001a      	movs	r2, r3
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18d3      	adds	r3, r2, r3
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	49d7      	ldr	r1, [pc, #860]	; (80021fc <PCD_EP_ISR_Handler+0x70c>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d01c      	beq.n	8001ef6 <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	252c      	movs	r5, #44	; 0x2c
 8001ec8:	197c      	adds	r4, r7, r5
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f7ff f92f 	bl	8001130 <PCD_GET_EP_DBUF0_CNT>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8001ed6:	002c      	movs	r4, r5
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d026      	beq.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	6959      	ldr	r1, [r3, #20]
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	88da      	ldrh	r2, [r3, #6]
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	f004 fcc8 	bl	8006884 <USB_ReadPMA>
 8001ef4:	e01b      	b.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	252c      	movs	r5, #44	; 0x2c
 8001f02:	197c      	adds	r4, r7, r5
 8001f04:	0019      	movs	r1, r3
 8001f06:	0010      	movs	r0, r2
 8001f08:	f7ff f934 	bl	8001174 <PCD_GET_EP_DBUF1_CNT>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8001f10:	002c      	movs	r4, r5
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	891a      	ldrh	r2, [r3, #8]
 8001f26:	193b      	adds	r3, r7, r4
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f004 fcab 	bl	8006884 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	18d2      	adds	r2, r2, r3
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	18d2      	adds	r2, r2, r3
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <PCD_EP_ISR_Handler+0x470>
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d207      	bcs.n	8001f70 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f006 ffd0 	bl	8008f0e <HAL_PCD_DataOutStageCallback>
 8001f6e:	e006      	b.n	8001f7e <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f003 fa35 	bl	80053e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	4013      	ands	r3, r2
 8001f88:	d100      	bne.n	8001f8c <PCD_EP_ISR_Handler+0x49c>
 8001f8a:	e147      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f8c:	2129      	movs	r1, #41	; 0x29
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	0013      	movs	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	189b      	adds	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	3338      	adds	r3, #56	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	001a      	movs	r2, r3
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	18d3      	adds	r3, r2, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a92      	ldr	r2, [pc, #584]	; (8002200 <PCD_EP_ISR_Handler+0x710>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	18d3      	adds	r3, r2, r3
 8001fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0209      	lsls	r1, r1, #8
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	78db      	ldrb	r3, [r3, #3]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d000      	beq.n	8001fdc <PCD_EP_ISR_Handler+0x4ec>
 8001fda:	e0c3      	b.n	8002164 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe4:	7a9b      	ldrb	r3, [r3, #10]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d100      	bne.n	8001fec <PCD_EP_ISR_Handler+0x4fc>
 8001fea:	e0b3      	b.n	8002154 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fec:	183b      	adds	r3, r7, r0
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d057      	beq.n	80020a6 <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d131      	bne.n	8002062 <PCD_EP_ISR_Handler+0x572>
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4a7f      	ldr	r2, [pc, #508]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002006:	4694      	mov	ip, r2
 8002008:	4463      	add	r3, ip
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	497c      	ldr	r1, [pc, #496]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002014:	468c      	mov	ip, r1
 8002016:	4463      	add	r3, ip
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	0c12      	lsrs	r2, r2, #16
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4a77      	ldr	r2, [pc, #476]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002026:	4694      	mov	ip, r2
 8002028:	4463      	add	r3, ip
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4974      	ldr	r1, [pc, #464]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002034:	468c      	mov	ip, r1
 8002036:	4463      	add	r3, ip
 8002038:	4973      	ldr	r1, [pc, #460]	; (8002208 <PCD_EP_ISR_Handler+0x718>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4a6f      	ldr	r2, [pc, #444]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002046:	4694      	mov	ip, r2
 8002048:	4463      	add	r3, ip
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	496c      	ldr	r1, [pc, #432]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002054:	468c      	mov	ip, r1
 8002056:	4463      	add	r3, ip
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0609      	lsls	r1, r1, #24
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e078      	b.n	8002154 <PCD_EP_ISR_Handler+0x664>
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d174      	bne.n	8002154 <PCD_EP_ISR_Handler+0x664>
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4a64      	ldr	r2, [pc, #400]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002072:	4694      	mov	ip, r2
 8002074:	4463      	add	r3, ip
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4961      	ldr	r1, [pc, #388]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002080:	468c      	mov	ip, r1
 8002082:	4463      	add	r3, ip
 8002084:	0412      	lsls	r2, r2, #16
 8002086:	0c12      	lsrs	r2, r2, #16
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002092:	189a      	adds	r2, r3, r2
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	495a      	ldr	r1, [pc, #360]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 800209c:	468c      	mov	ip, r1
 800209e:	4463      	add	r3, ip
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e056      	b.n	8002154 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d131      	bne.n	8002112 <PCD_EP_ISR_Handler+0x622>
 80020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4a53      	ldr	r2, [pc, #332]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 80020b6:	4694      	mov	ip, r2
 80020b8:	4463      	add	r3, ip
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4950      	ldr	r1, [pc, #320]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 80020c4:	468c      	mov	ip, r1
 80020c6:	4463      	add	r3, ip
 80020c8:	0412      	lsls	r2, r2, #16
 80020ca:	0c12      	lsrs	r2, r2, #16
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 80020d6:	4694      	mov	ip, r2
 80020d8:	4463      	add	r3, ip
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4948      	ldr	r1, [pc, #288]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 80020e4:	468c      	mov	ip, r1
 80020e6:	4463      	add	r3, ip
 80020e8:	4947      	ldr	r1, [pc, #284]	; (8002208 <PCD_EP_ISR_Handler+0x718>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4a43      	ldr	r2, [pc, #268]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 80020f6:	4694      	mov	ip, r2
 80020f8:	4463      	add	r3, ip
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4940      	ldr	r1, [pc, #256]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002104:	468c      	mov	ip, r1
 8002106:	4463      	add	r3, ip
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0609      	lsls	r1, r1, #24
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	e020      	b.n	8002154 <PCD_EP_ISR_Handler+0x664>
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d11c      	bne.n	8002154 <PCD_EP_ISR_Handler+0x664>
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4a38      	ldr	r2, [pc, #224]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002122:	4694      	mov	ip, r2
 8002124:	4463      	add	r3, ip
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4935      	ldr	r1, [pc, #212]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002130:	468c      	mov	ip, r1
 8002132:	4463      	add	r3, ip
 8002134:	0412      	lsls	r2, r2, #16
 8002136:	0c12      	lsrs	r2, r2, #16
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4a30      	ldr	r2, [pc, #192]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 8002142:	189a      	adds	r2, r3, r2
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	492e      	ldr	r1, [pc, #184]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 800214c:	468c      	mov	ip, r1
 800214e:	4463      	add	r3, ip
 8002150:	6852      	ldr	r2, [r2, #4]
 8002152:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0011      	movs	r1, r2
 800215c:	0018      	movs	r0, r3
 800215e:	f006 fef7 	bl	8008f50 <HAL_PCD_DataInStageCallback>
 8002162:	e05b      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002164:	2326      	movs	r3, #38	; 0x26
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d14c      	bne.n	800220c <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <PCD_EP_ISR_Handler+0x714>)
 800217a:	4694      	mov	ip, r2
 800217c:	4463      	add	r3, ip
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b29a      	uxth	r2, r3
 8002184:	212e      	movs	r1, #46	; 0x2e
 8002186:	187b      	adds	r3, r7, r1
 8002188:	0592      	lsls	r2, r2, #22
 800218a:	0d92      	lsrs	r2, r2, #22
 800218c:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	187b      	adds	r3, r7, r1
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d907      	bls.n	80021aa <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	619a      	str	r2, [r3, #24]
 80021a8:	e002      	b.n	80021b0 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f006 fec5 	bl	8008f50 <HAL_PCD_DataInStageCallback>
 80021c6:	e029      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	212e      	movs	r1, #46	; 0x2e
 80021ce:	187b      	adds	r3, r7, r1
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	18d2      	adds	r2, r2, r3
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80021d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	18d2      	adds	r2, r2, r3
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ec:	0011      	movs	r1, r2
 80021ee:	0018      	movs	r0, r3
 80021f0:	f003 f8fa 	bl	80053e8 <USB_EPStartXfer>
 80021f4:	e012      	b.n	800221c <PCD_EP_ISR_Handler+0x72c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	07ff8f8f 	.word	0x07ff8f8f
 80021fc:	000080c0 	.word	0x000080c0
 8002200:	07ff8f0f 	.word	0x07ff8f0f
 8002204:	40009800 	.word	0x40009800
 8002208:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800220c:	2326      	movs	r3, #38	; 0x26
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f000 f8fa 	bl	8002410 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	4013      	ands	r3, r2
 8002228:	d000      	beq.n	800222c <PCD_EP_ISR_Handler+0x73c>
 800222a:	e467      	b.n	8001afc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b00e      	add	sp, #56	; 0x38
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)

08002238 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002246:	1dbb      	adds	r3, r7, #6
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	01db      	lsls	r3, r3, #7
 800224e:	4013      	ands	r3, r2
 8002250:	d068      	beq.n	8002324 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	251e      	movs	r5, #30
 800225e:	197c      	adds	r4, r7, r5
 8002260:	0019      	movs	r1, r3
 8002262:	0010      	movs	r0, r2
 8002264:	f7fe ff64 	bl	8001130 <PCD_GET_EP_DBUF0_CNT>
 8002268:	0003      	movs	r3, r0
 800226a:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	197b      	adds	r3, r7, r5
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d307      	bcc.n	8002288 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	197b      	adds	r3, r7, r5
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	1ad2      	subs	r2, r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e002      	b.n	800228e <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11a      	bne.n	80022cc <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	001a      	movs	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a56      	ldr	r2, [pc, #344]	; (8002400 <HAL_PCD_EP_DB_Receive+0x1c8>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0192      	lsls	r2, r2, #6
 80022b2:	4053      	eors	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	494f      	ldr	r1, [pc, #316]	; (8002404 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	4013      	ands	r3, r2
 80022d4:	d015      	beq.n	8002302 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	001a      	movs	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	18d3      	adds	r3, r2, r3
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a48      	ldr	r2, [pc, #288]	; (8002408 <HAL_PCD_EP_DB_Receive+0x1d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	001a      	movs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4943      	ldr	r1, [pc, #268]	; (800240c <HAL_PCD_EP_DB_Receive+0x1d4>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8002302:	241e      	movs	r4, #30
 8002304:	193b      	adds	r3, r7, r4
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d100      	bne.n	800230e <HAL_PCD_EP_DB_Receive+0xd6>
 800230c:	e071      	b.n	80023f2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6959      	ldr	r1, [r3, #20]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	88da      	ldrh	r2, [r3, #6]
 800231a:	193b      	adds	r3, r7, r4
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f004 fab1 	bl	8006884 <USB_ReadPMA>
 8002322:	e066      	b.n	80023f2 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	251e      	movs	r5, #30
 8002330:	197c      	adds	r4, r7, r5
 8002332:	0019      	movs	r1, r3
 8002334:	0010      	movs	r0, r2
 8002336:	f7fe ff1d 	bl	8001174 <PCD_GET_EP_DBUF1_CNT>
 800233a:	0003      	movs	r3, r0
 800233c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	197b      	adds	r3, r7, r5
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d307      	bcc.n	800235a <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	197b      	adds	r3, r7, r5
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	619a      	str	r2, [r3, #24]
 8002358:	e002      	b.n	8002360 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11a      	bne.n	800239e <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	18d3      	adds	r3, r2, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800237a:	4013      	ands	r3, r2
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	0192      	lsls	r2, r2, #6
 8002384:	4053      	eors	r3, r2
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	001a      	movs	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	491a      	ldr	r1, [pc, #104]	; (8002404 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	4013      	ands	r3, r2
 80023a6:	d115      	bne.n	80023d4 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	001a      	movs	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	18d3      	adds	r3, r2, r3
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <HAL_PCD_EP_DB_Receive+0x1d0>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	001a      	movs	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	490f      	ldr	r1, [pc, #60]	; (800240c <HAL_PCD_EP_DB_Receive+0x1d4>)
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80023d4:	241e      	movs	r4, #30
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	891a      	ldrh	r2, [r3, #8]
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f004 fa49 	bl	8006884 <USB_ReadPMA>
    }
  }

  return count;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	881b      	ldrh	r3, [r3, #0]
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b00a      	add	sp, #40	; 0x28
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002400:	07ffbf8f 	.word	0x07ffbf8f
 8002404:	00008080 	.word	0x00008080
 8002408:	07ff8f8f 	.word	0x07ff8f8f
 800240c:	000080c0 	.word	0x000080c0

08002410 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b08e      	sub	sp, #56	; 0x38
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	4013      	ands	r3, r2
 8002426:	d100      	bne.n	800242a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002428:	e1fc      	b.n	8002824 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	2526      	movs	r5, #38	; 0x26
 8002436:	197c      	adds	r4, r7, r5
 8002438:	0019      	movs	r1, r3
 800243a:	0010      	movs	r0, r2
 800243c:	f7fe fe78 	bl	8001130 <PCD_GET_EP_DBUF0_CNT>
 8002440:	0003      	movs	r3, r0
 8002442:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	197b      	adds	r3, r7, r5
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d907      	bls.n	8002460 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	197b      	adds	r3, r7, r5
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	1ad2      	subs	r2, r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	e002      	b.n	8002466 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d000      	beq.n	8002470 <HAL_PCD_EP_DB_Transmit+0x60>
 800246e:	e0d2      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d131      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0xcc>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4ae5      	ldr	r2, [pc, #916]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002480:	4694      	mov	ip, r2
 8002482:	4463      	add	r3, ip
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	49e1      	ldr	r1, [pc, #900]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800248e:	468c      	mov	ip, r1
 8002490:	4463      	add	r3, ip
 8002492:	0412      	lsls	r2, r2, #16
 8002494:	0c12      	lsrs	r2, r2, #16
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4add      	ldr	r2, [pc, #884]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024a0:	4694      	mov	ip, r2
 80024a2:	4463      	add	r3, ip
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	49d9      	ldr	r1, [pc, #868]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024ae:	468c      	mov	ip, r1
 80024b0:	4463      	add	r3, ip
 80024b2:	49d9      	ldr	r1, [pc, #868]	; (8002818 <HAL_PCD_EP_DB_Transmit+0x408>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4ad5      	ldr	r2, [pc, #852]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024c0:	4694      	mov	ip, r2
 80024c2:	4463      	add	r3, ip
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	49d1      	ldr	r1, [pc, #836]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024ce:	468c      	mov	ip, r1
 80024d0:	4463      	add	r3, ip
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0609      	lsls	r1, r1, #24
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e020      	b.n	800251e <HAL_PCD_EP_DB_Transmit+0x10e>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11c      	bne.n	800251e <HAL_PCD_EP_DB_Transmit+0x10e>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4aca      	ldr	r2, [pc, #808]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024ec:	4694      	mov	ip, r2
 80024ee:	4463      	add	r3, ip
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	49c6      	ldr	r1, [pc, #792]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80024fa:	468c      	mov	ip, r1
 80024fc:	4463      	add	r3, ip
 80024fe:	0412      	lsls	r2, r2, #16
 8002500:	0c12      	lsrs	r2, r2, #16
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4ac2      	ldr	r2, [pc, #776]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800250c:	189a      	adds	r2, r3, r2
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	49bf      	ldr	r1, [pc, #764]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002516:	468c      	mov	ip, r1
 8002518:	4463      	add	r3, ip
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d131      	bne.n	800258a <HAL_PCD_EP_DB_Transmit+0x17a>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4ab9      	ldr	r2, [pc, #740]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800252e:	4694      	mov	ip, r2
 8002530:	4463      	add	r3, ip
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	49b6      	ldr	r1, [pc, #728]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800253c:	468c      	mov	ip, r1
 800253e:	4463      	add	r3, ip
 8002540:	0412      	lsls	r2, r2, #16
 8002542:	0c12      	lsrs	r2, r2, #16
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4ab1      	ldr	r2, [pc, #708]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800254e:	4694      	mov	ip, r2
 8002550:	4463      	add	r3, ip
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	49ae      	ldr	r1, [pc, #696]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800255c:	468c      	mov	ip, r1
 800255e:	4463      	add	r3, ip
 8002560:	49ad      	ldr	r1, [pc, #692]	; (8002818 <HAL_PCD_EP_DB_Transmit+0x408>)
 8002562:	400a      	ands	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4aa9      	ldr	r2, [pc, #676]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800256e:	4694      	mov	ip, r2
 8002570:	4463      	add	r3, ip
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	49a6      	ldr	r1, [pc, #664]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800257c:	468c      	mov	ip, r1
 800257e:	4463      	add	r3, ip
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0609      	lsls	r1, r1, #24
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	e020      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x1bc>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d11c      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x1bc>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4a9e      	ldr	r2, [pc, #632]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800259a:	4694      	mov	ip, r2
 800259c:	4463      	add	r3, ip
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	499b      	ldr	r1, [pc, #620]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80025a8:	468c      	mov	ip, r1
 80025aa:	4463      	add	r3, ip
 80025ac:	0412      	lsls	r2, r2, #16
 80025ae:	0c12      	lsrs	r2, r2, #16
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4a96      	ldr	r2, [pc, #600]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80025ba:	189a      	adds	r2, r3, r2
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4994      	ldr	r1, [pc, #592]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80025c4:	468c      	mov	ip, r1
 80025c6:	4463      	add	r3, ip
 80025c8:	6852      	ldr	r2, [r2, #4]
 80025ca:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f006 fcbb 	bl	8008f50 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025da:	1dbb      	adds	r3, r7, #6
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	01db      	lsls	r3, r3, #7
 80025e2:	4013      	ands	r3, r2
 80025e4:	d100      	bne.n	80025e8 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80025e6:	e31a      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a88      	ldr	r2, [pc, #544]	; (800281c <HAL_PCD_EP_DB_Transmit+0x40c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260e:	4984      	ldr	r1, [pc, #528]	; (8002820 <HAL_PCD_EP_DB_Transmit+0x410>)
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e303      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	01db      	lsls	r3, r3, #7
 800261e:	4013      	ands	r3, r2
 8002620:	d015      	beq.n	800264e <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	001a      	movs	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	18d3      	adds	r3, r2, r3
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7a      	ldr	r2, [pc, #488]	; (800281c <HAL_PCD_EP_DB_Transmit+0x40c>)
 8002634:	4013      	ands	r3, r2
 8002636:	623b      	str	r3, [r7, #32]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	4975      	ldr	r1, [pc, #468]	; (8002820 <HAL_PCD_EP_DB_Transmit+0x410>)
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2224      	movs	r2, #36	; 0x24
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d000      	beq.n	800265a <HAL_PCD_EP_DB_Transmit+0x24a>
 8002658:	e2e1      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	2126      	movs	r1, #38	; 0x26
 8002660:	187b      	adds	r3, r7, r1
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	18d2      	adds	r2, r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	187b      	adds	r3, r7, r1
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	18d2      	adds	r2, r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d309      	bcc.n	8002698 <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	621a      	str	r2, [r3, #32]
 8002696:	e016      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d108      	bne.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 80026a0:	2326      	movs	r3, #38	; 0x26
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]
 80026b0:	e009      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2224      	movs	r2, #36	; 0x24
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d172      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x3a4>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026d6:	4694      	mov	ip, r2
 80026d8:	4463      	add	r3, ip
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	494c      	ldr	r1, [pc, #304]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80026e4:	468c      	mov	ip, r1
 80026e6:	4463      	add	r3, ip
 80026e8:	0412      	lsls	r2, r2, #16
 80026ea:	0c12      	lsrs	r2, r2, #16
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b3e      	cmp	r3, #62	; 0x3e
 80026f2:	d91e      	bls.n	8002732 <HAL_PCD_EP_DB_Transmit+0x322>
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	221f      	movs	r2, #31
 80026fe:	4013      	ands	r3, r2
 8002700:	d102      	bne.n	8002708 <HAL_PCD_EP_DB_Transmit+0x2f8>
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4a41      	ldr	r2, [pc, #260]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002710:	4694      	mov	ip, r2
 8002712:	4463      	add	r3, ip
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	069b      	lsls	r3, r3, #26
 800271a:	431a      	orrs	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	493c      	ldr	r1, [pc, #240]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002724:	468c      	mov	ip, r1
 8002726:	4463      	add	r3, ip
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	0609      	lsls	r1, r1, #24
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e065      	b.n	80027fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d121      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x36c>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002740:	4694      	mov	ip, r2
 8002742:	4463      	add	r3, ip
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4931      	ldr	r1, [pc, #196]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800274e:	468c      	mov	ip, r1
 8002750:	4463      	add	r3, ip
 8002752:	4931      	ldr	r1, [pc, #196]	; (8002818 <HAL_PCD_EP_DB_Transmit+0x408>)
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002760:	4694      	mov	ip, r2
 8002762:	4463      	add	r3, ip
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4929      	ldr	r1, [pc, #164]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 800276e:	468c      	mov	ip, r1
 8002770:	4463      	add	r3, ip
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	0609      	lsls	r1, r1, #24
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e040      	b.n	80027fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	d002      	beq.n	8002790 <HAL_PCD_EP_DB_Transmit+0x380>
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	3301      	adds	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 8002798:	4694      	mov	ip, r2
 800279a:	4463      	add	r3, ip
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	069a      	lsls	r2, r3, #26
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	481a      	ldr	r0, [pc, #104]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80027aa:	4684      	mov	ip, r0
 80027ac:	4463      	add	r3, ip
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e024      	b.n	80027fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d120      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x3ee>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80027c4:	4694      	mov	ip, r2
 80027c6:	4463      	add	r3, ip
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4910      	ldr	r1, [pc, #64]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80027d2:	468c      	mov	ip, r1
 80027d4:	4463      	add	r3, ip
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	0c12      	lsrs	r2, r2, #16
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80027e4:	4694      	mov	ip, r2
 80027e6:	4463      	add	r3, ip
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4807      	ldr	r0, [pc, #28]	; (8002814 <HAL_PCD_EP_DB_Transmit+0x404>)
 80027f6:	4684      	mov	ip, r0
 80027f8:	4463      	add	r3, ip
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6959      	ldr	r1, [r3, #20]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	88da      	ldrh	r2, [r3, #6]
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	b29b      	uxth	r3, r3
 800280e:	f003 ffc3 	bl	8006798 <USB_WritePMA>
 8002812:	e204      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
 8002814:	40009800 	.word	0x40009800
 8002818:	83ffffff 	.word	0x83ffffff
 800281c:	07ff8f8f 	.word	0x07ff8f8f
 8002820:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	2526      	movs	r5, #38	; 0x26
 8002830:	197c      	adds	r4, r7, r5
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7fe fc9d 	bl	8001174 <PCD_GET_EP_DBUF1_CNT>
 800283a:	0003      	movs	r3, r0
 800283c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	197b      	adds	r3, r7, r5
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d307      	bcc.n	800285a <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	197b      	adds	r3, r7, r5
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	e002      	b.n	8002860 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d000      	beq.n	800286a <HAL_PCD_EP_DB_Transmit+0x45a>
 8002868:	e0d2      	b.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d131      	bne.n	80028d6 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4acd      	ldr	r2, [pc, #820]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800287a:	4694      	mov	ip, r2
 800287c:	4463      	add	r3, ip
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	49ca      	ldr	r1, [pc, #808]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002888:	468c      	mov	ip, r1
 800288a:	4463      	add	r3, ip
 800288c:	0412      	lsls	r2, r2, #16
 800288e:	0c12      	lsrs	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4ac5      	ldr	r2, [pc, #788]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800289a:	4694      	mov	ip, r2
 800289c:	4463      	add	r3, ip
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	49c2      	ldr	r1, [pc, #776]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80028a8:	468c      	mov	ip, r1
 80028aa:	4463      	add	r3, ip
 80028ac:	49c1      	ldr	r1, [pc, #772]	; (8002bb4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4abd      	ldr	r2, [pc, #756]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80028ba:	4694      	mov	ip, r2
 80028bc:	4463      	add	r3, ip
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	49ba      	ldr	r1, [pc, #744]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80028c8:	468c      	mov	ip, r1
 80028ca:	4463      	add	r3, ip
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0609      	lsls	r1, r1, #24
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e020      	b.n	8002918 <HAL_PCD_EP_DB_Transmit+0x508>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d11c      	bne.n	8002918 <HAL_PCD_EP_DB_Transmit+0x508>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4ab2      	ldr	r2, [pc, #712]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80028e6:	4694      	mov	ip, r2
 80028e8:	4463      	add	r3, ip
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	49af      	ldr	r1, [pc, #700]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80028f4:	468c      	mov	ip, r1
 80028f6:	4463      	add	r3, ip
 80028f8:	0412      	lsls	r2, r2, #16
 80028fa:	0c12      	lsrs	r2, r2, #16
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4aaa      	ldr	r2, [pc, #680]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002906:	189a      	adds	r2, r3, r2
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	49a8      	ldr	r1, [pc, #672]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002910:	468c      	mov	ip, r1
 8002912:	4463      	add	r3, ip
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d131      	bne.n	8002984 <HAL_PCD_EP_DB_Transmit+0x574>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4aa2      	ldr	r2, [pc, #648]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002928:	4694      	mov	ip, r2
 800292a:	4463      	add	r3, ip
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	499e      	ldr	r1, [pc, #632]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002936:	468c      	mov	ip, r1
 8002938:	4463      	add	r3, ip
 800293a:	0412      	lsls	r2, r2, #16
 800293c:	0c12      	lsrs	r2, r2, #16
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4a9a      	ldr	r2, [pc, #616]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002948:	4694      	mov	ip, r2
 800294a:	4463      	add	r3, ip
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4996      	ldr	r1, [pc, #600]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002956:	468c      	mov	ip, r1
 8002958:	4463      	add	r3, ip
 800295a:	4996      	ldr	r1, [pc, #600]	; (8002bb4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 800295c:	400a      	ands	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4a92      	ldr	r2, [pc, #584]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002968:	4694      	mov	ip, r2
 800296a:	4463      	add	r3, ip
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	498e      	ldr	r1, [pc, #568]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002976:	468c      	mov	ip, r1
 8002978:	4463      	add	r3, ip
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	0609      	lsls	r1, r1, #24
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	e020      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x5b6>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	785b      	ldrb	r3, [r3, #1]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d11c      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x5b6>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002994:	4694      	mov	ip, r2
 8002996:	4463      	add	r3, ip
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4983      	ldr	r1, [pc, #524]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80029a2:	468c      	mov	ip, r1
 80029a4:	4463      	add	r3, ip
 80029a6:	0412      	lsls	r2, r2, #16
 80029a8:	0c12      	lsrs	r2, r2, #16
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4a7f      	ldr	r2, [pc, #508]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80029b4:	189a      	adds	r2, r3, r2
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	497c      	ldr	r1, [pc, #496]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80029be:	468c      	mov	ip, r1
 80029c0:	4463      	add	r3, ip
 80029c2:	6852      	ldr	r2, [r2, #4]
 80029c4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f006 fabe 	bl	8008f50 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	01db      	lsls	r3, r3, #7
 80029dc:	4013      	ands	r3, r2
 80029de:	d000      	beq.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x5d2>
 80029e0:	e11d      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	001a      	movs	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a71      	ldr	r2, [pc, #452]	; (8002bb8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	001a      	movs	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	18d3      	adds	r3, r2, r3
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	496c      	ldr	r1, [pc, #432]	; (8002bbc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e106      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	01db      	lsls	r3, r3, #7
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d115      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	001a      	movs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	001a      	movs	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	495e      	ldr	r1, [pc, #376]	; (8002bbc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d000      	beq.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x644>
 8002a52:	e0e4      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	2126      	movs	r1, #38	; 0x26
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	18d2      	adds	r2, r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	18d2      	adds	r2, r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d309      	bcc.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	621a      	str	r2, [r3, #32]
 8002a90:	e016      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 8002a9a:	2326      	movs	r3, #38	; 0x26
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2224      	movs	r2, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	e009      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d000      	beq.n	8002aca <HAL_PCD_EP_DB_Transmit+0x6ba>
 8002ac8:	e07a      	b.n	8002bc0 <HAL_PCD_EP_DB_Transmit+0x7b0>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4a37      	ldr	r2, [pc, #220]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ad2:	4694      	mov	ip, r2
 8002ad4:	4463      	add	r3, ip
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4934      	ldr	r1, [pc, #208]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ae0:	468c      	mov	ip, r1
 8002ae2:	4463      	add	r3, ip
 8002ae4:	0412      	lsls	r2, r2, #16
 8002ae6:	0c12      	lsrs	r2, r2, #16
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	2b3e      	cmp	r3, #62	; 0x3e
 8002aee:	d91e      	bls.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x71e>
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	221f      	movs	r2, #31
 8002afa:	4013      	ands	r3, r2
 8002afc:	d102      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b0c:	4694      	mov	ip, r2
 8002b0e:	4463      	add	r3, ip
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b20:	468c      	mov	ip, r1
 8002b22:	4463      	add	r3, ip
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0609      	lsls	r1, r1, #24
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	e06d      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d121      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x768>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	4463      	add	r3, ip
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b4a:	468c      	mov	ip, r1
 8002b4c:	4463      	add	r3, ip
 8002b4e:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	4463      	add	r3, ip
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4911      	ldr	r1, [pc, #68]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b6a:	468c      	mov	ip, r1
 8002b6c:	4463      	add	r3, ip
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	0609      	lsls	r1, r1, #24
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e048      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d002      	beq.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x77c>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002b94:	4694      	mov	ip, r2
 8002b96:	4463      	add	r3, ip
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	069a      	lsls	r2, r3, #26
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8002ba6:	4684      	mov	ip, r0
 8002ba8:	4463      	add	r3, ip
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e02c      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002bb0:	40009800 	.word	0x40009800
 8002bb4:	83ffffff 	.word	0x83ffffff
 8002bb8:	07ff8f8f 	.word	0x07ff8f8f
 8002bbc:	0000c080 	.word	0x0000c080
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d120      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x7fa>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4a25      	ldr	r2, [pc, #148]	; (8002c64 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002bd0:	4694      	mov	ip, r2
 8002bd2:	4463      	add	r3, ip
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4921      	ldr	r1, [pc, #132]	; (8002c64 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002bde:	468c      	mov	ip, r1
 8002be0:	4463      	add	r3, ip
 8002be2:	0412      	lsls	r2, r2, #16
 8002be4:	0c12      	lsrs	r2, r2, #16
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	4463      	add	r3, ip
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4818      	ldr	r0, [pc, #96]	; (8002c64 <HAL_PCD_EP_DB_Transmit+0x854>)
 8002c02:	4684      	mov	ip, r0
 8002c04:	4463      	add	r3, ip
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6959      	ldr	r1, [r3, #20]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	891a      	ldrh	r2, [r3, #8]
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f003 fdbd 	bl	8006798 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	001a      	movs	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	18d3      	adds	r3, r2, r3
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_PCD_EP_DB_Transmit+0x858>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	637b      	str	r3, [r7, #52]	; 0x34
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	2210      	movs	r2, #16
 8002c38:	4053      	eors	r3, r2
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4053      	eors	r3, r2
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	001a      	movs	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c54:	4905      	ldr	r1, [pc, #20]	; (8002c6c <HAL_PCD_EP_DB_Transmit+0x85c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b00e      	add	sp, #56	; 0x38
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	40009800 	.word	0x40009800
 8002c68:	07ff8fbf 	.word	0x07ff8fbf
 8002c6c:	00008080 	.word	0x00008080

08002c70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	0008      	movs	r0, r1
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	240a      	movs	r4, #10
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	1c02      	adds	r2, r0, #0
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	2308      	movs	r3, #8
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	1c0a      	adds	r2, r1, #0
 8002c8c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c8e:	0021      	movs	r1, r4
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	3338      	adds	r3, #56	; 0x38
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00c      	b.n	8002cd4 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cba:	230a      	movs	r3, #10
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	189b      	adds	r3, r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	3379      	adds	r3, #121	; 0x79
 8002cca:	33ff      	adds	r3, #255	; 0xff
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	18d3      	adds	r3, r2, r3
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	809a      	strh	r2, [r3, #4]
 8002cec:	e00b      	b.n	8002d06 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0c1b      	lsrs	r3, r3, #16
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b007      	add	sp, #28
 8002d0e:	bd90      	pop	{r4, r7, pc}

08002d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	23bf      	movs	r3, #191	; 0xbf
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	2101      	movs	r1, #1
 8002d26:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	23bd      	movs	r3, #189	; 0xbd
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	2100      	movs	r1, #0
 8002d30:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	2201      	movs	r2, #1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	2202      	movs	r2, #2
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_PWREx_EnableVddUSB+0x18>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_PWREx_EnableVddUSB+0x18>)
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	00c9      	lsls	r1, r1, #3
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40007000 	.word	0x40007000

08002d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	0019      	movs	r1, r3
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d11f      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	0013      	movs	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4912      	ldr	r1, [pc, #72]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd f9ae 	bl	8000104 <__udivsi3>
 8002da8:	0003      	movs	r3, r0
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dae:	e008      	b.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e001      	b.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e009      	b.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d0ed      	beq.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40007000 	.word	0x40007000
 8002de4:	fffff9ff 	.word	0xfffff9ff
 8002de8:	20000004 	.word	0x20000004
 8002dec:	000f4240 	.word	0x000f4240

08002df0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	23e0      	movs	r3, #224	; 0xe0
 8002dfa:	01db      	lsls	r3, r3, #7
 8002dfc:	4013      	ands	r3, r2
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f000 fb50 	bl	80034bc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d100      	bne.n	8002e28 <HAL_RCC_OscConfig+0x20>
 8002e26:	e07c      	b.n	8002f22 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e28:	4bc3      	ldr	r3, [pc, #780]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2238      	movs	r2, #56	; 0x38
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e32:	4bc1      	ldr	r3, [pc, #772]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2203      	movs	r2, #3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_OscConfig+0x40>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d002      	beq.n	8002e4e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d10b      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4e:	4bba      	ldr	r3, [pc, #744]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	4013      	ands	r3, r2
 8002e58:	d062      	beq.n	8002f20 <HAL_RCC_OscConfig+0x118>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d15e      	bne.n	8002f20 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e32a      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	025b      	lsls	r3, r3, #9
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_OscConfig+0x7a>
 8002e72:	4bb1      	ldr	r3, [pc, #708]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4bb0      	ldr	r3, [pc, #704]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	0249      	lsls	r1, r1, #9
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	02db      	lsls	r3, r3, #11
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10e      	bne.n	8002eac <HAL_RCC_OscConfig+0xa4>
 8002e8e:	4baa      	ldr	r3, [pc, #680]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4ba9      	ldr	r3, [pc, #676]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	02c9      	lsls	r1, r1, #11
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	4ba6      	ldr	r3, [pc, #664]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4ba5      	ldr	r3, [pc, #660]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	0249      	lsls	r1, r1, #9
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002eac:	4ba2      	ldr	r3, [pc, #648]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4ba1      	ldr	r3, [pc, #644]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002eb2:	49a2      	ldr	r1, [pc, #648]	; (800313c <HAL_RCC_OscConfig+0x334>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	4b9f      	ldr	r3, [pc, #636]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b9e      	ldr	r3, [pc, #632]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002ebe:	49a0      	ldr	r1, [pc, #640]	; (8003140 <HAL_RCC_OscConfig+0x338>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d014      	beq.n	8002ef6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fe40 	bl	8000b50 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed6:	f7fd fe3b 	bl	8000b50 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2e9      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee8:	4b93      	ldr	r3, [pc, #588]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0xce>
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fe2b 	bl	8000b50 <HAL_GetTick>
 8002efa:	0003      	movs	r3, r0
 8002efc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fd fe26 	bl	8000b50 <HAL_GetTick>
 8002f04:	0002      	movs	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e2d4      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	029b      	lsls	r3, r3, #10
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0xf8>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <HAL_RCC_OscConfig+0x126>
 8002f2c:	e099      	b.n	8003062 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2238      	movs	r2, #56	; 0x38
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f38:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4013      	ands	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d102      	bne.n	8002f4e <HAL_RCC_OscConfig+0x146>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d135      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_OscConfig+0x164>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e2a7      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a74      	ldr	r2, [pc, #464]	; (8003144 <HAL_RCC_OscConfig+0x33c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	021a      	lsls	r2, r3, #8
 8002f7c:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d112      	bne.n	8002fae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x340>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0adb      	lsrs	r3, r3, #11
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	4a69      	ldr	r2, [pc, #420]	; (800314c <HAL_RCC_OscConfig+0x344>)
 8002fa8:	40da      	lsrs	r2, r3
 8002faa:	4b69      	ldr	r3, [pc, #420]	; (8003150 <HAL_RCC_OscConfig+0x348>)
 8002fac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fae:	4b69      	ldr	r3, [pc, #420]	; (8003154 <HAL_RCC_OscConfig+0x34c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7fd fd70 	bl	8000a98 <HAL_InitTick>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d051      	beq.n	8003060 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e27d      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d030      	beq.n	800302a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5e      	ldr	r2, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x340>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b55      	ldr	r3, [pc, #340]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0049      	lsls	r1, r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fd fdb1 	bl	8000b50 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fdac 	bl	8000b50 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e25a      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4013      	ands	r3, r2
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x33c>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e01b      	b.n	8003062 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003030:	4949      	ldr	r1, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0x350>)
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fd fd8b 	bl	8000b50 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd fd86 	bl	8000b50 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e234      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4013      	ands	r3, r2
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x238>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003060:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d047      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2238      	movs	r2, #56	; 0x38
 8003072:	4013      	ands	r3, r2
 8003074:	2b18      	cmp	r3, #24
 8003076:	d10a      	bne.n	800308e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	2202      	movs	r2, #2
 800307e:	4013      	ands	r3, r2
 8003080:	d03c      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d138      	bne.n	80030fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e216      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003098:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800309a:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 800309c:	2101      	movs	r1, #1
 800309e:	430a      	orrs	r2, r1
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fd fd55 	bl	8000b50 <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fd fd50 	bl	8000b50 <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1fe      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d0f1      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a4>
 80030c8:	e018      	b.n	80030fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 80030cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	438a      	bics	r2, r1
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fd fd3b 	bl	8000b50 <HAL_GetTick>
 80030da:	0003      	movs	r3, r0
 80030dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fd fd36 	bl	8000b50 <HAL_GetTick>
 80030e4:	0002      	movs	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1e4      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	d1f1      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2204      	movs	r2, #4
 8003102:	4013      	ands	r3, r2
 8003104:	d100      	bne.n	8003108 <HAL_RCC_OscConfig+0x300>
 8003106:	e0c7      	b.n	8003298 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003108:	231f      	movs	r3, #31
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2238      	movs	r2, #56	; 0x38
 8003116:	4013      	ands	r3, r2
 8003118:	2b20      	cmp	r3, #32
 800311a:	d11f      	bne.n	800315c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x330>)
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d100      	bne.n	8003128 <HAL_RCC_OscConfig+0x320>
 8003126:	e0b7      	b.n	8003298 <HAL_RCC_OscConfig+0x490>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d000      	beq.n	8003132 <HAL_RCC_OscConfig+0x32a>
 8003130:	e0b2      	b.n	8003298 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1c2      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40021000 	.word	0x40021000
 800313c:	fffeffff 	.word	0xfffeffff
 8003140:	fffbffff 	.word	0xfffbffff
 8003144:	ffff80ff 	.word	0xffff80ff
 8003148:	ffffc7ff 	.word	0xffffc7ff
 800314c:	00f42400 	.word	0x00f42400
 8003150:	20000004 	.word	0x20000004
 8003154:	20000008 	.word	0x20000008
 8003158:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800315c:	4bb5      	ldr	r3, [pc, #724]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800315e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	055b      	lsls	r3, r3, #21
 8003164:	4013      	ands	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x364>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x366>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d011      	beq.n	8003196 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4bb0      	ldr	r3, [pc, #704]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003176:	4baf      	ldr	r3, [pc, #700]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	0549      	lsls	r1, r1, #21
 800317c:	430a      	orrs	r2, r1
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003180:	4bac      	ldr	r3, [pc, #688]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	055b      	lsls	r3, r3, #21
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800318e:	231f      	movs	r3, #31
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4ba8      	ldr	r3, [pc, #672]	; (8003438 <HAL_RCC_OscConfig+0x630>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4013      	ands	r3, r2
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a2:	4ba5      	ldr	r3, [pc, #660]	; (8003438 <HAL_RCC_OscConfig+0x630>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4ba4      	ldr	r3, [pc, #656]	; (8003438 <HAL_RCC_OscConfig+0x630>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0049      	lsls	r1, r1, #1
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fcce 	bl	8000b50 <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fd fcc9 	bl	8000b50 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e177      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031cc:	4b9a      	ldr	r3, [pc, #616]	; (8003438 <HAL_RCC_OscConfig+0x630>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x3e6>
 80031e0:	4b94      	ldr	r3, [pc, #592]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80031e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e4:	4b93      	ldr	r3, [pc, #588]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	430a      	orrs	r2, r1
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ec:	e01c      	b.n	8003228 <HAL_RCC_OscConfig+0x420>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x408>
 80031f6:	4b8f      	ldr	r3, [pc, #572]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80031f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031fa:	4b8e      	ldr	r3, [pc, #568]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80031fc:	2104      	movs	r1, #4
 80031fe:	430a      	orrs	r2, r1
 8003200:	65da      	str	r2, [r3, #92]	; 0x5c
 8003202:	4b8c      	ldr	r3, [pc, #560]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003208:	2101      	movs	r1, #1
 800320a:	430a      	orrs	r2, r1
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x420>
 8003210:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003214:	4b87      	ldr	r3, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003216:	2101      	movs	r1, #1
 8003218:	438a      	bics	r2, r1
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800321e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003222:	2104      	movs	r1, #4
 8003224:	438a      	bics	r2, r1
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd fc8e 	bl	8000b50 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003238:	e009      	b.n	800324e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fc89 	bl	8000b50 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	4a7d      	ldr	r2, [pc, #500]	; (800343c <HAL_RCC_OscConfig+0x634>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e136      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b79      	ldr	r3, [pc, #484]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x432>
 8003258:	e013      	b.n	8003282 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fd fc79 	bl	8000b50 <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003262:	e009      	b.n	8003278 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fd fc74 	bl	8000b50 <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x634>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e121      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003278:	4b6e      	ldr	r3, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2202      	movs	r2, #2
 800327e:	4013      	ands	r3, r2
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003282:	231f      	movs	r3, #31
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800328e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003290:	4b68      	ldr	r3, [pc, #416]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003292:	496b      	ldr	r1, [pc, #428]	; (8003440 <HAL_RCC_OscConfig+0x638>)
 8003294:	400a      	ands	r2, r1
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	4013      	ands	r3, r2
 80032a0:	d039      	beq.n	8003316 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	03c9      	lsls	r1, r1, #15
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fd fc4a 	bl	8000b50 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fd fc45 	bl	8000b50 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0f3      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	4013      	ands	r3, r2
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4ba>
 80032e0:	e019      	b.n	8003316 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032e2:	4b54      	ldr	r3, [pc, #336]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80032e8:	4956      	ldr	r1, [pc, #344]	; (8003444 <HAL_RCC_OscConfig+0x63c>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fd fc2f 	bl	8000b50 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f8:	f7fd fc2a 	bl	8000b50 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0d8      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	4013      	ands	r3, r2
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d100      	bne.n	8003320 <HAL_RCC_OscConfig+0x518>
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003320:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2238      	movs	r2, #56	; 0x38
 8003326:	4013      	ands	r3, r2
 8003328:	2b10      	cmp	r3, #16
 800332a:	d100      	bne.n	800332e <HAL_RCC_OscConfig+0x526>
 800332c:	e07b      	b.n	8003426 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d156      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800333c:	4942      	ldr	r1, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x640>)
 800333e:	400a      	ands	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd fc05 	bl	8000b50 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fc00 	bl	8000b50 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0ae      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	049b      	lsls	r3, r3, #18
 8003366:	4013      	ands	r3, r2
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336a:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a37      	ldr	r2, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x644>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	431a      	orrs	r2, r3
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800339a:	430a      	orrs	r2, r1
 800339c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339e:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0449      	lsls	r1, r1, #17
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0549      	lsls	r1, r1, #21
 80033b6:	430a      	orrs	r2, r1
 80033b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fd fbc9 	bl	8000b50 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fd fbc4 	bl	8000b50 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e072      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	049b      	lsls	r3, r3, #18
 80033de:	4013      	ands	r3, r2
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x5bc>
 80033e2:	e06a      	b.n	80034ba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 80033ea:	4917      	ldr	r1, [pc, #92]	; (8003448 <HAL_RCC_OscConfig+0x640>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fd fbae 	bl	8000b50 <HAL_GetTick>
 80033f4:	0003      	movs	r3, r0
 80033f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fd fba9 	bl	8000b50 <HAL_GetTick>
 80033fe:	0002      	movs	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e057      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	049b      	lsls	r3, r3, #18
 8003414:	4013      	ands	r3, r2
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_OscConfig+0x62c>)
 800341e:	490c      	ldr	r1, [pc, #48]	; (8003450 <HAL_RCC_OscConfig+0x648>)
 8003420:	400a      	ands	r2, r1
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e049      	b.n	80034ba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e044      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	00001388 	.word	0x00001388
 8003440:	efffffff 	.word	0xefffffff
 8003444:	ffbfffff 	.word	0xffbfffff
 8003448:	feffffff 	.word	0xfeffffff
 800344c:	11c1808c 	.word	0x11c1808c
 8003450:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCC_OscConfig+0x6bc>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2203      	movs	r2, #3
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	429a      	cmp	r2, r3
 8003466:	d126      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2270      	movs	r2, #112	; 0x70
 800346c:	401a      	ands	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d11f      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	23fe      	movs	r3, #254	; 0xfe
 800347a:	01db      	lsls	r3, r3, #7
 800347c:	401a      	ands	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d116      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	23f8      	movs	r3, #248	; 0xf8
 800348c:	039b      	lsls	r3, r3, #14
 800348e:	401a      	ands	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d10e      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	23e0      	movs	r3, #224	; 0xe0
 800349c:	051b      	lsls	r3, r3, #20
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	0f5b      	lsrs	r3, r3, #29
 80034ac:	075a      	lsls	r2, r3, #29
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b008      	add	sp, #32
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0e9      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d91e      	bls.n	8003528 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b73      	ldr	r3, [pc, #460]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2207      	movs	r2, #7
 80034f0:	4393      	bics	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034fc:	f7fd fb28 	bl	8000b50 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003504:	e009      	b.n	800351a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003506:	f7fd fb23 	bl	8000b50 <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <HAL_RCC_ClockConfig+0x1f4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0ca      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800351a:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2207      	movs	r2, #7
 8003520:	4013      	ands	r3, r2
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d1ee      	bne.n	8003506 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	d015      	beq.n	800355e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2204      	movs	r2, #4
 8003538:	4013      	ands	r3, r2
 800353a:	d006      	beq.n	800354a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800353c:	4b60      	ldr	r3, [pc, #384]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 8003542:	21e0      	movs	r1, #224	; 0xe0
 8003544:	01c9      	lsls	r1, r1, #7
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354a:	4b5d      	ldr	r3, [pc, #372]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a5d      	ldr	r2, [pc, #372]	; (80036c4 <HAL_RCC_ClockConfig+0x1fc>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d057      	beq.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	4013      	ands	r3, r2
 800357a:	d12b      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e097      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d107      	bne.n	8003598 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	049b      	lsls	r3, r3, #18
 8003590:	4013      	ands	r3, r2
 8003592:	d11f      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e08b      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a0:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	d113      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e07f      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e074      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e06d      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2207      	movs	r2, #7
 80035da:	4393      	bics	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fd fab2 	bl	8000b50 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f0:	e009      	b.n	8003606 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7fd faad 	bl	8000b50 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <HAL_RCC_ClockConfig+0x1f4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e054      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2238      	movs	r2, #56	; 0x38
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	429a      	cmp	r2, r3
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2207      	movs	r2, #7
 800361e:	4013      	ands	r3, r2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d21e      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2207      	movs	r2, #7
 800362c:	4393      	bics	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003638:	f7fd fa8a 	bl	8000b50 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003640:	e009      	b.n	8003656 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003642:	f7fd fa85 	bl	8000b50 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_RCC_ClockConfig+0x1f4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e02c      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2207      	movs	r2, #7
 800365c:	4013      	ands	r3, r2
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d1ee      	bne.n	8003642 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2204      	movs	r2, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_RCC_ClockConfig+0x200>)
 8003674:	4013      	ands	r3, r2
 8003676:	0019      	movs	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003682:	f000 f829 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003686:	0001      	movs	r1, r0
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	220f      	movs	r2, #15
 8003690:	401a      	ands	r2, r3
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x204>)
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	58d3      	ldr	r3, [r2, r3]
 8003698:	221f      	movs	r2, #31
 800369a:	4013      	ands	r3, r2
 800369c:	000a      	movs	r2, r1
 800369e:	40da      	lsrs	r2, r3
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x208>)
 80036a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x20c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fd f9f5 	bl	8000a98 <HAL_InitTick>
 80036ae:	0003      	movs	r3, r0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b004      	add	sp, #16
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40022000 	.word	0x40022000
 80036bc:	00001388 	.word	0x00001388
 80036c0:	40021000 	.word	0x40021000
 80036c4:	fffff0ff 	.word	0xfffff0ff
 80036c8:	ffff8fff 	.word	0xffff8fff
 80036cc:	08009654 	.word	0x08009654
 80036d0:	20000004 	.word	0x20000004
 80036d4:	20000008 	.word	0x20000008

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b3c      	ldr	r3, [pc, #240]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2238      	movs	r2, #56	; 0x38
 80036e4:	4013      	ands	r3, r2
 80036e6:	d10f      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036e8:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0adb      	lsrs	r3, r3, #11
 80036ee:	2207      	movs	r2, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	2201      	movs	r2, #1
 80036f4:	409a      	lsls	r2, r3
 80036f6:	0013      	movs	r3, r2
 80036f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	4835      	ldr	r0, [pc, #212]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036fe:	f7fc fd01 	bl	8000104 <__udivsi3>
 8003702:	0003      	movs	r3, r0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e05d      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003708:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2238      	movs	r2, #56	; 0x38
 800370e:	4013      	ands	r3, r2
 8003710:	2b08      	cmp	r3, #8
 8003712:	d102      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003714:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	e054      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2238      	movs	r2, #56	; 0x38
 8003720:	4013      	ands	r3, r2
 8003722:	2b10      	cmp	r3, #16
 8003724:	d138      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003726:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2203      	movs	r2, #3
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	2207      	movs	r2, #7
 8003738:	4013      	ands	r3, r2
 800373a:	3301      	adds	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	4824      	ldr	r0, [pc, #144]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003748:	f7fc fcdc 	bl	8000104 <__udivsi3>
 800374c:	0003      	movs	r3, r0
 800374e:	0019      	movs	r1, r3
 8003750:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	227f      	movs	r2, #127	; 0x7f
 8003758:	4013      	ands	r3, r2
 800375a:	434b      	muls	r3, r1
 800375c:	617b      	str	r3, [r7, #20]
        break;
 800375e:	e00d      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	481c      	ldr	r0, [pc, #112]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003764:	f7fc fcce 	bl	8000104 <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	0019      	movs	r1, r3
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	227f      	movs	r2, #127	; 0x7f
 8003774:	4013      	ands	r3, r2
 8003776:	434b      	muls	r3, r1
 8003778:	617b      	str	r3, [r7, #20]
        break;
 800377a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0f5b      	lsrs	r3, r3, #29
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6978      	ldr	r0, [r7, #20]
 800378e:	f7fc fcb9 	bl	8000104 <__udivsi3>
 8003792:	0003      	movs	r3, r0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e015      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2238      	movs	r2, #56	; 0x38
 800379e:	4013      	ands	r3, r2
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d103      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2238      	movs	r2, #56	; 0x38
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b18      	cmp	r3, #24
 80037b6:	d103      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037b8:	23fa      	movs	r3, #250	; 0xfa
 80037ba:	01db      	lsls	r3, r3, #7
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e001      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b02      	ldr	r3, [pc, #8]	; (80037ec <HAL_RCC_GetHCLKFreq+0x10>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037f4:	f7ff fff2 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037f8:	0004      	movs	r4, r0
 80037fa:	f7ff faf9 	bl	8002df0 <LL_RCC_GetAPB1Prescaler>
 80037fe:	0003      	movs	r3, r0
 8003800:	0b1a      	lsrs	r2, r3, #12
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	58d3      	ldr	r3, [r2, r3]
 8003808:	221f      	movs	r2, #31
 800380a:	4013      	ands	r3, r2
 800380c:	40dc      	lsrs	r4, r3
 800380e:	0023      	movs	r3, r4
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	08009694 	.word	0x08009694

0800381c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003824:	2313      	movs	r3, #19
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800382c:	2312      	movs	r3, #18
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003840:	e0ad      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2011      	movs	r0, #17
 8003844:	183b      	adds	r3, r7, r0
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800384c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	055b      	lsls	r3, r3, #21
 8003852:	4013      	ands	r3, r2
 8003854:	d110      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b44      	ldr	r3, [pc, #272]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385a:	4b43      	ldr	r3, [pc, #268]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	0549      	lsls	r1, r1, #21
 8003860:	430a      	orrs	r2, r1
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	055b      	lsls	r3, r3, #21
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003872:	183b      	adds	r3, r7, r0
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	0049      	lsls	r1, r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003886:	f7fd f963 	bl	8000b50 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800388e:	e00b      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003890:	f7fd f95e 	bl	8000b50 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d904      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800389e:	2313      	movs	r3, #19
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2203      	movs	r2, #3
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	e005      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a8:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d0ed      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80038b4:	2313      	movs	r3, #19
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d15e      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038c2:	23c0      	movs	r3, #192	; 0xc0
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d019      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d014      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0249      	lsls	r1, r1, #9
 80038ee:	430a      	orrs	r2, r1
 80038f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80038f8:	491e      	ldr	r1, [pc, #120]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2201      	movs	r2, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d016      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd f920 	bl	8000b50 <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003914:	e00c      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fd f91b 	bl	8000b50 <HAL_GetTick>
 800391a:	0002      	movs	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d904      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003926:	2313      	movs	r3, #19
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
            break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	2202      	movs	r2, #2
 8003936:	4013      	ands	r3, r2
 8003938:	d0ed      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800393a:	2313      	movs	r3, #19
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003954:	430a      	orrs	r2, r1
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c
 8003958:	e016      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800395a:	2312      	movs	r3, #18
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2213      	movs	r2, #19
 8003960:	18ba      	adds	r2, r7, r2
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e00f      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	fffffcff 	.word	0xfffffcff
 8003974:	fffeffff 	.word	0xfffeffff
 8003978:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	2312      	movs	r3, #18
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2213      	movs	r2, #19
 8003982:	18ba      	adds	r2, r7, r2
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003988:	2311      	movs	r3, #17
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003992:	4bb6      	ldr	r3, [pc, #728]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	4bb5      	ldr	r3, [pc, #724]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003998:	49b5      	ldr	r1, [pc, #724]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800399a:	400a      	ands	r2, r1
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a8:	4bb0      	ldr	r3, [pc, #704]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2203      	movs	r2, #3
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4bad      	ldr	r3, [pc, #692]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d009      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c6:	4ba9      	ldr	r3, [pc, #676]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ca:	220c      	movs	r2, #12
 80039cc:	4393      	bics	r3, r2
 80039ce:	0019      	movs	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039d6:	430a      	orrs	r2, r1
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2204      	movs	r2, #4
 80039e0:	4013      	ands	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e4:	4ba1      	ldr	r3, [pc, #644]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	2230      	movs	r2, #48	; 0x30
 80039ea:	4393      	bics	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	4b9e      	ldr	r3, [pc, #632]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039f4:	430a      	orrs	r2, r1
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2210      	movs	r2, #16
 80039fe:	4013      	ands	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a02:	4b9a      	ldr	r3, [pc, #616]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	4a9b      	ldr	r2, [pc, #620]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	4b96      	ldr	r3, [pc, #600]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a12:	430a      	orrs	r2, r1
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	015b      	lsls	r3, r3, #5
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	4a94      	ldr	r2, [pc, #592]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	4b8e      	ldr	r3, [pc, #568]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a32:	430a      	orrs	r2, r1
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a42:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	4a8d      	ldr	r2, [pc, #564]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a50:	4b86      	ldr	r3, [pc, #536]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a52:	430a      	orrs	r2, r1
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	4a86      	ldr	r2, [pc, #536]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a80:	4b7a      	ldr	r3, [pc, #488]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	4a7f      	ldr	r2, [pc, #508]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a90:	430a      	orrs	r2, r1
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2240      	movs	r2, #64	; 0x40
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9e:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	4a79      	ldr	r2, [pc, #484]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	01db      	lsls	r3, r3, #7
 8003aba:	4013      	ands	r3, r2
 8003abc:	d015      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003abe:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	0899      	lsrs	r1, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aca:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003acc:	430a      	orrs	r2, r1
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	05db      	lsls	r3, r3, #23
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d106      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003adc:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0249      	lsls	r1, r1, #9
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	4013      	ands	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003af6:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	4393      	bics	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b06:	430a      	orrs	r2, r1
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	039b      	lsls	r3, r3, #14
 8003b12:	4013      	ands	r3, r2
 8003b14:	d016      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b16:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b24:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	03db      	lsls	r3, r3, #15
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d106      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b36:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0449      	lsls	r1, r1, #17
 8003b40:	430a      	orrs	r2, r1
 8003b42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	03db      	lsls	r3, r3, #15
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d016      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	4a4e      	ldr	r2, [pc, #312]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	045b      	lsls	r3, r3, #17
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0449      	lsls	r1, r1, #17
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4013      	ands	r3, r2
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b8a:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ba6:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	0249      	lsls	r1, r1, #9
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	019b      	lsls	r3, r3, #6
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d014      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d106      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	0249      	lsls	r1, r1, #9
 8003be6:	430a      	orrs	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	045b      	lsls	r3, r3, #17
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	0449      	lsls	r1, r1, #17
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	049b      	lsls	r3, r3, #18
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d016      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c40:	430a      	orrs	r2, r1
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	0449      	lsls	r1, r1, #17
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c5e:	2312      	movs	r3, #18
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	781b      	ldrb	r3, [r3, #0]
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	efffffff 	.word	0xefffffff
 8003c74:	fffff3ff 	.word	0xfffff3ff
 8003c78:	fffffcff 	.word	0xfffffcff
 8003c7c:	fff3ffff 	.word	0xfff3ffff
 8003c80:	ffcfffff 	.word	0xffcfffff
 8003c84:	ffffcfff 	.word	0xffffcfff
 8003c88:	ffff3fff 	.word	0xffff3fff
 8003c8c:	ffbfffff 	.word	0xffbfffff
 8003c90:	feffffff 	.word	0xfeffffff

08003c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e046      	b.n	8003d34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2288      	movs	r2, #136	; 0x88
 8003caa:	589b      	ldr	r3, [r3, r2]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2284      	movs	r2, #132	; 0x84
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fc fe18 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2288      	movs	r2, #136	; 0x88
 8003cc4:	2124      	movs	r1, #36	; 0x24
 8003cc6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 f830 	bl	8003d40 <UART_SetConfig>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e024      	b.n	8003d34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fb79 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	490d      	ldr	r1, [pc, #52]	; (8003d3c <HAL_UART_Init+0xa8>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	212a      	movs	r1, #42	; 0x2a
 8003d16:	438a      	bics	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fc11 	bl	8004554 <UART_CheckIdleState>
 8003d32:	0003      	movs	r3, r0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	ffffb7ff 	.word	0xffffb7ff

08003d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	b5b0      	push	{r4, r5, r7, lr}
 8003d42:	b090      	sub	sp, #64	; 0x40
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d48:	231a      	movs	r3, #26
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	19db      	adds	r3, r3, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4ac1      	ldr	r2, [pc, #772]	; (8004078 <UART_SetConfig+0x338>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4abc      	ldr	r2, [pc, #752]	; (800407c <UART_SetConfig+0x33c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	68d9      	ldr	r1, [r3, #12]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	0003      	movs	r3, r0
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4ab6      	ldr	r2, [pc, #728]	; (8004080 <UART_SetConfig+0x340>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <UART_SetConfig+0x80>
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4ab4      	ldr	r2, [pc, #720]	; (8004084 <UART_SetConfig+0x344>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4ab0      	ldr	r2, [pc, #704]	; (8004088 <UART_SetConfig+0x348>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	220f      	movs	r2, #15
 8003dde:	4393      	bics	r3, r2
 8003de0:	0018      	movs	r0, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	0003      	movs	r3, r0
 8003dec:	430b      	orrs	r3, r1
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4aa5      	ldr	r2, [pc, #660]	; (800408c <UART_SetConfig+0x34c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d131      	bne.n	8003e5e <UART_SetConfig+0x11e>
 8003dfa:	4ba5      	ldr	r3, [pc, #660]	; (8004090 <UART_SetConfig+0x350>)
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d01d      	beq.n	8003e42 <UART_SetConfig+0x102>
 8003e06:	d823      	bhi.n	8003e50 <UART_SetConfig+0x110>
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d00c      	beq.n	8003e26 <UART_SetConfig+0xe6>
 8003e0c:	d820      	bhi.n	8003e50 <UART_SetConfig+0x110>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <UART_SetConfig+0xd8>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d00e      	beq.n	8003e34 <UART_SetConfig+0xf4>
 8003e16:	e01b      	b.n	8003e50 <UART_SetConfig+0x110>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e154      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e26:	231b      	movs	r3, #27
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e14d      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e34:	231b      	movs	r3, #27
 8003e36:	2220      	movs	r2, #32
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e146      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e42:	231b      	movs	r3, #27
 8003e44:	2220      	movs	r2, #32
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	19db      	adds	r3, r3, r7
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e13f      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e50:	231b      	movs	r3, #27
 8003e52:	2220      	movs	r2, #32
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	2210      	movs	r2, #16
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e138      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a8c      	ldr	r2, [pc, #560]	; (8004094 <UART_SetConfig+0x354>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d131      	bne.n	8003ecc <UART_SetConfig+0x18c>
 8003e68:	4b89      	ldr	r3, [pc, #548]	; (8004090 <UART_SetConfig+0x350>)
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d01d      	beq.n	8003eb0 <UART_SetConfig+0x170>
 8003e74:	d823      	bhi.n	8003ebe <UART_SetConfig+0x17e>
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d00c      	beq.n	8003e94 <UART_SetConfig+0x154>
 8003e7a:	d820      	bhi.n	8003ebe <UART_SetConfig+0x17e>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <UART_SetConfig+0x146>
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d00e      	beq.n	8003ea2 <UART_SetConfig+0x162>
 8003e84:	e01b      	b.n	8003ebe <UART_SetConfig+0x17e>
 8003e86:	231b      	movs	r3, #27
 8003e88:	2220      	movs	r2, #32
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	19db      	adds	r3, r3, r7
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e11d      	b.n	80040d0 <UART_SetConfig+0x390>
 8003e94:	231b      	movs	r3, #27
 8003e96:	2220      	movs	r2, #32
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e116      	b.n	80040d0 <UART_SetConfig+0x390>
 8003ea2:	231b      	movs	r3, #27
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	19db      	adds	r3, r3, r7
 8003eaa:	2204      	movs	r2, #4
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e10f      	b.n	80040d0 <UART_SetConfig+0x390>
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	2208      	movs	r2, #8
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e108      	b.n	80040d0 <UART_SetConfig+0x390>
 8003ebe:	231b      	movs	r3, #27
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e101      	b.n	80040d0 <UART_SetConfig+0x390>
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a71      	ldr	r2, [pc, #452]	; (8004098 <UART_SetConfig+0x358>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d131      	bne.n	8003f3a <UART_SetConfig+0x1fa>
 8003ed6:	4b6e      	ldr	r3, [pc, #440]	; (8004090 <UART_SetConfig+0x350>)
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	2230      	movs	r2, #48	; 0x30
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d01d      	beq.n	8003f1e <UART_SetConfig+0x1de>
 8003ee2:	d823      	bhi.n	8003f2c <UART_SetConfig+0x1ec>
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d00c      	beq.n	8003f02 <UART_SetConfig+0x1c2>
 8003ee8:	d820      	bhi.n	8003f2c <UART_SetConfig+0x1ec>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <UART_SetConfig+0x1b4>
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d00e      	beq.n	8003f10 <UART_SetConfig+0x1d0>
 8003ef2:	e01b      	b.n	8003f2c <UART_SetConfig+0x1ec>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e0e6      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f02:	231b      	movs	r3, #27
 8003f04:	2220      	movs	r2, #32
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e0df      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f10:	231b      	movs	r3, #27
 8003f12:	2220      	movs	r2, #32
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	2204      	movs	r2, #4
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	e0d8      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f1e:	231b      	movs	r3, #27
 8003f20:	2220      	movs	r2, #32
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e0d1      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	2220      	movs	r2, #32
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2210      	movs	r2, #16
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e0ca      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a57      	ldr	r2, [pc, #348]	; (800409c <UART_SetConfig+0x35c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d106      	bne.n	8003f52 <UART_SetConfig+0x212>
 8003f44:	231b      	movs	r3, #27
 8003f46:	2220      	movs	r2, #32
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	19db      	adds	r3, r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e0be      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a52      	ldr	r2, [pc, #328]	; (80040a0 <UART_SetConfig+0x360>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d106      	bne.n	8003f6a <UART_SetConfig+0x22a>
 8003f5c:	231b      	movs	r3, #27
 8003f5e:	2220      	movs	r2, #32
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e0b2      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4d      	ldr	r2, [pc, #308]	; (80040a4 <UART_SetConfig+0x364>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d106      	bne.n	8003f82 <UART_SetConfig+0x242>
 8003f74:	231b      	movs	r3, #27
 8003f76:	2220      	movs	r2, #32
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e0a6      	b.n	80040d0 <UART_SetConfig+0x390>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3e      	ldr	r2, [pc, #248]	; (8004080 <UART_SetConfig+0x340>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d13e      	bne.n	800400a <UART_SetConfig+0x2ca>
 8003f8c:	4b40      	ldr	r3, [pc, #256]	; (8004090 <UART_SetConfig+0x350>)
 8003f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f90:	23c0      	movs	r3, #192	; 0xc0
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	22c0      	movs	r2, #192	; 0xc0
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <UART_SetConfig+0x2ae>
 8003f9e:	22c0      	movs	r2, #192	; 0xc0
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d82a      	bhi.n	8003ffc <UART_SetConfig+0x2bc>
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	0112      	lsls	r2, r2, #4
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x292>
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d822      	bhi.n	8003ffc <UART_SetConfig+0x2bc>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <UART_SetConfig+0x284>
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	00d2      	lsls	r2, r2, #3
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <UART_SetConfig+0x2a0>
 8003fc2:	e01b      	b.n	8003ffc <UART_SetConfig+0x2bc>
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	19db      	adds	r3, r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e07e      	b.n	80040d0 <UART_SetConfig+0x390>
 8003fd2:	231b      	movs	r3, #27
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	19db      	adds	r3, r3, r7
 8003fda:	2202      	movs	r2, #2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e077      	b.n	80040d0 <UART_SetConfig+0x390>
 8003fe0:	231b      	movs	r3, #27
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	189b      	adds	r3, r3, r2
 8003fe6:	19db      	adds	r3, r3, r7
 8003fe8:	2204      	movs	r2, #4
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e070      	b.n	80040d0 <UART_SetConfig+0x390>
 8003fee:	231b      	movs	r3, #27
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	19db      	adds	r3, r3, r7
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e069      	b.n	80040d0 <UART_SetConfig+0x390>
 8003ffc:	231b      	movs	r3, #27
 8003ffe:	2220      	movs	r2, #32
 8004000:	189b      	adds	r3, r3, r2
 8004002:	19db      	adds	r3, r3, r7
 8004004:	2210      	movs	r2, #16
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e062      	b.n	80040d0 <UART_SetConfig+0x390>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <UART_SetConfig+0x344>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d157      	bne.n	80040c4 <UART_SetConfig+0x384>
 8004014:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <UART_SetConfig+0x350>)
 8004016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004018:	23c0      	movs	r3, #192	; 0xc0
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4013      	ands	r3, r2
 800401e:	22c0      	movs	r2, #192	; 0xc0
 8004020:	0092      	lsls	r2, r2, #2
 8004022:	4293      	cmp	r3, r2
 8004024:	d040      	beq.n	80040a8 <UART_SetConfig+0x368>
 8004026:	22c0      	movs	r2, #192	; 0xc0
 8004028:	0092      	lsls	r2, r2, #2
 800402a:	4293      	cmp	r3, r2
 800402c:	d843      	bhi.n	80040b6 <UART_SetConfig+0x376>
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4293      	cmp	r3, r2
 8004034:	d011      	beq.n	800405a <UART_SetConfig+0x31a>
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4293      	cmp	r3, r2
 800403c:	d83b      	bhi.n	80040b6 <UART_SetConfig+0x376>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <UART_SetConfig+0x30c>
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	0052      	lsls	r2, r2, #1
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <UART_SetConfig+0x328>
 800404a:	e034      	b.n	80040b6 <UART_SetConfig+0x376>
 800404c:	231b      	movs	r3, #27
 800404e:	2220      	movs	r2, #32
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e03a      	b.n	80040d0 <UART_SetConfig+0x390>
 800405a:	231b      	movs	r3, #27
 800405c:	2220      	movs	r2, #32
 800405e:	189b      	adds	r3, r3, r2
 8004060:	19db      	adds	r3, r3, r7
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e033      	b.n	80040d0 <UART_SetConfig+0x390>
 8004068:	231b      	movs	r3, #27
 800406a:	2220      	movs	r2, #32
 800406c:	189b      	adds	r3, r3, r2
 800406e:	19db      	adds	r3, r3, r7
 8004070:	2204      	movs	r2, #4
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e02c      	b.n	80040d0 <UART_SetConfig+0x390>
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	cfff69f3 	.word	0xcfff69f3
 800407c:	ffffcfff 	.word	0xffffcfff
 8004080:	40008000 	.word	0x40008000
 8004084:	40008400 	.word	0x40008400
 8004088:	11fff4ff 	.word	0x11fff4ff
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	40004c00 	.word	0x40004c00
 80040a0:	40005000 	.word	0x40005000
 80040a4:	40013c00 	.word	0x40013c00
 80040a8:	231b      	movs	r3, #27
 80040aa:	2220      	movs	r2, #32
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	2208      	movs	r2, #8
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e00c      	b.n	80040d0 <UART_SetConfig+0x390>
 80040b6:	231b      	movs	r3, #27
 80040b8:	2220      	movs	r2, #32
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	19db      	adds	r3, r3, r7
 80040be:	2210      	movs	r2, #16
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e005      	b.n	80040d0 <UART_SetConfig+0x390>
 80040c4:	231b      	movs	r3, #27
 80040c6:	2220      	movs	r2, #32
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	2210      	movs	r2, #16
 80040ce:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4ac1      	ldr	r2, [pc, #772]	; (80043dc <UART_SetConfig+0x69c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d005      	beq.n	80040e6 <UART_SetConfig+0x3a6>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4ac0      	ldr	r2, [pc, #768]	; (80043e0 <UART_SetConfig+0x6a0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d000      	beq.n	80040e6 <UART_SetConfig+0x3a6>
 80040e4:	e093      	b.n	800420e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040e6:	231b      	movs	r3, #27
 80040e8:	2220      	movs	r2, #32
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d015      	beq.n	8004120 <UART_SetConfig+0x3e0>
 80040f4:	dc18      	bgt.n	8004128 <UART_SetConfig+0x3e8>
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00d      	beq.n	8004116 <UART_SetConfig+0x3d6>
 80040fa:	dc15      	bgt.n	8004128 <UART_SetConfig+0x3e8>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <UART_SetConfig+0x3c6>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d005      	beq.n	8004110 <UART_SetConfig+0x3d0>
 8004104:	e010      	b.n	8004128 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004106:	f7ff fb73 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 800410a:	0003      	movs	r3, r0
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800410e:	e014      	b.n	800413a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004110:	4bb4      	ldr	r3, [pc, #720]	; (80043e4 <UART_SetConfig+0x6a4>)
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004114:	e011      	b.n	800413a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004116:	f7ff fadf 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 800411a:	0003      	movs	r3, r0
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800411e:	e00c      	b.n	800413a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004126:	e008      	b.n	800413a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800412c:	231a      	movs	r3, #26
 800412e:	2220      	movs	r2, #32
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
        break;
 8004138:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413c:	2b00      	cmp	r3, #0
 800413e:	d100      	bne.n	8004142 <UART_SetConfig+0x402>
 8004140:	e135      	b.n	80043ae <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004146:	4ba8      	ldr	r3, [pc, #672]	; (80043e8 <UART_SetConfig+0x6a8>)
 8004148:	0052      	lsls	r2, r2, #1
 800414a:	5ad3      	ldrh	r3, [r2, r3]
 800414c:	0019      	movs	r1, r3
 800414e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004150:	f7fb ffd8 	bl	8000104 <__udivsi3>
 8004154:	0003      	movs	r3, r0
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	0013      	movs	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	189b      	adds	r3, r3, r2
 8004162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004164:	429a      	cmp	r2, r3
 8004166:	d305      	bcc.n	8004174 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800416e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004170:	429a      	cmp	r2, r3
 8004172:	d906      	bls.n	8004182 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004174:	231a      	movs	r3, #26
 8004176:	2220      	movs	r2, #32
 8004178:	189b      	adds	r3, r3, r2
 800417a:	19db      	adds	r3, r3, r7
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e044      	b.n	800420c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418e:	4b96      	ldr	r3, [pc, #600]	; (80043e8 <UART_SetConfig+0x6a8>)
 8004190:	0052      	lsls	r2, r2, #1
 8004192:	5ad3      	ldrh	r3, [r2, r3]
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	69b8      	ldr	r0, [r7, #24]
 80041a0:	69f9      	ldr	r1, [r7, #28]
 80041a2:	f7fc f925 	bl	80003f0 <__aeabi_uldivmod>
 80041a6:	0002      	movs	r2, r0
 80041a8:	000b      	movs	r3, r1
 80041aa:	0e11      	lsrs	r1, r2, #24
 80041ac:	021d      	lsls	r5, r3, #8
 80041ae:	430d      	orrs	r5, r1
 80041b0:	0214      	lsls	r4, r2, #8
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68b8      	ldr	r0, [r7, #8]
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	1900      	adds	r0, r0, r4
 80041c4:	4169      	adcs	r1, r5
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f7fc f90c 	bl	80003f0 <__aeabi_uldivmod>
 80041d8:	0002      	movs	r2, r0
 80041da:	000b      	movs	r3, r1
 80041dc:	0013      	movs	r3, r2
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e2:	23c0      	movs	r3, #192	; 0xc0
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d309      	bcc.n	80041fe <UART_SetConfig+0x4be>
 80041ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	035b      	lsls	r3, r3, #13
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d204      	bcs.n	80041fe <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	e006      	b.n	800420c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80041fe:	231a      	movs	r3, #26
 8004200:	2220      	movs	r2, #32
 8004202:	189b      	adds	r3, r3, r2
 8004204:	19db      	adds	r3, r3, r7
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800420a:	e0d0      	b.n	80043ae <UART_SetConfig+0x66e>
 800420c:	e0cf      	b.n	80043ae <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	429a      	cmp	r2, r3
 8004218:	d000      	beq.n	800421c <UART_SetConfig+0x4dc>
 800421a:	e070      	b.n	80042fe <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800421c:	231b      	movs	r3, #27
 800421e:	2220      	movs	r2, #32
 8004220:	189b      	adds	r3, r3, r2
 8004222:	19db      	adds	r3, r3, r7
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d015      	beq.n	8004256 <UART_SetConfig+0x516>
 800422a:	dc18      	bgt.n	800425e <UART_SetConfig+0x51e>
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00d      	beq.n	800424c <UART_SetConfig+0x50c>
 8004230:	dc15      	bgt.n	800425e <UART_SetConfig+0x51e>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x4fc>
 8004236:	2b02      	cmp	r3, #2
 8004238:	d005      	beq.n	8004246 <UART_SetConfig+0x506>
 800423a:	e010      	b.n	800425e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7ff fad8 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8004240:	0003      	movs	r3, r0
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004244:	e014      	b.n	8004270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004246:	4b67      	ldr	r3, [pc, #412]	; (80043e4 <UART_SetConfig+0x6a4>)
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424a:	e011      	b.n	8004270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424c:	f7ff fa44 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8004250:	0003      	movs	r3, r0
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004254:	e00c      	b.n	8004270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800425c:	e008      	b.n	8004270 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004262:	231a      	movs	r3, #26
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
        break;
 800426e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d100      	bne.n	8004278 <UART_SetConfig+0x538>
 8004276:	e09a      	b.n	80043ae <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <UART_SetConfig+0x6a8>)
 800427e:	0052      	lsls	r2, r2, #1
 8004280:	5ad3      	ldrh	r3, [r2, r3]
 8004282:	0019      	movs	r1, r3
 8004284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004286:	f7fb ff3d 	bl	8000104 <__udivsi3>
 800428a:	0003      	movs	r3, r0
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	18d2      	adds	r2, r2, r3
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0019      	movs	r1, r3
 800429c:	0010      	movs	r0, r2
 800429e:	f7fb ff31 	bl	8000104 <__udivsi3>
 80042a2:	0003      	movs	r3, r0
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d921      	bls.n	80042f0 <UART_SetConfig+0x5b0>
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d21c      	bcs.n	80042f0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	200e      	movs	r0, #14
 80042bc:	2420      	movs	r4, #32
 80042be:	1903      	adds	r3, r0, r4
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	210f      	movs	r1, #15
 80042c4:	438a      	bics	r2, r1
 80042c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2207      	movs	r2, #7
 80042d0:	4013      	ands	r3, r2
 80042d2:	b299      	uxth	r1, r3
 80042d4:	1903      	adds	r3, r0, r4
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	1902      	adds	r2, r0, r4
 80042da:	19d2      	adds	r2, r2, r7
 80042dc:	8812      	ldrh	r2, [r2, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1902      	adds	r2, r0, r4
 80042e8:	19d2      	adds	r2, r2, r7
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e05e      	b.n	80043ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	231a      	movs	r3, #26
 80042f2:	2220      	movs	r2, #32
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	19db      	adds	r3, r3, r7
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e057      	b.n	80043ae <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042fe:	231b      	movs	r3, #27
 8004300:	2220      	movs	r2, #32
 8004302:	189b      	adds	r3, r3, r2
 8004304:	19db      	adds	r3, r3, r7
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d015      	beq.n	8004338 <UART_SetConfig+0x5f8>
 800430c:	dc18      	bgt.n	8004340 <UART_SetConfig+0x600>
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00d      	beq.n	800432e <UART_SetConfig+0x5ee>
 8004312:	dc15      	bgt.n	8004340 <UART_SetConfig+0x600>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x5de>
 8004318:	2b02      	cmp	r3, #2
 800431a:	d005      	beq.n	8004328 <UART_SetConfig+0x5e8>
 800431c:	e010      	b.n	8004340 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff fa67 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8004322:	0003      	movs	r3, r0
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004326:	e014      	b.n	8004352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <UART_SetConfig+0x6a4>)
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800432c:	e011      	b.n	8004352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7ff f9d3 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8004332:	0003      	movs	r3, r0
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004336:	e00c      	b.n	8004352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800433e:	e008      	b.n	8004352 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004344:	231a      	movs	r3, #26
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
        break;
 8004350:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02a      	beq.n	80043ae <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <UART_SetConfig+0x6a8>)
 800435e:	0052      	lsls	r2, r2, #1
 8004360:	5ad3      	ldrh	r3, [r2, r3]
 8004362:	0019      	movs	r1, r3
 8004364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004366:	f7fb fecd 	bl	8000104 <__udivsi3>
 800436a:	0003      	movs	r3, r0
 800436c:	001a      	movs	r2, r3
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	18d2      	adds	r2, r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	0019      	movs	r1, r3
 800437c:	0010      	movs	r0, r2
 800437e:	f7fb fec1 	bl	8000104 <__udivsi3>
 8004382:	0003      	movs	r3, r0
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d90a      	bls.n	80043a2 <UART_SetConfig+0x662>
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	429a      	cmp	r2, r3
 8004394:	d205      	bcs.n	80043a2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	b29a      	uxth	r2, r3
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80043a2:	231a      	movs	r3, #26
 80043a4:	2220      	movs	r2, #32
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	226a      	movs	r2, #106	; 0x6a
 80043b2:	2101      	movs	r1, #1
 80043b4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	2268      	movs	r2, #104	; 0x68
 80043ba:	2101      	movs	r1, #1
 80043bc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	2200      	movs	r2, #0
 80043c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	2200      	movs	r2, #0
 80043c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80043ca:	231a      	movs	r3, #26
 80043cc:	2220      	movs	r2, #32
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	781b      	ldrb	r3, [r3, #0]
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b010      	add	sp, #64	; 0x40
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	40008000 	.word	0x40008000
 80043e0:	40008400 	.word	0x40008400
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	080096b4 	.word	0x080096b4

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d00b      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <UART_AdvFeatureConfig+0x144>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <UART_AdvFeatureConfig+0x148>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <UART_AdvFeatureConfig+0x14c>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2208      	movs	r2, #8
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <UART_AdvFeatureConfig+0x150>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	2210      	movs	r2, #16
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <UART_AdvFeatureConfig+0x154>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <UART_AdvFeatureConfig+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	2240      	movs	r2, #64	; 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	d01d      	beq.n	8004506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <UART_AdvFeatureConfig+0x15c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	035b      	lsls	r3, r3, #13
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <UART_AdvFeatureConfig+0x160>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <UART_AdvFeatureConfig+0x164>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fffdffff 	.word	0xfffdffff
 8004534:	fffeffff 	.word	0xfffeffff
 8004538:	fffbffff 	.word	0xfffbffff
 800453c:	ffff7fff 	.word	0xffff7fff
 8004540:	ffffefff 	.word	0xffffefff
 8004544:	ffffdfff 	.word	0xffffdfff
 8004548:	ffefffff 	.word	0xffefffff
 800454c:	ff9fffff 	.word	0xff9fffff
 8004550:	fff7ffff 	.word	0xfff7ffff

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2290      	movs	r2, #144	; 0x90
 8004560:	2100      	movs	r1, #0
 8004562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fc faf4 	bl	8000b50 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	4013      	ands	r3, r2
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10c      	bne.n	8004594 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0391      	lsls	r1, r2, #14
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <UART_CheckIdleState+0x98>)
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	f000 f832 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e026      	b.n	80045e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2204      	movs	r2, #4
 800459c:	4013      	ands	r3, r2
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d10c      	bne.n	80045bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	03d1      	lsls	r1, r2, #15
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <UART_CheckIdleState+0x98>)
 80045ac:	9200      	str	r2, [sp, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f000 f81e 	bl	80045f0 <UART_WaitOnFlagUntilTimeout>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e012      	b.n	80045e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2288      	movs	r2, #136	; 0x88
 80045c0:	2120      	movs	r1, #32
 80045c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	228c      	movs	r2, #140	; 0x8c
 80045c8:	2120      	movs	r1, #32
 80045ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2284      	movs	r2, #132	; 0x84
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	01ffffff 	.word	0x01ffffff

080045f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b094      	sub	sp, #80	; 0x50
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004600:	e0a7      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004604:	3301      	adds	r3, #1
 8004606:	d100      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004608:	e0a3      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fc faa1 	bl	8000b50 <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461c:	2b00      	cmp	r3, #0
 800461e:	d13f      	bne.n	80046a0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004620:	f3ef 8310 	mrs	r3, PRIMASK
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004628:	647b      	str	r3, [r7, #68]	; 0x44
 800462a:	2301      	movs	r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	f383 8810 	msr	PRIMASK, r3
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	494e      	ldr	r1, [pc, #312]	; (800477c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004642:	400a      	ands	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004652:	f3ef 8310 	mrs	r3, PRIMASK
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	643b      	str	r3, [r7, #64]	; 0x40
 800465c:	2301      	movs	r3, #1
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2101      	movs	r1, #1
 8004674:	438a      	bics	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2288      	movs	r2, #136	; 0x88
 8004688:	2120      	movs	r1, #32
 800468a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	228c      	movs	r2, #140	; 0x8c
 8004690:	2120      	movs	r1, #32
 8004692:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2284      	movs	r2, #132	; 0x84
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e069      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2204      	movs	r2, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d052      	beq.n	8004752 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	401a      	ands	r2, r3
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	429a      	cmp	r2, r3
 80046be:	d148      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ca:	f3ef 8310 	mrs	r3, PRIMASK
 80046ce:	613b      	str	r3, [r7, #16]
  return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f383 8810 	msr	PRIMASK, r3
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4924      	ldr	r1, [pc, #144]	; (800477c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f383 8810 	msr	PRIMASK, r3
}
 80046fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004700:	61fb      	str	r3, [r7, #28]
  return(result);
 8004702:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
 8004706:	2301      	movs	r3, #1
 8004708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f383 8810 	msr	PRIMASK, r3
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	438a      	bics	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2288      	movs	r2, #136	; 0x88
 8004732:	2120      	movs	r1, #32
 8004734:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	228c      	movs	r2, #140	; 0x8c
 800473a:	2120      	movs	r1, #32
 800473c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2290      	movs	r2, #144	; 0x90
 8004742:	2120      	movs	r1, #32
 8004744:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2284      	movs	r2, #132	; 0x84
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e010      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	4013      	ands	r3, r2
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	425a      	negs	r2, r3
 8004762:	4153      	adcs	r3, r2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	001a      	movs	r2, r3
 8004768:	1dfb      	adds	r3, r7, #7
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d100      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x182>
 8004770:	e747      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b014      	add	sp, #80	; 0x50
 800477a:	bd80      	pop	{r7, pc}
 800477c:	fffffe5f 	.word	0xfffffe5f

08004780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2284      	movs	r2, #132	; 0x84
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UARTEx_DisableFifoMode+0x16>
 8004792:	2302      	movs	r3, #2
 8004794:	e027      	b.n	80047e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2284      	movs	r2, #132	; 0x84
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2288      	movs	r2, #136	; 0x88
 80047a2:	2124      	movs	r1, #36	; 0x24
 80047a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	438a      	bics	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2288      	movs	r2, #136	; 0x88
 80047d8:	2120      	movs	r1, #32
 80047da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2284      	movs	r2, #132	; 0x84
 80047e0:	2100      	movs	r1, #0
 80047e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b004      	add	sp, #16
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	dfffffff 	.word	0xdfffffff

080047f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2284      	movs	r2, #132	; 0x84
 8004802:	5c9b      	ldrb	r3, [r3, r2]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e02e      	b.n	800486a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2284      	movs	r2, #132	; 0x84
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2288      	movs	r2, #136	; 0x88
 8004818:	2124      	movs	r1, #36	; 0x24
 800481a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2101      	movs	r1, #1
 8004830:	438a      	bics	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	08d9      	lsrs	r1, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 f854 	bl	80048f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2288      	movs	r2, #136	; 0x88
 800485c:	2120      	movs	r1, #32
 800485e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2284      	movs	r2, #132	; 0x84
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2284      	movs	r2, #132	; 0x84
 8004882:	5c9b      	ldrb	r3, [r3, r2]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004888:	2302      	movs	r3, #2
 800488a:	e02f      	b.n	80048ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2284      	movs	r2, #132	; 0x84
 8004890:	2101      	movs	r1, #1
 8004892:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2288      	movs	r2, #136	; 0x88
 8004898:	2124      	movs	r1, #36	; 0x24
 800489a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	438a      	bics	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80048bc:	4013      	ands	r3, r2
 80048be:	0019      	movs	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f813 	bl	80048f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2288      	movs	r2, #136	; 0x88
 80048de:	2120      	movs	r1, #32
 80048e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2284      	movs	r2, #132	; 0x84
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b004      	add	sp, #16
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	f1ffffff 	.word	0xf1ffffff

080048f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	226a      	movs	r2, #106	; 0x6a
 800490c:	2101      	movs	r1, #1
 800490e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2268      	movs	r2, #104	; 0x68
 8004914:	2101      	movs	r1, #1
 8004916:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004918:	e043      	b.n	80049a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800491a:	260f      	movs	r6, #15
 800491c:	19bb      	adds	r3, r7, r6
 800491e:	2208      	movs	r2, #8
 8004920:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004922:	200e      	movs	r0, #14
 8004924:	183b      	adds	r3, r7, r0
 8004926:	2208      	movs	r2, #8
 8004928:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	0e5b      	lsrs	r3, r3, #25
 8004932:	b2da      	uxtb	r2, r3
 8004934:	240d      	movs	r4, #13
 8004936:	193b      	adds	r3, r7, r4
 8004938:	2107      	movs	r1, #7
 800493a:	400a      	ands	r2, r1
 800493c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	0f5b      	lsrs	r3, r3, #29
 8004946:	b2da      	uxtb	r2, r3
 8004948:	250c      	movs	r5, #12
 800494a:	197b      	adds	r3, r7, r5
 800494c:	2107      	movs	r1, #7
 800494e:	400a      	ands	r2, r1
 8004950:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004952:	183b      	adds	r3, r7, r0
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	197a      	adds	r2, r7, r5
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	4914      	ldr	r1, [pc, #80]	; (80049ac <UARTEx_SetNbDataToProcess+0xb4>)
 800495c:	5c8a      	ldrb	r2, [r1, r2]
 800495e:	435a      	muls	r2, r3
 8004960:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004962:	197b      	adds	r3, r7, r5
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800496a:	0019      	movs	r1, r3
 800496c:	f7fb fc54 	bl	8000218 <__divsi3>
 8004970:	0003      	movs	r3, r0
 8004972:	b299      	uxth	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	226a      	movs	r2, #106	; 0x6a
 8004978:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800497a:	19bb      	adds	r3, r7, r6
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	193a      	adds	r2, r7, r4
 8004980:	7812      	ldrb	r2, [r2, #0]
 8004982:	490a      	ldr	r1, [pc, #40]	; (80049ac <UARTEx_SetNbDataToProcess+0xb4>)
 8004984:	5c8a      	ldrb	r2, [r1, r2]
 8004986:	435a      	muls	r2, r3
 8004988:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800498a:	193b      	adds	r3, r7, r4
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004990:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004992:	0019      	movs	r1, r3
 8004994:	f7fb fc40 	bl	8000218 <__divsi3>
 8004998:	0003      	movs	r3, r0
 800499a:	b299      	uxth	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2268      	movs	r2, #104	; 0x68
 80049a0:	5299      	strh	r1, [r3, r2]
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b005      	add	sp, #20
 80049a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	080096cc 	.word	0x080096cc
 80049b0:	080096d4 	.word	0x080096d4

080049b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <USB_EnableGlobalInt+0x24>)
 80049c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	0000bf80 	.word	0x0000bf80

080049dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <USB_DisableGlobalInt+0x24>)
 80049e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	43d2      	mvns	r2, r2
 80049f0:	401a      	ands	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	0000bf80 	.word	0x0000bf80

08004a04 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	000a      	movs	r2, r1
 8004a0e:	1cfb      	adds	r3, r7, #3
 8004a10:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8004a12:	1cfb      	adds	r3, r7, #3
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	085a      	lsrs	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
 8004a26:	e006      	b.n	8004a36 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	0612      	lsls	r2, r2, #24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004a40:	b084      	sub	sp, #16
 8004a42:	b590      	push	{r4, r7, lr}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	2004      	movs	r0, #4
 8004a4c:	2410      	movs	r4, #16
 8004a4e:	1900      	adds	r0, r0, r4
 8004a50:	2408      	movs	r4, #8
 8004a52:	46a4      	mov	ip, r4
 8004a54:	44bc      	add	ip, r7
 8004a56:	4460      	add	r0, ip
 8004a58:	6001      	str	r1, [r0, #0]
 8004a5a:	6042      	str	r2, [r0, #4]
 8004a5c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2100      	movs	r1, #0
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7ff ffc4 	bl	8004a04 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b003      	add	sp, #12
 8004a8a:	bc90      	pop	{r4, r7}
 8004a8c:	bc08      	pop	{r3}
 8004a8e:	b004      	add	sp, #16
 8004a90:	4718      	bx	r3
	...

08004a94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09e      	sub	sp, #120	; 0x78
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9e:	2377      	movs	r3, #119	; 0x77
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	18d3      	adds	r3, r2, r3
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4ad8      	ldr	r2, [pc, #864]	; (8004e14 <USB_ActivateEndpoint+0x380>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d00e      	beq.n	8004ade <USB_ActivateEndpoint+0x4a>
 8004ac0:	dc19      	bgt.n	8004af6 <USB_ActivateEndpoint+0x62>
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d01c      	beq.n	8004b00 <USB_ActivateEndpoint+0x6c>
 8004ac6:	dc16      	bgt.n	8004af6 <USB_ActivateEndpoint+0x62>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <USB_ActivateEndpoint+0x3e>
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d00c      	beq.n	8004aea <USB_ActivateEndpoint+0x56>
 8004ad0:	e011      	b.n	8004af6 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004adc:	e011      	b.n	8004b02 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ae0:	22c0      	movs	r2, #192	; 0xc0
 8004ae2:	00d2      	lsls	r2, r2, #3
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004ae8:	e00b      	b.n	8004b02 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	00d2      	lsls	r2, r2, #3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8004af4:	e005      	b.n	8004b02 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8004af6:	2377      	movs	r3, #119	; 0x77
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
      break;
 8004afe:	e000      	b.n	8004b02 <USB_ActivateEndpoint+0x6e>
      break;
 8004b00:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b0e:	49c2      	ldr	r1, [pc, #776]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4abe      	ldr	r2, [pc, #760]	; (8004e1c <USB_ActivateEndpoint+0x388>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	7812      	ldrb	r2, [r2, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	18d3      	adds	r3, r2, r3
 8004b36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b38:	49b7      	ldr	r1, [pc, #732]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	7a9b      	ldrb	r3, [r3, #10]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d000      	beq.n	8004b48 <USB_ActivateEndpoint+0xb4>
 8004b46:	e177      	b.n	8004e38 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d06e      	beq.n	8004c2e <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4ab2      	ldr	r2, [pc, #712]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004b58:	4694      	mov	ip, r2
 8004b5a:	4463      	add	r3, ip
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	49ae      	ldr	r1, [pc, #696]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004b66:	468c      	mov	ip, r1
 8004b68:	4463      	add	r3, ip
 8004b6a:	0c12      	lsrs	r2, r2, #16
 8004b6c:	0412      	lsls	r2, r2, #16
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4aaa      	ldr	r2, [pc, #680]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004b78:	4694      	mov	ip, r2
 8004b7a:	4463      	add	r3, ip
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	889b      	ldrh	r3, [r3, #4]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	009a      	lsls	r2, r3, #2
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	48a4      	ldr	r0, [pc, #656]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004b90:	4684      	mov	ip, r0
 8004b92:	4463      	add	r3, ip
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	4013      	ands	r3, r2
 8004bac:	d011      	beq.n	8004bd2 <USB_ActivateEndpoint+0x13e>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	18d3      	adds	r3, r2, r3
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a98      	ldr	r2, [pc, #608]	; (8004e1c <USB_ActivateEndpoint+0x388>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	18d3      	adds	r3, r2, r3
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4995      	ldr	r1, [pc, #596]	; (8004e24 <USB_ActivateEndpoint+0x390>)
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	78db      	ldrb	r3, [r3, #3]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d016      	beq.n	8004c08 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a90      	ldr	r2, [pc, #576]	; (8004e28 <USB_ActivateEndpoint+0x394>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	4053      	eors	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4985      	ldr	r1, [pc, #532]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e270      	b.n	80050ea <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a84      	ldr	r2, [pc, #528]	; (8004e28 <USB_ActivateEndpoint+0x394>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	18d3      	adds	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	497c      	ldr	r1, [pc, #496]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e25d      	b.n	80050ea <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4a7a      	ldr	r2, [pc, #488]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c36:	4694      	mov	ip, r2
 8004c38:	4463      	add	r3, ip
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4977      	ldr	r1, [pc, #476]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c44:	468c      	mov	ip, r1
 8004c46:	4463      	add	r3, ip
 8004c48:	0c12      	lsrs	r2, r2, #16
 8004c4a:	0412      	lsls	r2, r2, #16
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4a72      	ldr	r2, [pc, #456]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c56:	4694      	mov	ip, r2
 8004c58:	4463      	add	r3, ip
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	889b      	ldrh	r3, [r3, #4]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	009a      	lsls	r2, r3, #2
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	486c      	ldr	r0, [pc, #432]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c6e:	4684      	mov	ip, r0
 8004c70:	4463      	add	r3, ip
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4a68      	ldr	r2, [pc, #416]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c7e:	4694      	mov	ip, r2
 8004c80:	4463      	add	r3, ip
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4965      	ldr	r1, [pc, #404]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004c8c:	468c      	mov	ip, r1
 8004c8e:	4463      	add	r3, ip
 8004c90:	0412      	lsls	r2, r2, #16
 8004c92:	0c12      	lsrs	r2, r2, #16
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c9c:	d920      	bls.n	8004ce0 <USB_ActivateEndpoint+0x24c>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	221f      	movs	r2, #31
 8004cac:	4013      	ands	r3, r2
 8004cae:	d102      	bne.n	8004cb6 <USB_ActivateEndpoint+0x222>
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4a58      	ldr	r2, [pc, #352]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004cbe:	4694      	mov	ip, r2
 8004cc0:	4463      	add	r3, ip
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc6:	069b      	lsls	r3, r3, #26
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4953      	ldr	r1, [pc, #332]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004cd2:	468c      	mov	ip, r1
 8004cd4:	4463      	add	r3, ip
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	0609      	lsls	r1, r1, #24
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	e042      	b.n	8004d66 <USB_ActivateEndpoint+0x2d2>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d121      	bne.n	8004d2c <USB_ActivateEndpoint+0x298>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4a4c      	ldr	r2, [pc, #304]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004cf0:	4694      	mov	ip, r2
 8004cf2:	4463      	add	r3, ip
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4948      	ldr	r1, [pc, #288]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004cfe:	468c      	mov	ip, r1
 8004d00:	4463      	add	r3, ip
 8004d02:	494a      	ldr	r1, [pc, #296]	; (8004e2c <USB_ActivateEndpoint+0x398>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004d10:	4694      	mov	ip, r2
 8004d12:	4463      	add	r3, ip
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4940      	ldr	r1, [pc, #256]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004d1e:	468c      	mov	ip, r1
 8004d20:	4463      	add	r3, ip
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0609      	lsls	r1, r1, #24
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e01c      	b.n	8004d66 <USB_ActivateEndpoint+0x2d2>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d002      	beq.n	8004d44 <USB_ActivateEndpoint+0x2b0>
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	3301      	adds	r3, #1
 8004d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4a35      	ldr	r2, [pc, #212]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004d4c:	4694      	mov	ip, r2
 8004d4e:	4463      	add	r3, ip
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	069a      	lsls	r2, r3, #26
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4830      	ldr	r0, [pc, #192]	; (8004e20 <USB_ActivateEndpoint+0x38c>)
 8004d5e:	4684      	mov	ip, r0
 8004d60:	4463      	add	r3, ip
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	18d3      	adds	r3, r2, r3
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	01db      	lsls	r3, r3, #7
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d011      	beq.n	8004da2 <USB_ActivateEndpoint+0x30e>
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	18d3      	adds	r3, r2, r3
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <USB_ActivateEndpoint+0x388>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	18d3      	adds	r3, r2, r3
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	4924      	ldr	r1, [pc, #144]	; (8004e30 <USB_ActivateEndpoint+0x39c>)
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11c      	bne.n	8004de4 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	18d3      	adds	r3, r2, r3
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <USB_ActivateEndpoint+0x3a0>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	0152      	lsls	r2, r2, #5
 8004dc2:	4053      	eors	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	2280      	movs	r2, #128	; 0x80
 8004dca:	0192      	lsls	r2, r2, #6
 8004dcc:	4053      	eors	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	490e      	ldr	r1, [pc, #56]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e182      	b.n	80050ea <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	18d3      	adds	r3, r2, r3
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <USB_ActivateEndpoint+0x3a0>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	623b      	str	r3, [r7, #32]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	0192      	lsls	r2, r2, #6
 8004dfc:	4053      	eors	r3, r2
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	4902      	ldr	r1, [pc, #8]	; (8004e18 <USB_ActivateEndpoint+0x384>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e16a      	b.n	80050ea <USB_ActivateEndpoint+0x656>
 8004e14:	07ff898f 	.word	0x07ff898f
 8004e18:	00008080 	.word	0x00008080
 8004e1c:	07ff8f8f 	.word	0x07ff8f8f
 8004e20:	40009800 	.word	0x40009800
 8004e24:	000080c0 	.word	0x000080c0
 8004e28:	07ff8fbf 	.word	0x07ff8fbf
 8004e2c:	83ffffff 	.word	0x83ffffff
 8004e30:	0000c080 	.word	0x0000c080
 8004e34:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d112      	bne.n	8004e66 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	18d3      	adds	r3, r2, r3
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4aaa      	ldr	r2, [pc, #680]	; (80050f8 <USB_ActivateEndpoint+0x664>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e5e:	49a7      	ldr	r1, [pc, #668]	; (80050fc <USB_ActivateEndpoint+0x668>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e011      	b.n	8004e8a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4aa3      	ldr	r2, [pc, #652]	; (8005100 <USB_ActivateEndpoint+0x66c>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	667b      	str	r3, [r7, #100]	; 0x64
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	18d3      	adds	r3, r2, r3
 8004e82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e84:	499f      	ldr	r1, [pc, #636]	; (8005104 <USB_ActivateEndpoint+0x670>)
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4a9d      	ldr	r2, [pc, #628]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004e92:	4694      	mov	ip, r2
 8004e94:	4463      	add	r3, ip
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	499a      	ldr	r1, [pc, #616]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004ea0:	468c      	mov	ip, r1
 8004ea2:	4463      	add	r3, ip
 8004ea4:	0c12      	lsrs	r2, r2, #16
 8004ea6:	0412      	lsls	r2, r2, #16
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4a95      	ldr	r2, [pc, #596]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004eb2:	4694      	mov	ip, r2
 8004eb4:	4463      	add	r3, ip
 8004eb6:	6819      	ldr	r1, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	88db      	ldrh	r3, [r3, #6]
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	009a      	lsls	r2, r3, #2
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	488f      	ldr	r0, [pc, #572]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004eca:	4684      	mov	ip, r0
 8004ecc:	4463      	add	r3, ip
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4a8b      	ldr	r2, [pc, #556]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004eda:	4694      	mov	ip, r2
 8004edc:	4463      	add	r3, ip
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4988      	ldr	r1, [pc, #544]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004ee8:	468c      	mov	ip, r1
 8004eea:	4463      	add	r3, ip
 8004eec:	0c12      	lsrs	r2, r2, #16
 8004eee:	0412      	lsls	r2, r2, #16
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4a83      	ldr	r2, [pc, #524]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004efa:	4694      	mov	ip, r2
 8004efc:	4463      	add	r3, ip
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	891b      	ldrh	r3, [r3, #8]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	009a      	lsls	r2, r3, #2
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	487d      	ldr	r0, [pc, #500]	; (8005108 <USB_ActivateEndpoint+0x674>)
 8004f12:	4684      	mov	ip, r0
 8004f14:	4463      	add	r3, ip
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d169      	bne.n	8004ff6 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	18d3      	adds	r3, r2, r3
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	01db      	lsls	r3, r3, #7
 8004f36:	4013      	ands	r3, r2
 8004f38:	d011      	beq.n	8004f5e <USB_ActivateEndpoint+0x4ca>
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	18d3      	adds	r3, r2, r3
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <USB_ActivateEndpoint+0x664>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	18d3      	adds	r3, r2, r3
 8004f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f58:	496c      	ldr	r1, [pc, #432]	; (800510c <USB_ActivateEndpoint+0x678>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	4013      	ands	r3, r2
 8004f72:	d011      	beq.n	8004f98 <USB_ActivateEndpoint+0x504>
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5d      	ldr	r2, [pc, #372]	; (80050f8 <USB_ActivateEndpoint+0x664>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	18d3      	adds	r3, r2, r3
 8004f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f92:	495f      	ldr	r1, [pc, #380]	; (8005110 <USB_ActivateEndpoint+0x67c>)
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	18d3      	adds	r3, r2, r3
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <USB_ActivateEndpoint+0x680>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	0152      	lsls	r2, r2, #5
 8004fb0:	4053      	eors	r3, r2
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	2280      	movs	r2, #128	; 0x80
 8004fb8:	0192      	lsls	r2, r2, #6
 8004fba:	4053      	eors	r3, r2
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	494e      	ldr	r1, [pc, #312]	; (8005104 <USB_ActivateEndpoint+0x670>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <USB_ActivateEndpoint+0x684>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fee:	4945      	ldr	r1, [pc, #276]	; (8005104 <USB_ActivateEndpoint+0x670>)
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e079      	b.n	80050ea <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	18d3      	adds	r3, r2, r3
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	01db      	lsls	r3, r3, #7
 800500a:	4013      	ands	r3, r2
 800500c:	d011      	beq.n	8005032 <USB_ActivateEndpoint+0x59e>
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a37      	ldr	r2, [pc, #220]	; (80050f8 <USB_ActivateEndpoint+0x664>)
 800501c:	4013      	ands	r3, r2
 800501e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	18d3      	adds	r3, r2, r3
 800502a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502c:	4937      	ldr	r1, [pc, #220]	; (800510c <USB_ActivateEndpoint+0x678>)
 800502e:	430a      	orrs	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	657b      	str	r3, [r7, #84]	; 0x54
 8005040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005042:	2240      	movs	r2, #64	; 0x40
 8005044:	4013      	ands	r3, r2
 8005046:	d011      	beq.n	800506c <USB_ActivateEndpoint+0x5d8>
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <USB_ActivateEndpoint+0x664>)
 8005056:	4013      	ands	r3, r2
 8005058:	653b      	str	r3, [r7, #80]	; 0x50
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	18d3      	adds	r3, r2, r3
 8005064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005066:	492a      	ldr	r1, [pc, #168]	; (8005110 <USB_ActivateEndpoint+0x67c>)
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d016      	beq.n	80050a2 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <USB_ActivateEndpoint+0x684>)
 8005082:	4013      	ands	r3, r2
 8005084:	64bb      	str	r3, [r7, #72]	; 0x48
 8005086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005088:	2220      	movs	r2, #32
 800508a:	4053      	eors	r3, r2
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	18d3      	adds	r3, r2, r3
 8005098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800509a:	491a      	ldr	r1, [pc, #104]	; (8005104 <USB_ActivateEndpoint+0x670>)
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	e011      	b.n	80050c6 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <USB_ActivateEndpoint+0x684>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	18d3      	adds	r3, r2, r3
 80050be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c0:	4910      	ldr	r1, [pc, #64]	; (8005104 <USB_ActivateEndpoint+0x670>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	18d3      	adds	r3, r2, r3
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a10      	ldr	r2, [pc, #64]	; (8005114 <USB_ActivateEndpoint+0x680>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	18d3      	adds	r3, r2, r3
 80050e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e4:	4907      	ldr	r1, [pc, #28]	; (8005104 <USB_ActivateEndpoint+0x670>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80050ea:	2377      	movs	r3, #119	; 0x77
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	781b      	ldrb	r3, [r3, #0]
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b01e      	add	sp, #120	; 0x78
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	07ff8f8f 	.word	0x07ff8f8f
 80050fc:	00008180 	.word	0x00008180
 8005100:	07ff8e8f 	.word	0x07ff8e8f
 8005104:	00008080 	.word	0x00008080
 8005108:	40009800 	.word	0x40009800
 800510c:	0000c080 	.word	0x0000c080
 8005110:	000080c0 	.word	0x000080c0
 8005114:	07ffbf8f 	.word	0x07ffbf8f
 8005118:	07ff8fbf 	.word	0x07ff8fbf

0800511c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b096      	sub	sp, #88	; 0x58
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	7a9b      	ldrb	r3, [r3, #10]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d164      	bne.n	80051f8 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02f      	beq.n	8005196 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	4013      	ands	r3, r2
 800514a:	d011      	beq.n	8005170 <USB_DeactivateEndpoint+0x54>
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	18d3      	adds	r3, r2, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9d      	ldr	r2, [pc, #628]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	18d3      	adds	r3, r2, r3
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	499a      	ldr	r1, [pc, #616]	; (80053d4 <USB_DeactivateEndpoint+0x2b8>)
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a96      	ldr	r2, [pc, #600]	; (80053d8 <USB_DeactivateEndpoint+0x2bc>)
 800517e:	4013      	ands	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4993      	ldr	r1, [pc, #588]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e117      	b.n	80053c6 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	18d3      	adds	r3, r2, r3
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	01db      	lsls	r3, r3, #7
 80051aa:	4013      	ands	r3, r2
 80051ac:	d011      	beq.n	80051d2 <USB_DeactivateEndpoint+0xb6>
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	18d3      	adds	r3, r2, r3
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a85      	ldr	r2, [pc, #532]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4984      	ldr	r1, [pc, #528]	; (80053e0 <USB_DeactivateEndpoint+0x2c4>)
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a81      	ldr	r2, [pc, #516]	; (80053e4 <USB_DeactivateEndpoint+0x2c8>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	497a      	ldr	r1, [pc, #488]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e0e6      	b.n	80053c6 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d171      	bne.n	80052e4 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	18d3      	adds	r3, r2, r3
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
 800520e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	01db      	lsls	r3, r3, #7
 8005214:	4013      	ands	r3, r2
 8005216:	d011      	beq.n	800523c <USB_DeactivateEndpoint+0x120>
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 8005226:	4013      	ands	r3, r2
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	18d3      	adds	r3, r2, r3
 8005234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005236:	496a      	ldr	r1, [pc, #424]	; (80053e0 <USB_DeactivateEndpoint+0x2c4>)
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	633b      	str	r3, [r7, #48]	; 0x30
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	4013      	ands	r3, r2
 8005250:	d011      	beq.n	8005276 <USB_DeactivateEndpoint+0x15a>
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	18d3      	adds	r3, r2, r3
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 8005260:	4013      	ands	r3, r2
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	18d3      	adds	r3, r2, r3
 800526e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005270:	4958      	ldr	r1, [pc, #352]	; (80053d4 <USB_DeactivateEndpoint+0x2b8>)
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 8005284:	4013      	ands	r3, r2
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005294:	494f      	ldr	r1, [pc, #316]	; (80053d4 <USB_DeactivateEndpoint+0x2b8>)
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	18d3      	adds	r3, r2, r3
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4f      	ldr	r2, [pc, #316]	; (80053e4 <USB_DeactivateEndpoint+0x2c8>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	18d3      	adds	r3, r2, r3
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	4948      	ldr	r1, [pc, #288]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	18d3      	adds	r3, r2, r3
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a43      	ldr	r2, [pc, #268]	; (80053d8 <USB_DeactivateEndpoint+0x2bc>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	493f      	ldr	r1, [pc, #252]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e070      	b.n	80053c6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	657b      	str	r3, [r7, #84]	; 0x54
 80052f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	01db      	lsls	r3, r3, #7
 80052f8:	4013      	ands	r3, r2
 80052fa:	d011      	beq.n	8005320 <USB_DeactivateEndpoint+0x204>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	18d3      	adds	r3, r2, r3
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a31      	ldr	r2, [pc, #196]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 800530a:	4013      	ands	r3, r2
 800530c:	653b      	str	r3, [r7, #80]	; 0x50
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	18d3      	adds	r3, r2, r3
 8005318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800531a:	4931      	ldr	r1, [pc, #196]	; (80053e0 <USB_DeactivateEndpoint+0x2c4>)
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005330:	2240      	movs	r2, #64	; 0x40
 8005332:	4013      	ands	r3, r2
 8005334:	d011      	beq.n	800535a <USB_DeactivateEndpoint+0x23e>
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 8005344:	4013      	ands	r3, r2
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005354:	491f      	ldr	r1, [pc, #124]	; (80053d4 <USB_DeactivateEndpoint+0x2b8>)
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <USB_DeactivateEndpoint+0x2b4>)
 8005368:	4013      	ands	r3, r2
 800536a:	647b      	str	r3, [r7, #68]	; 0x44
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005378:	4919      	ldr	r1, [pc, #100]	; (80053e0 <USB_DeactivateEndpoint+0x2c4>)
 800537a:	430a      	orrs	r2, r1
 800537c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	18d3      	adds	r3, r2, r3
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <USB_DeactivateEndpoint+0x2bc>)
 800538c:	4013      	ands	r3, r2
 800538e:	643b      	str	r3, [r7, #64]	; 0x40
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800539c:	490f      	ldr	r1, [pc, #60]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	18d3      	adds	r3, r2, r3
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <USB_DeactivateEndpoint+0x2c8>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18d3      	adds	r3, r2, r3
 80053be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053c0:	4906      	ldr	r1, [pc, #24]	; (80053dc <USB_DeactivateEndpoint+0x2c0>)
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b016      	add	sp, #88	; 0x58
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	07ff8f8f 	.word	0x07ff8f8f
 80053d4:	000080c0 	.word	0x000080c0
 80053d8:	07ff8fbf 	.word	0x07ff8fbf
 80053dc:	00008080 	.word	0x00008080
 80053e0:	0000c080 	.word	0x0000c080
 80053e4:	07ffbf8f 	.word	0x07ffbf8f

080053e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b097      	sub	sp, #92	; 0x5c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d001      	beq.n	80053fe <USB_EPStartXfer+0x16>
 80053fa:	f000 fd24 	bl	8005e46 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d903      	bls.n	8005412 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
 8005410:	e002      	b.n	8005418 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	7a9b      	ldrb	r3, [r3, #10]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d12b      	bne.n	8005478 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6959      	ldr	r1, [r3, #20]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	889a      	ldrh	r2, [r3, #4]
 8005428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542a:	b29b      	uxth	r3, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f9b3 	bl	8006798 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4ade      	ldr	r2, [pc, #888]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800543a:	4694      	mov	ip, r2
 800543c:	4463      	add	r3, ip
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	49db      	ldr	r1, [pc, #876]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005448:	468c      	mov	ip, r1
 800544a:	4463      	add	r3, ip
 800544c:	0412      	lsls	r2, r2, #16
 800544e:	0c12      	lsrs	r2, r2, #16
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4ad6      	ldr	r2, [pc, #856]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800545a:	4694      	mov	ip, r2
 800545c:	4463      	add	r3, ip
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005462:	041a      	lsls	r2, r3, #16
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	48d2      	ldr	r0, [pc, #840]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800546c:	4684      	mov	ip, r0
 800546e:	4463      	add	r3, ip
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f000 fccb 	bl	8005e0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	78db      	ldrb	r3, [r3, #3]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d000      	beq.n	8005482 <USB_EPStartXfer+0x9a>
 8005480:	e35e      	b.n	8005b40 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d800      	bhi.n	8005490 <USB_EPStartXfer+0xa8>
 800548e:	e309      	b.n	8005aa4 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4ac6      	ldr	r2, [pc, #792]	; (80057b8 <USB_EPStartXfer+0x3d0>)
 800549e:	4013      	ands	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	18d3      	adds	r3, r2, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	49c3      	ldr	r1, [pc, #780]	; (80057bc <USB_EPStartXfer+0x3d4>)
 80054b0:	430a      	orrs	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	18d3      	adds	r3, r2, r3
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	4013      	ands	r3, r2
 80054d0:	d100      	bne.n	80054d4 <USB_EPStartXfer+0xec>
 80054d2:	e177      	b.n	80057c4 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d172      	bne.n	80055c2 <USB_EPStartXfer+0x1da>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4ab4      	ldr	r2, [pc, #720]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80054e4:	4694      	mov	ip, r2
 80054e6:	4463      	add	r3, ip
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	49b0      	ldr	r1, [pc, #704]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80054f2:	468c      	mov	ip, r1
 80054f4:	4463      	add	r3, ip
 80054f6:	0412      	lsls	r2, r2, #16
 80054f8:	0c12      	lsrs	r2, r2, #16
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005500:	d91e      	bls.n	8005540 <USB_EPStartXfer+0x158>
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
 8005508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550a:	221f      	movs	r2, #31
 800550c:	4013      	ands	r3, r2
 800550e:	d102      	bne.n	8005516 <USB_EPStartXfer+0x12e>
 8005510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005512:	3b01      	subs	r3, #1
 8005514:	653b      	str	r3, [r7, #80]	; 0x50
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4aa5      	ldr	r2, [pc, #660]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800551e:	4694      	mov	ip, r2
 8005520:	4463      	add	r3, ip
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005526:	069b      	lsls	r3, r3, #26
 8005528:	431a      	orrs	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	49a0      	ldr	r1, [pc, #640]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005532:	468c      	mov	ip, r1
 8005534:	4463      	add	r3, ip
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	0609      	lsls	r1, r1, #24
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e065      	b.n	800560c <USB_EPStartXfer+0x224>
 8005540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005542:	2b00      	cmp	r3, #0
 8005544:	d121      	bne.n	800558a <USB_EPStartXfer+0x1a2>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4a99      	ldr	r2, [pc, #612]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800554e:	4694      	mov	ip, r2
 8005550:	4463      	add	r3, ip
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4996      	ldr	r1, [pc, #600]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800555c:	468c      	mov	ip, r1
 800555e:	4463      	add	r3, ip
 8005560:	4997      	ldr	r1, [pc, #604]	; (80057c0 <USB_EPStartXfer+0x3d8>)
 8005562:	400a      	ands	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4a91      	ldr	r2, [pc, #580]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800556e:	4694      	mov	ip, r2
 8005570:	4463      	add	r3, ip
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	498e      	ldr	r1, [pc, #568]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800557c:	468c      	mov	ip, r1
 800557e:	4463      	add	r3, ip
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	0609      	lsls	r1, r1, #24
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	e040      	b.n	800560c <USB_EPStartXfer+0x224>
 800558a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	653b      	str	r3, [r7, #80]	; 0x50
 8005590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005592:	2201      	movs	r2, #1
 8005594:	4013      	ands	r3, r2
 8005596:	d002      	beq.n	800559e <USB_EPStartXfer+0x1b6>
 8005598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559a:	3301      	adds	r3, #1
 800559c:	653b      	str	r3, [r7, #80]	; 0x50
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4a83      	ldr	r2, [pc, #524]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80055a6:	4694      	mov	ip, r2
 80055a8:	4463      	add	r3, ip
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ae:	069a      	lsls	r2, r3, #26
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	487f      	ldr	r0, [pc, #508]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80055b8:	4684      	mov	ip, r0
 80055ba:	4463      	add	r3, ip
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	e024      	b.n	800560c <USB_EPStartXfer+0x224>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d120      	bne.n	800560c <USB_EPStartXfer+0x224>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4a78      	ldr	r2, [pc, #480]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80055d2:	4694      	mov	ip, r2
 80055d4:	4463      	add	r3, ip
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4975      	ldr	r1, [pc, #468]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80055e0:	468c      	mov	ip, r1
 80055e2:	4463      	add	r3, ip
 80055e4:	0412      	lsls	r2, r2, #16
 80055e6:	0c12      	lsrs	r2, r2, #16
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4a70      	ldr	r2, [pc, #448]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80055f2:	4694      	mov	ip, r2
 80055f4:	4463      	add	r3, ip
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055fa:	041a      	lsls	r2, r3, #16
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	486c      	ldr	r0, [pc, #432]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005604:	4684      	mov	ip, r0
 8005606:	4463      	add	r3, ip
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800560c:	201a      	movs	r0, #26
 800560e:	183b      	adds	r3, r7, r0
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	8912      	ldrh	r2, [r2, #8]
 8005614:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561c:	b29c      	uxth	r4, r3
 800561e:	183b      	adds	r3, r7, r0
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	0023      	movs	r3, r4
 8005626:	f001 f8b7 	bl	8006798 <USB_WritePMA>
            ep->xfer_buff += len;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005630:	18d2      	adds	r2, r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d906      	bls.n	8005650 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	621a      	str	r2, [r3, #32]
 800564e:	e005      	b.n	800565c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d172      	bne.n	800574a <USB_EPStartXfer+0x362>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4a52      	ldr	r2, [pc, #328]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800566c:	4694      	mov	ip, r2
 800566e:	4463      	add	r3, ip
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	494e      	ldr	r1, [pc, #312]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800567a:	468c      	mov	ip, r1
 800567c:	4463      	add	r3, ip
 800567e:	0412      	lsls	r2, r2, #16
 8005680:	0c12      	lsrs	r2, r2, #16
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005686:	2b3e      	cmp	r3, #62	; 0x3e
 8005688:	d91e      	bls.n	80056c8 <USB_EPStartXfer+0x2e0>
 800568a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005692:	221f      	movs	r2, #31
 8005694:	4013      	ands	r3, r2
 8005696:	d102      	bne.n	800569e <USB_EPStartXfer+0x2b6>
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	3b01      	subs	r3, #1
 800569c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4a43      	ldr	r2, [pc, #268]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80056a6:	4694      	mov	ip, r2
 80056a8:	4463      	add	r3, ip
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	069b      	lsls	r3, r3, #26
 80056b0:	431a      	orrs	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	493e      	ldr	r1, [pc, #248]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80056ba:	468c      	mov	ip, r1
 80056bc:	4463      	add	r3, ip
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	0609      	lsls	r1, r1, #24
 80056c2:	430a      	orrs	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e065      	b.n	8005794 <USB_EPStartXfer+0x3ac>
 80056c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d121      	bne.n	8005712 <USB_EPStartXfer+0x32a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4a37      	ldr	r2, [pc, #220]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80056d6:	4694      	mov	ip, r2
 80056d8:	4463      	add	r3, ip
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4934      	ldr	r1, [pc, #208]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80056e4:	468c      	mov	ip, r1
 80056e6:	4463      	add	r3, ip
 80056e8:	4935      	ldr	r1, [pc, #212]	; (80057c0 <USB_EPStartXfer+0x3d8>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4a2f      	ldr	r2, [pc, #188]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 80056f6:	4694      	mov	ip, r2
 80056f8:	4463      	add	r3, ip
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	492c      	ldr	r1, [pc, #176]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005704:	468c      	mov	ip, r1
 8005706:	4463      	add	r3, ip
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	0609      	lsls	r1, r1, #24
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e040      	b.n	8005794 <USB_EPStartXfer+0x3ac>
 8005712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571a:	2201      	movs	r2, #1
 800571c:	4013      	ands	r3, r2
 800571e:	d002      	beq.n	8005726 <USB_EPStartXfer+0x33e>
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	3301      	adds	r3, #1
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800572e:	4694      	mov	ip, r2
 8005730:	4463      	add	r3, ip
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	069a      	lsls	r2, r3, #26
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	481d      	ldr	r0, [pc, #116]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005740:	4684      	mov	ip, r0
 8005742:	4463      	add	r3, ip
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e024      	b.n	8005794 <USB_EPStartXfer+0x3ac>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d120      	bne.n	8005794 <USB_EPStartXfer+0x3ac>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800575a:	4694      	mov	ip, r2
 800575c:	4463      	add	r3, ip
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4913      	ldr	r1, [pc, #76]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 8005768:	468c      	mov	ip, r1
 800576a:	4463      	add	r3, ip
 800576c:	0412      	lsls	r2, r2, #16
 800576e:	0c12      	lsrs	r2, r2, #16
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800577a:	4694      	mov	ip, r2
 800577c:	4463      	add	r3, ip
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	041a      	lsls	r2, r3, #16
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	480a      	ldr	r0, [pc, #40]	; (80057b4 <USB_EPStartXfer+0x3cc>)
 800578c:	4684      	mov	ip, r0
 800578e:	4463      	add	r3, ip
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005794:	201a      	movs	r0, #26
 8005796:	183b      	adds	r3, r7, r0
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	88d2      	ldrh	r2, [r2, #6]
 800579c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6959      	ldr	r1, [r3, #20]
 80057a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a4:	b29c      	uxth	r4, r3
 80057a6:	183b      	adds	r3, r7, r0
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	0023      	movs	r3, r4
 80057ae:	f000 fff3 	bl	8006798 <USB_WritePMA>
 80057b2:	e32c      	b.n	8005e0e <USB_EPStartXfer+0xa26>
 80057b4:	40009800 	.word	0x40009800
 80057b8:	07ff8f8f 	.word	0x07ff8f8f
 80057bc:	00008180 	.word	0x00008180
 80057c0:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d172      	bne.n	80058b2 <USB_EPStartXfer+0x4ca>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4ad7      	ldr	r2, [pc, #860]	; (8005b30 <USB_EPStartXfer+0x748>)
 80057d4:	4694      	mov	ip, r2
 80057d6:	4463      	add	r3, ip
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	49d3      	ldr	r1, [pc, #844]	; (8005b30 <USB_EPStartXfer+0x748>)
 80057e2:	468c      	mov	ip, r1
 80057e4:	4463      	add	r3, ip
 80057e6:	0412      	lsls	r2, r2, #16
 80057e8:	0c12      	lsrs	r2, r2, #16
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ee:	2b3e      	cmp	r3, #62	; 0x3e
 80057f0:	d91e      	bls.n	8005830 <USB_EPStartXfer+0x448>
 80057f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fa:	221f      	movs	r2, #31
 80057fc:	4013      	ands	r3, r2
 80057fe:	d102      	bne.n	8005806 <USB_EPStartXfer+0x41e>
 8005800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005802:	3b01      	subs	r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	; 0x48
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4ac8      	ldr	r2, [pc, #800]	; (8005b30 <USB_EPStartXfer+0x748>)
 800580e:	4694      	mov	ip, r2
 8005810:	4463      	add	r3, ip
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	069b      	lsls	r3, r3, #26
 8005818:	431a      	orrs	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	49c3      	ldr	r1, [pc, #780]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005822:	468c      	mov	ip, r1
 8005824:	4463      	add	r3, ip
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	0609      	lsls	r1, r1, #24
 800582a:	430a      	orrs	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	e065      	b.n	80058fc <USB_EPStartXfer+0x514>
 8005830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005832:	2b00      	cmp	r3, #0
 8005834:	d121      	bne.n	800587a <USB_EPStartXfer+0x492>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4abc      	ldr	r2, [pc, #752]	; (8005b30 <USB_EPStartXfer+0x748>)
 800583e:	4694      	mov	ip, r2
 8005840:	4463      	add	r3, ip
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	49b9      	ldr	r1, [pc, #740]	; (8005b30 <USB_EPStartXfer+0x748>)
 800584c:	468c      	mov	ip, r1
 800584e:	4463      	add	r3, ip
 8005850:	49b8      	ldr	r1, [pc, #736]	; (8005b34 <USB_EPStartXfer+0x74c>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4ab4      	ldr	r2, [pc, #720]	; (8005b30 <USB_EPStartXfer+0x748>)
 800585e:	4694      	mov	ip, r2
 8005860:	4463      	add	r3, ip
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	49b1      	ldr	r1, [pc, #708]	; (8005b30 <USB_EPStartXfer+0x748>)
 800586c:	468c      	mov	ip, r1
 800586e:	4463      	add	r3, ip
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	0609      	lsls	r1, r1, #24
 8005874:	430a      	orrs	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e040      	b.n	80058fc <USB_EPStartXfer+0x514>
 800587a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005882:	2201      	movs	r2, #1
 8005884:	4013      	ands	r3, r2
 8005886:	d002      	beq.n	800588e <USB_EPStartXfer+0x4a6>
 8005888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588a:	3301      	adds	r3, #1
 800588c:	64bb      	str	r3, [r7, #72]	; 0x48
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4aa6      	ldr	r2, [pc, #664]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005896:	4694      	mov	ip, r2
 8005898:	4463      	add	r3, ip
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589e:	069a      	lsls	r2, r3, #26
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	48a2      	ldr	r0, [pc, #648]	; (8005b30 <USB_EPStartXfer+0x748>)
 80058a8:	4684      	mov	ip, r0
 80058aa:	4463      	add	r3, ip
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e024      	b.n	80058fc <USB_EPStartXfer+0x514>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d120      	bne.n	80058fc <USB_EPStartXfer+0x514>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4a9b      	ldr	r2, [pc, #620]	; (8005b30 <USB_EPStartXfer+0x748>)
 80058c2:	4694      	mov	ip, r2
 80058c4:	4463      	add	r3, ip
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4998      	ldr	r1, [pc, #608]	; (8005b30 <USB_EPStartXfer+0x748>)
 80058d0:	468c      	mov	ip, r1
 80058d2:	4463      	add	r3, ip
 80058d4:	0412      	lsls	r2, r2, #16
 80058d6:	0c12      	lsrs	r2, r2, #16
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4a93      	ldr	r2, [pc, #588]	; (8005b30 <USB_EPStartXfer+0x748>)
 80058e2:	4694      	mov	ip, r2
 80058e4:	4463      	add	r3, ip
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ea:	041a      	lsls	r2, r3, #16
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	488f      	ldr	r0, [pc, #572]	; (8005b30 <USB_EPStartXfer+0x748>)
 80058f4:	4684      	mov	ip, r0
 80058f6:	4463      	add	r3, ip
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058fc:	201a      	movs	r0, #26
 80058fe:	183b      	adds	r3, r7, r0
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	88d2      	ldrh	r2, [r2, #6]
 8005904:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6959      	ldr	r1, [r3, #20]
 800590a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590c:	b29c      	uxth	r4, r3
 800590e:	183b      	adds	r3, r7, r0
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	0023      	movs	r3, r4
 8005916:	f000 ff3f 	bl	8006798 <USB_WritePMA>
            ep->xfer_buff += len;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005920:	18d2      	adds	r2, r2, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d906      	bls.n	8005940 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	621a      	str	r2, [r3, #32]
 800593e:	e005      	b.n	800594c <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2200      	movs	r2, #0
 800594a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d172      	bne.n	8005a3a <USB_EPStartXfer+0x652>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4a75      	ldr	r2, [pc, #468]	; (8005b30 <USB_EPStartXfer+0x748>)
 800595c:	4694      	mov	ip, r2
 800595e:	4463      	add	r3, ip
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	4971      	ldr	r1, [pc, #452]	; (8005b30 <USB_EPStartXfer+0x748>)
 800596a:	468c      	mov	ip, r1
 800596c:	4463      	add	r3, ip
 800596e:	0412      	lsls	r2, r2, #16
 8005970:	0c12      	lsrs	r2, r2, #16
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005976:	2b3e      	cmp	r3, #62	; 0x3e
 8005978:	d91e      	bls.n	80059b8 <USB_EPStartXfer+0x5d0>
 800597a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	647b      	str	r3, [r7, #68]	; 0x44
 8005980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005982:	221f      	movs	r2, #31
 8005984:	4013      	ands	r3, r2
 8005986:	d102      	bne.n	800598e <USB_EPStartXfer+0x5a6>
 8005988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598a:	3b01      	subs	r3, #1
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4a66      	ldr	r2, [pc, #408]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005996:	4694      	mov	ip, r2
 8005998:	4463      	add	r3, ip
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599e:	069b      	lsls	r3, r3, #26
 80059a0:	431a      	orrs	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4961      	ldr	r1, [pc, #388]	; (8005b30 <USB_EPStartXfer+0x748>)
 80059aa:	468c      	mov	ip, r1
 80059ac:	4463      	add	r3, ip
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	0609      	lsls	r1, r1, #24
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	e065      	b.n	8005a84 <USB_EPStartXfer+0x69c>
 80059b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d121      	bne.n	8005a02 <USB_EPStartXfer+0x61a>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4a5a      	ldr	r2, [pc, #360]	; (8005b30 <USB_EPStartXfer+0x748>)
 80059c6:	4694      	mov	ip, r2
 80059c8:	4463      	add	r3, ip
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4957      	ldr	r1, [pc, #348]	; (8005b30 <USB_EPStartXfer+0x748>)
 80059d4:	468c      	mov	ip, r1
 80059d6:	4463      	add	r3, ip
 80059d8:	4956      	ldr	r1, [pc, #344]	; (8005b34 <USB_EPStartXfer+0x74c>)
 80059da:	400a      	ands	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4a52      	ldr	r2, [pc, #328]	; (8005b30 <USB_EPStartXfer+0x748>)
 80059e6:	4694      	mov	ip, r2
 80059e8:	4463      	add	r3, ip
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	494f      	ldr	r1, [pc, #316]	; (8005b30 <USB_EPStartXfer+0x748>)
 80059f4:	468c      	mov	ip, r1
 80059f6:	4463      	add	r3, ip
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	0609      	lsls	r1, r1, #24
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	e040      	b.n	8005a84 <USB_EPStartXfer+0x69c>
 8005a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
 8005a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d002      	beq.n	8005a16 <USB_EPStartXfer+0x62e>
 8005a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a12:	3301      	adds	r3, #1
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4a44      	ldr	r2, [pc, #272]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a1e:	4694      	mov	ip, r2
 8005a20:	4463      	add	r3, ip
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	069a      	lsls	r2, r3, #26
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4840      	ldr	r0, [pc, #256]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a30:	4684      	mov	ip, r0
 8005a32:	4463      	add	r3, ip
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	e024      	b.n	8005a84 <USB_EPStartXfer+0x69c>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d120      	bne.n	8005a84 <USB_EPStartXfer+0x69c>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4a39      	ldr	r2, [pc, #228]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a4a:	4694      	mov	ip, r2
 8005a4c:	4463      	add	r3, ip
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4936      	ldr	r1, [pc, #216]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a58:	468c      	mov	ip, r1
 8005a5a:	4463      	add	r3, ip
 8005a5c:	0412      	lsls	r2, r2, #16
 8005a5e:	0c12      	lsrs	r2, r2, #16
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4a31      	ldr	r2, [pc, #196]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a6a:	4694      	mov	ip, r2
 8005a6c:	4463      	add	r3, ip
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a72:	041a      	lsls	r2, r3, #16
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	482d      	ldr	r0, [pc, #180]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005a7c:	4684      	mov	ip, r0
 8005a7e:	4463      	add	r3, ip
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8005a84:	201a      	movs	r0, #26
 8005a86:	183b      	adds	r3, r7, r0
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	8912      	ldrh	r2, [r2, #8]
 8005a8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6959      	ldr	r1, [r3, #20]
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	b29c      	uxth	r4, r3
 8005a96:	183b      	adds	r3, r7, r0
 8005a98:	881a      	ldrh	r2, [r3, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	0023      	movs	r3, r4
 8005a9e:	f000 fe7b 	bl	8006798 <USB_WritePMA>
 8005aa2:	e1b4      	b.n	8005e0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	18d3      	adds	r3, r2, r3
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <USB_EPStartXfer+0x750>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	491c      	ldr	r1, [pc, #112]	; (8005b3c <USB_EPStartXfer+0x754>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005ad6:	4694      	mov	ip, r2
 8005ad8:	4463      	add	r3, ip
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4913      	ldr	r1, [pc, #76]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005ae4:	468c      	mov	ip, r1
 8005ae6:	4463      	add	r3, ip
 8005ae8:	0412      	lsls	r2, r2, #16
 8005aea:	0c12      	lsrs	r2, r2, #16
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005af6:	4694      	mov	ip, r2
 8005af8:	4463      	add	r3, ip
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	480a      	ldr	r0, [pc, #40]	; (8005b30 <USB_EPStartXfer+0x748>)
 8005b08:	4684      	mov	ip, r0
 8005b0a:	4463      	add	r3, ip
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b10:	201a      	movs	r0, #26
 8005b12:	183b      	adds	r3, r7, r0
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	88d2      	ldrh	r2, [r2, #6]
 8005b18:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6959      	ldr	r1, [r3, #20]
 8005b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b20:	b29c      	uxth	r4, r3
 8005b22:	183b      	adds	r3, r7, r0
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	0023      	movs	r3, r4
 8005b2a:	f000 fe35 	bl	8006798 <USB_WritePMA>
 8005b2e:	e16e      	b.n	8005e0e <USB_EPStartXfer+0xa26>
 8005b30:	40009800 	.word	0x40009800
 8005b34:	83ffffff 	.word	0x83ffffff
 8005b38:	07ff8e8f 	.word	0x07ff8e8f
 8005b3c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2240      	movs	r2, #64	; 0x40
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <USB_EPStartXfer+0x778>
 8005b5e:	e0ab      	b.n	8005cb8 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d172      	bne.n	8005c4e <USB_EPStartXfer+0x866>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4adc      	ldr	r2, [pc, #880]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005b70:	4694      	mov	ip, r2
 8005b72:	4463      	add	r3, ip
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	49d8      	ldr	r1, [pc, #864]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005b7e:	468c      	mov	ip, r1
 8005b80:	4463      	add	r3, ip
 8005b82:	0412      	lsls	r2, r2, #16
 8005b84:	0c12      	lsrs	r2, r2, #16
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8c:	d91e      	bls.n	8005bcc <USB_EPStartXfer+0x7e4>
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	643b      	str	r3, [r7, #64]	; 0x40
 8005b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b96:	221f      	movs	r2, #31
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d102      	bne.n	8005ba2 <USB_EPStartXfer+0x7ba>
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4acd      	ldr	r2, [pc, #820]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005baa:	4694      	mov	ip, r2
 8005bac:	4463      	add	r3, ip
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	069b      	lsls	r3, r3, #26
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	49c8      	ldr	r1, [pc, #800]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005bbe:	468c      	mov	ip, r1
 8005bc0:	4463      	add	r3, ip
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	0609      	lsls	r1, r1, #24
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	e065      	b.n	8005c98 <USB_EPStartXfer+0x8b0>
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d121      	bne.n	8005c16 <USB_EPStartXfer+0x82e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4ac1      	ldr	r2, [pc, #772]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005bda:	4694      	mov	ip, r2
 8005bdc:	4463      	add	r3, ip
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	49be      	ldr	r1, [pc, #760]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005be8:	468c      	mov	ip, r1
 8005bea:	4463      	add	r3, ip
 8005bec:	49bd      	ldr	r1, [pc, #756]	; (8005ee4 <USB_EPStartXfer+0xafc>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4ab9      	ldr	r2, [pc, #740]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005bfa:	4694      	mov	ip, r2
 8005bfc:	4463      	add	r3, ip
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	49b6      	ldr	r1, [pc, #728]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c08:	468c      	mov	ip, r1
 8005c0a:	4463      	add	r3, ip
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	0609      	lsls	r1, r1, #24
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	e040      	b.n	8005c98 <USB_EPStartXfer+0x8b0>
 8005c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4013      	ands	r3, r2
 8005c22:	d002      	beq.n	8005c2a <USB_EPStartXfer+0x842>
 8005c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c26:	3301      	adds	r3, #1
 8005c28:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4aab      	ldr	r2, [pc, #684]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c32:	4694      	mov	ip, r2
 8005c34:	4463      	add	r3, ip
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3a:	069a      	lsls	r2, r3, #26
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	48a7      	ldr	r0, [pc, #668]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c44:	4684      	mov	ip, r0
 8005c46:	4463      	add	r3, ip
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	e024      	b.n	8005c98 <USB_EPStartXfer+0x8b0>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d120      	bne.n	8005c98 <USB_EPStartXfer+0x8b0>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4aa0      	ldr	r2, [pc, #640]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c5e:	4694      	mov	ip, r2
 8005c60:	4463      	add	r3, ip
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	499d      	ldr	r1, [pc, #628]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c6c:	468c      	mov	ip, r1
 8005c6e:	4463      	add	r3, ip
 8005c70:	0412      	lsls	r2, r2, #16
 8005c72:	0c12      	lsrs	r2, r2, #16
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4a98      	ldr	r2, [pc, #608]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c7e:	4694      	mov	ip, r2
 8005c80:	4463      	add	r3, ip
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c86:	041a      	lsls	r2, r3, #16
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4894      	ldr	r0, [pc, #592]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005c90:	4684      	mov	ip, r0
 8005c92:	4463      	add	r3, ip
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8005c98:	201a      	movs	r0, #26
 8005c9a:	183b      	adds	r3, r7, r0
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	8912      	ldrh	r2, [r2, #8]
 8005ca0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca8:	b29c      	uxth	r4, r3
 8005caa:	183b      	adds	r3, r7, r0
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	0023      	movs	r3, r4
 8005cb2:	f000 fd71 	bl	8006798 <USB_WritePMA>
 8005cb6:	e0aa      	b.n	8005e0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d172      	bne.n	8005da6 <USB_EPStartXfer+0x9be>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4a86      	ldr	r2, [pc, #536]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005cc8:	4694      	mov	ip, r2
 8005cca:	4463      	add	r3, ip
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4982      	ldr	r1, [pc, #520]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005cd6:	468c      	mov	ip, r1
 8005cd8:	4463      	add	r3, ip
 8005cda:	0412      	lsls	r2, r2, #16
 8005cdc:	0c12      	lsrs	r2, r2, #16
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce4:	d91e      	bls.n	8005d24 <USB_EPStartXfer+0x93c>
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	221f      	movs	r2, #31
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d102      	bne.n	8005cfa <USB_EPStartXfer+0x912>
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4a77      	ldr	r2, [pc, #476]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d02:	4694      	mov	ip, r2
 8005d04:	4463      	add	r3, ip
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	069b      	lsls	r3, r3, #26
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4972      	ldr	r1, [pc, #456]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d16:	468c      	mov	ip, r1
 8005d18:	4463      	add	r3, ip
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	0609      	lsls	r1, r1, #24
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e065      	b.n	8005df0 <USB_EPStartXfer+0xa08>
 8005d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d121      	bne.n	8005d6e <USB_EPStartXfer+0x986>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d32:	4694      	mov	ip, r2
 8005d34:	4463      	add	r3, ip
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4968      	ldr	r1, [pc, #416]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d40:	468c      	mov	ip, r1
 8005d42:	4463      	add	r3, ip
 8005d44:	4967      	ldr	r1, [pc, #412]	; (8005ee4 <USB_EPStartXfer+0xafc>)
 8005d46:	400a      	ands	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4a63      	ldr	r2, [pc, #396]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d52:	4694      	mov	ip, r2
 8005d54:	4463      	add	r3, ip
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4960      	ldr	r1, [pc, #384]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d60:	468c      	mov	ip, r1
 8005d62:	4463      	add	r3, ip
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	0609      	lsls	r1, r1, #24
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e040      	b.n	8005df0 <USB_EPStartXfer+0xa08>
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d76:	2201      	movs	r2, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d002      	beq.n	8005d82 <USB_EPStartXfer+0x99a>
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	3301      	adds	r3, #1
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4a55      	ldr	r2, [pc, #340]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d8a:	4694      	mov	ip, r2
 8005d8c:	4463      	add	r3, ip
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d92:	069a      	lsls	r2, r3, #26
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4851      	ldr	r0, [pc, #324]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005d9c:	4684      	mov	ip, r0
 8005d9e:	4463      	add	r3, ip
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e024      	b.n	8005df0 <USB_EPStartXfer+0xa08>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d120      	bne.n	8005df0 <USB_EPStartXfer+0xa08>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4a4a      	ldr	r2, [pc, #296]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005db6:	4694      	mov	ip, r2
 8005db8:	4463      	add	r3, ip
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4947      	ldr	r1, [pc, #284]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005dc4:	468c      	mov	ip, r1
 8005dc6:	4463      	add	r3, ip
 8005dc8:	0412      	lsls	r2, r2, #16
 8005dca:	0c12      	lsrs	r2, r2, #16
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005dd6:	4694      	mov	ip, r2
 8005dd8:	4463      	add	r3, ip
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	483e      	ldr	r0, [pc, #248]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005de8:	4684      	mov	ip, r0
 8005dea:	4463      	add	r3, ip
 8005dec:	430a      	orrs	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005df0:	201a      	movs	r0, #26
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	88d2      	ldrh	r2, [r2, #6]
 8005df8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6959      	ldr	r1, [r3, #20]
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	b29c      	uxth	r4, r3
 8005e02:	183b      	adds	r3, r7, r0
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	0023      	movs	r3, r4
 8005e0a:	f000 fcc5 	bl	8006798 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	18d3      	adds	r3, r2, r3
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a33      	ldr	r2, [pc, #204]	; (8005ee8 <USB_EPStartXfer+0xb00>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2210      	movs	r2, #16
 8005e24:	4053      	eors	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4053      	eors	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	18d3      	adds	r3, r2, r3
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	492b      	ldr	r1, [pc, #172]	; (8005eec <USB_EPStartXfer+0xb04>)
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f000 fb97 	bl	8006574 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	7a9b      	ldrb	r3, [r3, #10]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d000      	beq.n	8005e50 <USB_EPStartXfer+0xa68>
 8005e4e:	e090      	b.n	8005f72 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d909      	bls.n	8005e70 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	619a      	str	r2, [r3, #24]
 8005e6e:	e005      	b.n	8005e7c <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005e84:	4694      	mov	ip, r2
 8005e86:	4463      	add	r3, ip
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4913      	ldr	r1, [pc, #76]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005e92:	468c      	mov	ip, r1
 8005e94:	4463      	add	r3, ip
 8005e96:	0412      	lsls	r2, r2, #16
 8005e98:	0c12      	lsrs	r2, r2, #16
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea0:	d926      	bls.n	8005ef0 <USB_EPStartXfer+0xb08>
 8005ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eaa:	221f      	movs	r2, #31
 8005eac:	4013      	ands	r3, r2
 8005eae:	d102      	bne.n	8005eb6 <USB_EPStartXfer+0xace>
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005ebe:	4694      	mov	ip, r2
 8005ec0:	4463      	add	r3, ip
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	069b      	lsls	r3, r3, #26
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4903      	ldr	r1, [pc, #12]	; (8005ee0 <USB_EPStartXfer+0xaf8>)
 8005ed2:	468c      	mov	ip, r1
 8005ed4:	4463      	add	r3, ip
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0609      	lsls	r1, r1, #24
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	e32d      	b.n	800653c <USB_EPStartXfer+0x1154>
 8005ee0:	40009800 	.word	0x40009800
 8005ee4:	83ffffff 	.word	0x83ffffff
 8005ee8:	07ff8fbf 	.word	0x07ff8fbf
 8005eec:	00008080 	.word	0x00008080
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d121      	bne.n	8005f3a <USB_EPStartXfer+0xb52>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4ae0      	ldr	r2, [pc, #896]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005efe:	4694      	mov	ip, r2
 8005f00:	4463      	add	r3, ip
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	49dd      	ldr	r1, [pc, #884]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f0c:	468c      	mov	ip, r1
 8005f0e:	4463      	add	r3, ip
 8005f10:	49dc      	ldr	r1, [pc, #880]	; (8006284 <USB_EPStartXfer+0xe9c>)
 8005f12:	400a      	ands	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4ad8      	ldr	r2, [pc, #864]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f1e:	4694      	mov	ip, r2
 8005f20:	4463      	add	r3, ip
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	49d5      	ldr	r1, [pc, #852]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f2c:	468c      	mov	ip, r1
 8005f2e:	4463      	add	r3, ip
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	0609      	lsls	r1, r1, #24
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	e300      	b.n	800653c <USB_EPStartXfer+0x1154>
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f42:	2201      	movs	r2, #1
 8005f44:	4013      	ands	r3, r2
 8005f46:	d002      	beq.n	8005f4e <USB_EPStartXfer+0xb66>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4aca      	ldr	r2, [pc, #808]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f56:	4694      	mov	ip, r2
 8005f58:	4463      	add	r3, ip
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	069a      	lsls	r2, r3, #26
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	48c6      	ldr	r0, [pc, #792]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f68:	4684      	mov	ip, r0
 8005f6a:	4463      	add	r3, ip
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	e2e4      	b.n	800653c <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	78db      	ldrb	r3, [r3, #3]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d000      	beq.n	8005f7c <USB_EPStartXfer+0xb94>
 8005f7a:	e189      	b.n	8006290 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d000      	beq.n	8005f86 <USB_EPStartXfer+0xb9e>
 8005f84:	e078      	b.n	8006078 <USB_EPStartXfer+0xc90>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4abc      	ldr	r2, [pc, #752]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f8e:	4694      	mov	ip, r2
 8005f90:	4463      	add	r3, ip
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	49b9      	ldr	r1, [pc, #740]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005f9c:	468c      	mov	ip, r1
 8005f9e:	4463      	add	r3, ip
 8005fa0:	0412      	lsls	r2, r2, #16
 8005fa2:	0c12      	lsrs	r2, r2, #16
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b3e      	cmp	r3, #62	; 0x3e
 8005fac:	d920      	bls.n	8005ff0 <USB_EPStartXfer+0xc08>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	221f      	movs	r2, #31
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d102      	bne.n	8005fc6 <USB_EPStartXfer+0xbde>
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4aac      	ldr	r2, [pc, #688]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005fce:	4694      	mov	ip, r2
 8005fd0:	4463      	add	r3, ip
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	069b      	lsls	r3, r3, #26
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	49a7      	ldr	r1, [pc, #668]	; (8006280 <USB_EPStartXfer+0xe98>)
 8005fe2:	468c      	mov	ip, r1
 8005fe4:	4463      	add	r3, ip
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	0609      	lsls	r1, r1, #24
 8005fea:	430a      	orrs	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e069      	b.n	80060c4 <USB_EPStartXfer+0xcdc>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d121      	bne.n	800603c <USB_EPStartXfer+0xc54>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4aa0      	ldr	r2, [pc, #640]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006000:	4694      	mov	ip, r2
 8006002:	4463      	add	r3, ip
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	499c      	ldr	r1, [pc, #624]	; (8006280 <USB_EPStartXfer+0xe98>)
 800600e:	468c      	mov	ip, r1
 8006010:	4463      	add	r3, ip
 8006012:	499c      	ldr	r1, [pc, #624]	; (8006284 <USB_EPStartXfer+0xe9c>)
 8006014:	400a      	ands	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4a98      	ldr	r2, [pc, #608]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006020:	4694      	mov	ip, r2
 8006022:	4463      	add	r3, ip
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4994      	ldr	r1, [pc, #592]	; (8006280 <USB_EPStartXfer+0xe98>)
 800602e:	468c      	mov	ip, r1
 8006030:	4463      	add	r3, ip
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	0609      	lsls	r1, r1, #24
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e043      	b.n	80060c4 <USB_EPStartXfer+0xcdc>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2201      	movs	r2, #1
 800604a:	4013      	ands	r3, r2
 800604c:	d002      	beq.n	8006054 <USB_EPStartXfer+0xc6c>
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	3301      	adds	r3, #1
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4a89      	ldr	r2, [pc, #548]	; (8006280 <USB_EPStartXfer+0xe98>)
 800605c:	4694      	mov	ip, r2
 800605e:	4463      	add	r3, ip
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	069a      	lsls	r2, r3, #26
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4884      	ldr	r0, [pc, #528]	; (8006280 <USB_EPStartXfer+0xe98>)
 800606e:	4684      	mov	ip, r0
 8006070:	4463      	add	r3, ip
 8006072:	430a      	orrs	r2, r1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e025      	b.n	80060c4 <USB_EPStartXfer+0xcdc>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d121      	bne.n	80060c4 <USB_EPStartXfer+0xcdc>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4a7e      	ldr	r2, [pc, #504]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006088:	4694      	mov	ip, r2
 800608a:	4463      	add	r3, ip
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	497a      	ldr	r1, [pc, #488]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006096:	468c      	mov	ip, r1
 8006098:	4463      	add	r3, ip
 800609a:	0412      	lsls	r2, r2, #16
 800609c:	0c12      	lsrs	r2, r2, #16
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4a76      	ldr	r2, [pc, #472]	; (8006280 <USB_EPStartXfer+0xe98>)
 80060a8:	4694      	mov	ip, r2
 80060aa:	4463      	add	r3, ip
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	041a      	lsls	r2, r3, #16
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4871      	ldr	r0, [pc, #452]	; (8006280 <USB_EPStartXfer+0xe98>)
 80060bc:	4684      	mov	ip, r0
 80060be:	4463      	add	r3, ip
 80060c0:	430a      	orrs	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d000      	beq.n	80060ce <USB_EPStartXfer+0xce6>
 80060cc:	e078      	b.n	80061c0 <USB_EPStartXfer+0xdd8>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4a6a      	ldr	r2, [pc, #424]	; (8006280 <USB_EPStartXfer+0xe98>)
 80060d6:	4694      	mov	ip, r2
 80060d8:	4463      	add	r3, ip
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4967      	ldr	r1, [pc, #412]	; (8006280 <USB_EPStartXfer+0xe98>)
 80060e4:	468c      	mov	ip, r1
 80060e6:	4463      	add	r3, ip
 80060e8:	0412      	lsls	r2, r2, #16
 80060ea:	0c12      	lsrs	r2, r2, #16
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b3e      	cmp	r3, #62	; 0x3e
 80060f4:	d920      	bls.n	8006138 <USB_EPStartXfer+0xd50>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	221f      	movs	r2, #31
 8006104:	4013      	ands	r3, r2
 8006106:	d102      	bne.n	800610e <USB_EPStartXfer+0xd26>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	3b01      	subs	r3, #1
 800610c:	633b      	str	r3, [r7, #48]	; 0x30
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4a5a      	ldr	r2, [pc, #360]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006116:	4694      	mov	ip, r2
 8006118:	4463      	add	r3, ip
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	069b      	lsls	r3, r3, #26
 8006120:	431a      	orrs	r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4955      	ldr	r1, [pc, #340]	; (8006280 <USB_EPStartXfer+0xe98>)
 800612a:	468c      	mov	ip, r1
 800612c:	4463      	add	r3, ip
 800612e:	2180      	movs	r1, #128	; 0x80
 8006130:	0609      	lsls	r1, r1, #24
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
 8006136:	e069      	b.n	800620c <USB_EPStartXfer+0xe24>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d121      	bne.n	8006184 <USB_EPStartXfer+0xd9c>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4a4e      	ldr	r2, [pc, #312]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006148:	4694      	mov	ip, r2
 800614a:	4463      	add	r3, ip
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	494a      	ldr	r1, [pc, #296]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006156:	468c      	mov	ip, r1
 8006158:	4463      	add	r3, ip
 800615a:	494a      	ldr	r1, [pc, #296]	; (8006284 <USB_EPStartXfer+0xe9c>)
 800615c:	400a      	ands	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4a46      	ldr	r2, [pc, #280]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006168:	4694      	mov	ip, r2
 800616a:	4463      	add	r3, ip
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4942      	ldr	r1, [pc, #264]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006176:	468c      	mov	ip, r1
 8006178:	4463      	add	r3, ip
 800617a:	2180      	movs	r1, #128	; 0x80
 800617c:	0609      	lsls	r1, r1, #24
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e043      	b.n	800620c <USB_EPStartXfer+0xe24>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	633b      	str	r3, [r7, #48]	; 0x30
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2201      	movs	r2, #1
 8006192:	4013      	ands	r3, r2
 8006194:	d002      	beq.n	800619c <USB_EPStartXfer+0xdb4>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	3301      	adds	r3, #1
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4a37      	ldr	r2, [pc, #220]	; (8006280 <USB_EPStartXfer+0xe98>)
 80061a4:	4694      	mov	ip, r2
 80061a6:	4463      	add	r3, ip
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	069a      	lsls	r2, r3, #26
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4832      	ldr	r0, [pc, #200]	; (8006280 <USB_EPStartXfer+0xe98>)
 80061b6:	4684      	mov	ip, r0
 80061b8:	4463      	add	r3, ip
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	e025      	b.n	800620c <USB_EPStartXfer+0xe24>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d121      	bne.n	800620c <USB_EPStartXfer+0xe24>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4a2c      	ldr	r2, [pc, #176]	; (8006280 <USB_EPStartXfer+0xe98>)
 80061d0:	4694      	mov	ip, r2
 80061d2:	4463      	add	r3, ip
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4928      	ldr	r1, [pc, #160]	; (8006280 <USB_EPStartXfer+0xe98>)
 80061de:	468c      	mov	ip, r1
 80061e0:	4463      	add	r3, ip
 80061e2:	0412      	lsls	r2, r2, #16
 80061e4:	0c12      	lsrs	r2, r2, #16
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4a24      	ldr	r2, [pc, #144]	; (8006280 <USB_EPStartXfer+0xe98>)
 80061f0:	4694      	mov	ip, r2
 80061f2:	4463      	add	r3, ip
 80061f4:	6859      	ldr	r1, [r3, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	041a      	lsls	r2, r3, #16
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	481f      	ldr	r0, [pc, #124]	; (8006280 <USB_EPStartXfer+0xe98>)
 8006204:	4684      	mov	ip, r0
 8006206:	4463      	add	r3, ip
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d100      	bne.n	8006216 <USB_EPStartXfer+0xe2e>
 8006214:	e192      	b.n	800653c <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	18d3      	adds	r3, r2, r3
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	2126      	movs	r1, #38	; 0x26
 8006224:	187b      	adds	r3, r7, r1
 8006226:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006228:	187b      	adds	r3, r7, r1
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	01db      	lsls	r3, r3, #7
 8006230:	4013      	ands	r3, r2
 8006232:	d004      	beq.n	800623e <USB_EPStartXfer+0xe56>
 8006234:	187b      	adds	r3, r7, r1
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2240      	movs	r2, #64	; 0x40
 800623a:	4013      	ands	r3, r2
 800623c:	d10d      	bne.n	800625a <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800623e:	2126      	movs	r1, #38	; 0x26
 8006240:	187b      	adds	r3, r7, r1
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800624a:	d000      	beq.n	800624e <USB_EPStartXfer+0xe66>
 800624c:	e176      	b.n	800653c <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800624e:	187b      	adds	r3, r7, r1
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	4013      	ands	r3, r2
 8006256:	d000      	beq.n	800625a <USB_EPStartXfer+0xe72>
 8006258:	e170      	b.n	800653c <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a08      	ldr	r2, [pc, #32]	; (8006288 <USB_EPStartXfer+0xea0>)
 8006268:	4013      	ands	r3, r2
 800626a:	623b      	str	r3, [r7, #32]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	18d3      	adds	r3, r2, r3
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	4904      	ldr	r1, [pc, #16]	; (800628c <USB_EPStartXfer+0xea4>)
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e15d      	b.n	800653c <USB_EPStartXfer+0x1154>
 8006280:	40009800 	.word	0x40009800
 8006284:	83ffffff 	.word	0x83ffffff
 8006288:	07ff8f8f 	.word	0x07ff8f8f
 800628c:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	78db      	ldrb	r3, [r3, #3]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d000      	beq.n	800629a <USB_EPStartXfer+0xeb2>
 8006298:	e14e      	b.n	8006538 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d909      	bls.n	80062ba <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	619a      	str	r2, [r3, #24]
 80062b8:	e005      	b.n	80062c6 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d172      	bne.n	80063b4 <USB_EPStartXfer+0xfcc>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4aaa      	ldr	r2, [pc, #680]	; (8006580 <USB_EPStartXfer+0x1198>)
 80062d6:	4694      	mov	ip, r2
 80062d8:	4463      	add	r3, ip
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	49a7      	ldr	r1, [pc, #668]	; (8006580 <USB_EPStartXfer+0x1198>)
 80062e4:	468c      	mov	ip, r1
 80062e6:	4463      	add	r3, ip
 80062e8:	0412      	lsls	r2, r2, #16
 80062ea:	0c12      	lsrs	r2, r2, #16
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f0:	2b3e      	cmp	r3, #62	; 0x3e
 80062f2:	d91e      	bls.n	8006332 <USB_EPStartXfer+0xf4a>
 80062f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f6:	095b      	lsrs	r3, r3, #5
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fc:	221f      	movs	r2, #31
 80062fe:	4013      	ands	r3, r2
 8006300:	d102      	bne.n	8006308 <USB_EPStartXfer+0xf20>
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	3b01      	subs	r3, #1
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4a9c      	ldr	r2, [pc, #624]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006310:	4694      	mov	ip, r2
 8006312:	4463      	add	r3, ip
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	069b      	lsls	r3, r3, #26
 800631a:	431a      	orrs	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4997      	ldr	r1, [pc, #604]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006324:	468c      	mov	ip, r1
 8006326:	4463      	add	r3, ip
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	0609      	lsls	r1, r1, #24
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e065      	b.n	80063fe <USB_EPStartXfer+0x1016>
 8006332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006334:	2b00      	cmp	r3, #0
 8006336:	d121      	bne.n	800637c <USB_EPStartXfer+0xf94>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4a90      	ldr	r2, [pc, #576]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006340:	4694      	mov	ip, r2
 8006342:	4463      	add	r3, ip
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	498c      	ldr	r1, [pc, #560]	; (8006580 <USB_EPStartXfer+0x1198>)
 800634e:	468c      	mov	ip, r1
 8006350:	4463      	add	r3, ip
 8006352:	498c      	ldr	r1, [pc, #560]	; (8006584 <USB_EPStartXfer+0x119c>)
 8006354:	400a      	ands	r2, r1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4a88      	ldr	r2, [pc, #544]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006360:	4694      	mov	ip, r2
 8006362:	4463      	add	r3, ip
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4984      	ldr	r1, [pc, #528]	; (8006580 <USB_EPStartXfer+0x1198>)
 800636e:	468c      	mov	ip, r1
 8006370:	4463      	add	r3, ip
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	0609      	lsls	r1, r1, #24
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e040      	b.n	80063fe <USB_EPStartXfer+0x1016>
 800637c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006384:	2201      	movs	r2, #1
 8006386:	4013      	ands	r3, r2
 8006388:	d002      	beq.n	8006390 <USB_EPStartXfer+0xfa8>
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	3301      	adds	r3, #1
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4a7a      	ldr	r2, [pc, #488]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006398:	4694      	mov	ip, r2
 800639a:	4463      	add	r3, ip
 800639c:	6819      	ldr	r1, [r3, #0]
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	069a      	lsls	r2, r3, #26
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4875      	ldr	r0, [pc, #468]	; (8006580 <USB_EPStartXfer+0x1198>)
 80063aa:	4684      	mov	ip, r0
 80063ac:	4463      	add	r3, ip
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e024      	b.n	80063fe <USB_EPStartXfer+0x1016>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d120      	bne.n	80063fe <USB_EPStartXfer+0x1016>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4a6f      	ldr	r2, [pc, #444]	; (8006580 <USB_EPStartXfer+0x1198>)
 80063c4:	4694      	mov	ip, r2
 80063c6:	4463      	add	r3, ip
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	496b      	ldr	r1, [pc, #428]	; (8006580 <USB_EPStartXfer+0x1198>)
 80063d2:	468c      	mov	ip, r1
 80063d4:	4463      	add	r3, ip
 80063d6:	0412      	lsls	r2, r2, #16
 80063d8:	0c12      	lsrs	r2, r2, #16
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4a67      	ldr	r2, [pc, #412]	; (8006580 <USB_EPStartXfer+0x1198>)
 80063e4:	4694      	mov	ip, r2
 80063e6:	4463      	add	r3, ip
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	041a      	lsls	r2, r3, #16
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4862      	ldr	r0, [pc, #392]	; (8006580 <USB_EPStartXfer+0x1198>)
 80063f6:	4684      	mov	ip, r0
 80063f8:	4463      	add	r3, ip
 80063fa:	430a      	orrs	r2, r1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d172      	bne.n	80064ec <USB_EPStartXfer+0x1104>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <USB_EPStartXfer+0x1198>)
 800640e:	4694      	mov	ip, r2
 8006410:	4463      	add	r3, ip
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4959      	ldr	r1, [pc, #356]	; (8006580 <USB_EPStartXfer+0x1198>)
 800641c:	468c      	mov	ip, r1
 800641e:	4463      	add	r3, ip
 8006420:	0412      	lsls	r2, r2, #16
 8006422:	0c12      	lsrs	r2, r2, #16
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006428:	2b3e      	cmp	r3, #62	; 0x3e
 800642a:	d91e      	bls.n	800646a <USB_EPStartXfer+0x1082>
 800642c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
 8006432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006434:	221f      	movs	r2, #31
 8006436:	4013      	ands	r3, r2
 8006438:	d102      	bne.n	8006440 <USB_EPStartXfer+0x1058>
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	3b01      	subs	r3, #1
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	4a4e      	ldr	r2, [pc, #312]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006448:	4694      	mov	ip, r2
 800644a:	4463      	add	r3, ip
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	069b      	lsls	r3, r3, #26
 8006452:	431a      	orrs	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4949      	ldr	r1, [pc, #292]	; (8006580 <USB_EPStartXfer+0x1198>)
 800645c:	468c      	mov	ip, r1
 800645e:	4463      	add	r3, ip
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	0609      	lsls	r1, r1, #24
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	e068      	b.n	800653c <USB_EPStartXfer+0x1154>
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	2b00      	cmp	r3, #0
 800646e:	d121      	bne.n	80064b4 <USB_EPStartXfer+0x10cc>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	4a42      	ldr	r2, [pc, #264]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006478:	4694      	mov	ip, r2
 800647a:	4463      	add	r3, ip
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	493e      	ldr	r1, [pc, #248]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006486:	468c      	mov	ip, r1
 8006488:	4463      	add	r3, ip
 800648a:	493e      	ldr	r1, [pc, #248]	; (8006584 <USB_EPStartXfer+0x119c>)
 800648c:	400a      	ands	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4a3a      	ldr	r2, [pc, #232]	; (8006580 <USB_EPStartXfer+0x1198>)
 8006498:	4694      	mov	ip, r2
 800649a:	4463      	add	r3, ip
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4936      	ldr	r1, [pc, #216]	; (8006580 <USB_EPStartXfer+0x1198>)
 80064a6:	468c      	mov	ip, r1
 80064a8:	4463      	add	r3, ip
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	0609      	lsls	r1, r1, #24
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	e043      	b.n	800653c <USB_EPStartXfer+0x1154>
 80064b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064bc:	2201      	movs	r2, #1
 80064be:	4013      	ands	r3, r2
 80064c0:	d002      	beq.n	80064c8 <USB_EPStartXfer+0x10e0>
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	3301      	adds	r3, #1
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4a2c      	ldr	r2, [pc, #176]	; (8006580 <USB_EPStartXfer+0x1198>)
 80064d0:	4694      	mov	ip, r2
 80064d2:	4463      	add	r3, ip
 80064d4:	6859      	ldr	r1, [r3, #4]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	069a      	lsls	r2, r3, #26
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4827      	ldr	r0, [pc, #156]	; (8006580 <USB_EPStartXfer+0x1198>)
 80064e2:	4684      	mov	ip, r0
 80064e4:	4463      	add	r3, ip
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	e027      	b.n	800653c <USB_EPStartXfer+0x1154>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d123      	bne.n	800653c <USB_EPStartXfer+0x1154>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4a21      	ldr	r2, [pc, #132]	; (8006580 <USB_EPStartXfer+0x1198>)
 80064fc:	4694      	mov	ip, r2
 80064fe:	4463      	add	r3, ip
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	491d      	ldr	r1, [pc, #116]	; (8006580 <USB_EPStartXfer+0x1198>)
 800650a:	468c      	mov	ip, r1
 800650c:	4463      	add	r3, ip
 800650e:	0412      	lsls	r2, r2, #16
 8006510:	0c12      	lsrs	r2, r2, #16
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4a19      	ldr	r2, [pc, #100]	; (8006580 <USB_EPStartXfer+0x1198>)
 800651c:	4694      	mov	ip, r2
 800651e:	4463      	add	r3, ip
 8006520:	6859      	ldr	r1, [r3, #4]
 8006522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006524:	041a      	lsls	r2, r3, #16
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4814      	ldr	r0, [pc, #80]	; (8006580 <USB_EPStartXfer+0x1198>)
 800652e:	4684      	mov	ip, r0
 8006530:	4463      	add	r3, ip
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	e001      	b.n	800653c <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e01c      	b.n	8006576 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	18d3      	adds	r3, r2, r3
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <USB_EPStartXfer+0x11a0>)
 800654a:	4013      	ands	r3, r2
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	0152      	lsls	r2, r2, #5
 8006554:	4053      	eors	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2280      	movs	r2, #128	; 0x80
 800655c:	0192      	lsls	r2, r2, #6
 800655e:	4053      	eors	r3, r2
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	18d3      	adds	r3, r2, r3
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	4907      	ldr	r1, [pc, #28]	; (800658c <USB_EPStartXfer+0x11a4>)
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	0018      	movs	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	b017      	add	sp, #92	; 0x5c
 800657c:	bd90      	pop	{r4, r7, pc}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	40009800 	.word	0x40009800
 8006584:	83ffffff 	.word	0x83ffffff
 8006588:	07ffbf8f 	.word	0x07ffbf8f
 800658c:	00008080 	.word	0x00008080

08006590 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	18d3      	adds	r3, r2, r3
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a16      	ldr	r2, [pc, #88]	; (8006608 <USB_EPSetStall+0x78>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2210      	movs	r2, #16
 80065b8:	4053      	eors	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	18d3      	adds	r3, r2, r3
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4910      	ldr	r1, [pc, #64]	; (800660c <USB_EPSetStall+0x7c>)
 80065ca:	430a      	orrs	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e016      	b.n	80065fe <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	18d3      	adds	r3, r2, r3
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <USB_EPSetStall+0x80>)
 80065de:	4013      	ands	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	0152      	lsls	r2, r2, #5
 80065e8:	4053      	eors	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	18d3      	adds	r3, r2, r3
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4904      	ldr	r1, [pc, #16]	; (800660c <USB_EPSetStall+0x7c>)
 80065fa:	430a      	orrs	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b004      	add	sp, #16
 8006606:	bd80      	pop	{r7, pc}
 8006608:	07ff8fbf 	.word	0x07ff8fbf
 800660c:	00008080 	.word	0x00008080
 8006610:	07ffbf8f 	.word	0x07ffbf8f

08006614 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	7a9b      	ldrb	r3, [r3, #10]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d000      	beq.n	8006628 <USB_EPClearStall+0x14>
 8006626:	e075      	b.n	8006714 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d037      	beq.n	80066a0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	18d3      	adds	r3, r2, r3
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2240      	movs	r2, #64	; 0x40
 8006642:	4013      	ands	r3, r2
 8006644:	d011      	beq.n	800666a <USB_EPClearStall+0x56>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	18d3      	adds	r3, r2, r3
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a33      	ldr	r2, [pc, #204]	; (8006720 <USB_EPClearStall+0x10c>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	18d3      	adds	r3, r2, r3
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	492f      	ldr	r1, [pc, #188]	; (8006724 <USB_EPClearStall+0x110>)
 8006666:	430a      	orrs	r2, r1
 8006668:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	78db      	ldrb	r3, [r3, #3]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d050      	beq.n	8006714 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	18d3      	adds	r3, r2, r3
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <USB_EPClearStall+0x114>)
 8006680:	4013      	ands	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2220      	movs	r2, #32
 8006688:	4053      	eors	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	18d3      	adds	r3, r2, r3
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	4924      	ldr	r1, [pc, #144]	; (800672c <USB_EPClearStall+0x118>)
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e039      	b.n	8006714 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	18d3      	adds	r3, r2, r3
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	01db      	lsls	r3, r3, #7
 80066b4:	4013      	ands	r3, r2
 80066b6:	d011      	beq.n	80066dc <USB_EPClearStall+0xc8>
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	18d3      	adds	r3, r2, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a16      	ldr	r2, [pc, #88]	; (8006720 <USB_EPClearStall+0x10c>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	18d3      	adds	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4916      	ldr	r1, [pc, #88]	; (8006730 <USB_EPClearStall+0x11c>)
 80066d8:	430a      	orrs	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	18d3      	adds	r3, r2, r3
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a12      	ldr	r2, [pc, #72]	; (8006734 <USB_EPClearStall+0x120>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	0152      	lsls	r2, r2, #5
 80066f4:	4053      	eors	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2280      	movs	r2, #128	; 0x80
 80066fc:	0192      	lsls	r2, r2, #6
 80066fe:	4053      	eors	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	18d3      	adds	r3, r2, r3
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4907      	ldr	r1, [pc, #28]	; (800672c <USB_EPClearStall+0x118>)
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	0018      	movs	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	b008      	add	sp, #32
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	07ff8f8f 	.word	0x07ff8f8f
 8006724:	000080c0 	.word	0x000080c0
 8006728:	07ff8fbf 	.word	0x07ff8fbf
 800672c:	00008080 	.word	0x00008080
 8006730:	0000c080 	.word	0x0000c080
 8006734:	07ffbf8f 	.word	0x07ffbf8f

08006738 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	000a      	movs	r2, r1
 8006742:	1cfb      	adds	r3, r7, #3
 8006744:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006746:	1cfb      	adds	r3, r7, #3
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	0018      	movs	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	b002      	add	sp, #8
 800675c:	bd80      	pop	{r7, pc}

0800675e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	0212      	lsls	r2, r2, #8
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b002      	add	sp, #8
 800677c:	bd80      	pop	{r7, pc}

0800677e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b004      	add	sp, #16
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	0019      	movs	r1, r3
 80067a4:	1dbb      	adds	r3, r7, #6
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	1d3b      	adds	r3, r7, #4
 80067aa:	1c0a      	adds	r2, r1, #0
 80067ac:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80067ae:	1d3b      	adds	r3, r7, #4
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	3303      	adds	r3, #3
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80067b8:	2016      	movs	r0, #22
 80067ba:	183b      	adds	r3, r7, r0
 80067bc:	1d3a      	adds	r2, r7, #4
 80067be:	8812      	ldrh	r2, [r2, #0]
 80067c0:	2103      	movs	r1, #3
 80067c2:	400a      	ands	r2, r1
 80067c4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80067ca:	183b      	adds	r3, r7, r0
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <USB_WritePMA+0x40>
  {
    NbWords--;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80067d8:	1dbb      	adds	r3, r7, #6
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	4a28      	ldr	r2, [pc, #160]	; (8006880 <USB_WritePMA+0xe8>)
 80067de:	4694      	mov	ip, r2
 80067e0:	4463      	add	r3, ip
 80067e2:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	e01f      	b.n	800682a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	7859      	ldrb	r1, [r3, #1]
 80067f0:	0209      	lsls	r1, r1, #8
 80067f2:	430a      	orrs	r2, r1
 80067f4:	7899      	ldrb	r1, [r3, #2]
 80067f6:	0409      	lsls	r1, r1, #16
 80067f8:	430a      	orrs	r2, r1
 80067fa:	78db      	ldrb	r3, [r3, #3]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	4313      	orrs	r3, r2
 8006800:	001a      	movs	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3304      	adds	r3, #4
 800680a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	3301      	adds	r3, #1
 8006810:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3301      	adds	r3, #1
 8006816:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3301      	adds	r3, #1
 800681c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3301      	adds	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3b01      	subs	r3, #1
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1dc      	bne.n	80067ea <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8006830:	2316      	movs	r3, #22
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01e      	beq.n	8006878 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	001a      	movs	r2, r3
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	409a      	lsls	r2, r3
 800684a:	0013      	movs	r3, r2
 800684c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684e:	4313      	orrs	r3, r2
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	3301      	adds	r3, #1
 8006856:	623b      	str	r3, [r7, #32]
      pBuf++;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3301      	adds	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800685e:	2116      	movs	r1, #22
 8006860:	187b      	adds	r3, r7, r1
 8006862:	881a      	ldrh	r2, [r3, #0]
 8006864:	187b      	adds	r3, r7, r1
 8006866:	3a01      	subs	r2, #1
 8006868:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800686a:	187b      	adds	r3, r7, r1
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	601a      	str	r2, [r3, #0]
  }
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b00a      	add	sp, #40	; 0x28
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40009800 	.word	0x40009800

08006884 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b08b      	sub	sp, #44	; 0x2c
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	0019      	movs	r1, r3
 8006890:	1dbb      	adds	r3, r7, #6
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	1c0a      	adds	r2, r1, #0
 8006898:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	3303      	adds	r3, #3
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80068a4:	201a      	movs	r0, #26
 80068a6:	183b      	adds	r3, r7, r0
 80068a8:	1d3a      	adds	r2, r7, #4
 80068aa:	8812      	ldrh	r2, [r2, #0]
 80068ac:	2103      	movs	r1, #3
 80068ae:	400a      	ands	r2, r1
 80068b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80068b6:	1dbb      	adds	r3, r7, #6
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	4a39      	ldr	r2, [pc, #228]	; (80069a0 <USB_ReadPMA+0x11c>)
 80068bc:	4694      	mov	ip, r2
 80068be:	4463      	add	r3, ip
 80068c0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80068c2:	183b      	adds	r3, r7, r0
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	e03c      	b.n	8006950 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	21ff      	movs	r1, #255	; 0xff
 80068de:	4011      	ands	r1, r2
 80068e0:	000c      	movs	r4, r1
 80068e2:	7819      	ldrb	r1, [r3, #0]
 80068e4:	2000      	movs	r0, #0
 80068e6:	4001      	ands	r1, r0
 80068e8:	1c08      	adds	r0, r1, #0
 80068ea:	1c21      	adds	r1, r4, #0
 80068ec:	4301      	orrs	r1, r0
 80068ee:	7019      	strb	r1, [r3, #0]
 80068f0:	0a11      	lsrs	r1, r2, #8
 80068f2:	20ff      	movs	r0, #255	; 0xff
 80068f4:	4001      	ands	r1, r0
 80068f6:	000c      	movs	r4, r1
 80068f8:	7859      	ldrb	r1, [r3, #1]
 80068fa:	2000      	movs	r0, #0
 80068fc:	4001      	ands	r1, r0
 80068fe:	1c08      	adds	r0, r1, #0
 8006900:	1c21      	adds	r1, r4, #0
 8006902:	4301      	orrs	r1, r0
 8006904:	7059      	strb	r1, [r3, #1]
 8006906:	0c11      	lsrs	r1, r2, #16
 8006908:	20ff      	movs	r0, #255	; 0xff
 800690a:	4001      	ands	r1, r0
 800690c:	000c      	movs	r4, r1
 800690e:	7899      	ldrb	r1, [r3, #2]
 8006910:	2000      	movs	r0, #0
 8006912:	4001      	ands	r1, r0
 8006914:	1c08      	adds	r0, r1, #0
 8006916:	1c21      	adds	r1, r4, #0
 8006918:	4301      	orrs	r1, r0
 800691a:	7099      	strb	r1, [r3, #2]
 800691c:	0e10      	lsrs	r0, r2, #24
 800691e:	78da      	ldrb	r2, [r3, #3]
 8006920:	2100      	movs	r1, #0
 8006922:	400a      	ands	r2, r1
 8006924:	1c11      	adds	r1, r2, #0
 8006926:	1c02      	adds	r2, r0, #0
 8006928:	430a      	orrs	r2, r1
 800692a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	3304      	adds	r3, #4
 8006930:	623b      	str	r3, [r7, #32]
    pBuf++;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	3301      	adds	r3, #1
 8006936:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	3301      	adds	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	3301      	adds	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	3b01      	subs	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1bf      	bne.n	80068d6 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8006956:	231a      	movs	r3, #26
 8006958:	18fb      	adds	r3, r7, r3
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	b2db      	uxtb	r3, r3
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	40da      	lsrs	r2, r3
 8006970:	0013      	movs	r3, r2
 8006972:	b2da      	uxtb	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	701a      	strb	r2, [r3, #0]
      count++;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	3301      	adds	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	3301      	adds	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8006984:	211a      	movs	r1, #26
 8006986:	187b      	adds	r3, r7, r1
 8006988:	881a      	ldrh	r2, [r3, #0]
 800698a:	187b      	adds	r3, r7, r1
 800698c:	3a01      	subs	r2, #1
 800698e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8006990:	187b      	adds	r3, r7, r1
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <USB_ReadPMA+0xe2>
  }
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b00b      	add	sp, #44	; 0x2c
 800699e:	bd90      	pop	{r4, r7, pc}
 80069a0:	40009800 	.word	0x40009800

080069a4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	000a      	movs	r2, r1
 80069ae:	1cfb      	adds	r3, r7, #3
 80069b0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80069b2:	201c      	movs	r0, #28
 80069b4:	f002 fd94 	bl	80094e0 <USBD_static_malloc>
 80069b8:	0003      	movs	r3, r0
 80069ba:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <USBD_CUSTOM_HID_Init+0x34>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	23b5      	movs	r3, #181	; 0xb5
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	58d2      	ldr	r2, [r2, r3]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	32b0      	adds	r2, #176	; 0xb0
 80069ce:	0092      	lsls	r2, r2, #2
 80069d0:	2100      	movs	r1, #0
 80069d2:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 80069d4:	2302      	movs	r3, #2
 80069d6:	e098      	b.n	8006b0a <USBD_CUSTOM_HID_Init+0x166>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	23b5      	movs	r3, #181	; 0xb5
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	58d2      	ldr	r2, [r2, r3]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	32b0      	adds	r2, #176	; 0xb0
 80069e4:	0092      	lsls	r2, r2, #2
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	23b5      	movs	r3, #181	; 0xb5
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	58d2      	ldr	r2, [r2, r3]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32b0      	adds	r2, #176	; 0xb0
 80069f6:	0092      	lsls	r2, r2, #2
 80069f8:	58d1      	ldr	r1, [r2, r3]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	23af      	movs	r3, #175	; 0xaf
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	50d1      	str	r1, [r2, r3]
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7c1b      	ldrb	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11e      	bne.n	8006a48 <USBD_CUSTOM_HID_Init+0xa4>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006a0a:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <USBD_CUSTOM_HID_Init+0x170>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	001a      	movs	r2, r3
 8006a10:	230f      	movs	r3, #15
 8006a12:	401a      	ands	r2, r3
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	0013      	movs	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	18cb      	adds	r3, r1, r3
 8006a20:	3326      	adds	r3, #38	; 0x26
 8006a22:	2205      	movs	r2, #5
 8006a24:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006a26:	4b3c      	ldr	r3, [pc, #240]	; (8006b18 <USBD_CUSTOM_HID_Init+0x174>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	230f      	movs	r3, #15
 8006a2e:	401a      	ands	r2, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	23b3      	movs	r3, #179	; 0xb3
 8006a34:	0059      	lsls	r1, r3, #1
 8006a36:	0013      	movs	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	18c3      	adds	r3, r0, r3
 8006a40:	185b      	adds	r3, r3, r1
 8006a42:	2205      	movs	r2, #5
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	e01d      	b.n	8006a84 <USBD_CUSTOM_HID_Init+0xe0>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <USBD_CUSTOM_HID_Init+0x170>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	230f      	movs	r3, #15
 8006a50:	401a      	ands	r2, r3
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	0013      	movs	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	189b      	adds	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	18cb      	adds	r3, r1, r3
 8006a5e:	3326      	adds	r3, #38	; 0x26
 8006a60:	2205      	movs	r2, #5
 8006a62:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006a64:	4b2c      	ldr	r3, [pc, #176]	; (8006b18 <USBD_CUSTOM_HID_Init+0x174>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	001a      	movs	r2, r3
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	401a      	ands	r2, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	23b3      	movs	r3, #179	; 0xb3
 8006a72:	0059      	lsls	r1, r3, #1
 8006a74:	0013      	movs	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	18c3      	adds	r3, r0, r3
 8006a7e:	185b      	adds	r3, r3, r1
 8006a80:	2205      	movs	r2, #5
 8006a82:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006a84:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <USBD_CUSTOM_HID_Init+0x170>)
 8006a86:	7819      	ldrb	r1, [r3, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	f002 fb78 	bl	8009182 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <USBD_CUSTOM_HID_Init+0x170>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	001a      	movs	r2, r3
 8006a98:	230f      	movs	r3, #15
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	0013      	movs	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	18cb      	adds	r3, r1, r3
 8006aa8:	3324      	adds	r3, #36	; 0x24
 8006aaa:	2201      	movs	r2, #1
 8006aac:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006aae:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <USBD_CUSTOM_HID_Init+0x174>)
 8006ab0:	7819      	ldrb	r1, [r3, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	f002 fb63 	bl	8009182 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006abc:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <USBD_CUSTOM_HID_Init+0x174>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	230f      	movs	r3, #15
 8006ac4:	401a      	ands	r2, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	23b2      	movs	r3, #178	; 0xb2
 8006aca:	0059      	lsls	r1, r3, #1
 8006acc:	0013      	movs	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	18c3      	adds	r3, r0, r3
 8006ad6:	185b      	adds	r3, r3, r1
 8006ad8:	2201      	movs	r2, #1
 8006ada:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	23b5      	movs	r3, #181	; 0xb5
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	58d3      	ldr	r3, [r2, r3]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	33b0      	adds	r3, #176	; 0xb0
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	3304      	adds	r3, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006afa:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <USBD_CUSTOM_HID_Init+0x174>)
 8006afc:	7819      	ldrb	r1, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	2308      	movs	r3, #8
 8006b04:	f002 fc81 	bl	800940a <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b004      	add	sp, #16
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	2000008a 	.word	0x2000008a
 8006b18:	2000008b 	.word	0x2000008b

08006b1c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	000a      	movs	r2, r1
 8006b26:	1cfb      	adds	r3, r7, #3
 8006b28:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <USBD_CUSTOM_HID_DeInit+0x10c>)
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0011      	movs	r1, r2
 8006b32:	0018      	movs	r0, r3
 8006b34:	f002 fb5c 	bl	80091f0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006b38:	4b3b      	ldr	r3, [pc, #236]	; (8006c28 <USBD_CUSTOM_HID_DeInit+0x10c>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	230f      	movs	r3, #15
 8006b40:	401a      	ands	r2, r3
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	0013      	movs	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	189b      	adds	r3, r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	18cb      	adds	r3, r1, r3
 8006b4e:	3324      	adds	r3, #36	; 0x24
 8006b50:	2200      	movs	r2, #0
 8006b52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006b54:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <USBD_CUSTOM_HID_DeInit+0x10c>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	001a      	movs	r2, r3
 8006b5a:	230f      	movs	r3, #15
 8006b5c:	401a      	ands	r2, r3
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	0013      	movs	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	189b      	adds	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	18cb      	adds	r3, r1, r3
 8006b6a:	3326      	adds	r3, #38	; 0x26
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006b70:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <USBD_CUSTOM_HID_DeInit+0x110>)
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0011      	movs	r1, r2
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f002 fb39 	bl	80091f0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006b7e:	4b2b      	ldr	r3, [pc, #172]	; (8006c2c <USBD_CUSTOM_HID_DeInit+0x110>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	001a      	movs	r2, r3
 8006b84:	230f      	movs	r3, #15
 8006b86:	401a      	ands	r2, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	23b2      	movs	r3, #178	; 0xb2
 8006b8c:	0059      	lsls	r1, r3, #1
 8006b8e:	0013      	movs	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	18c3      	adds	r3, r0, r3
 8006b98:	185b      	adds	r3, r3, r1
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <USBD_CUSTOM_HID_DeInit+0x110>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	230f      	movs	r3, #15
 8006ba6:	401a      	ands	r2, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	23b3      	movs	r3, #179	; 0xb3
 8006bac:	0059      	lsls	r1, r3, #1
 8006bae:	0013      	movs	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	18c3      	adds	r3, r0, r3
 8006bb8:	185b      	adds	r3, r3, r1
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	23b5      	movs	r3, #181	; 0xb5
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	58d2      	ldr	r2, [r2, r3]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32b0      	adds	r2, #176	; 0xb0
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d024      	beq.n	8006c1c <USBD_CUSTOM_HID_DeInit+0x100>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	23b5      	movs	r3, #181	; 0xb5
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	58d3      	ldr	r3, [r2, r3]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	33b0      	adds	r3, #176	; 0xb0
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	3304      	adds	r3, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	23b5      	movs	r3, #181	; 0xb5
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	58d2      	ldr	r2, [r2, r3]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32b0      	adds	r2, #176	; 0xb0
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	58d3      	ldr	r3, [r2, r3]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f002 fc7c 	bl	80094f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	23b5      	movs	r3, #181	; 0xb5
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	58d2      	ldr	r2, [r2, r3]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	32b0      	adds	r2, #176	; 0xb0
 8006c0c:	0092      	lsls	r2, r2, #2
 8006c0e:	2100      	movs	r1, #0
 8006c10:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	23af      	movs	r3, #175	; 0xaf
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	2100      	movs	r1, #0
 8006c1a:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	0018      	movs	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b002      	add	sp, #8
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	2000008a 	.word	0x2000008a
 8006c2c:	2000008b 	.word	0x2000008b

08006c30 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	23b5      	movs	r3, #181	; 0xb5
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	58d2      	ldr	r2, [r2, r3]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	32b0      	adds	r2, #176	; 0xb0
 8006c46:	0092      	lsls	r2, r2, #2
 8006c48:	58d3      	ldr	r3, [r2, r3]
 8006c4a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006c4c:	231e      	movs	r3, #30
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	2200      	movs	r2, #0
 8006c52:	801a      	strh	r2, [r3, #0]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006c58:	230e      	movs	r3, #14
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c60:	2317      	movs	r3, #23
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]

  if (hhid == NULL)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <USBD_CUSTOM_HID_Setup+0x42>
  {
    return (uint8_t)USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e0fb      	b.n	8006e6a <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	001a      	movs	r2, r3
 8006c78:	2360      	movs	r3, #96	; 0x60
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d04c      	beq.n	8006d18 <USBD_CUSTOM_HID_Setup+0xe8>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d000      	beq.n	8006c84 <USBD_CUSTOM_HID_Setup+0x54>
 8006c82:	e0e4      	b.n	8006e4e <USBD_CUSTOM_HID_Setup+0x21e>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b0b      	cmp	r3, #11
 8006c8a:	d839      	bhi.n	8006d00 <USBD_CUSTOM_HID_Setup+0xd0>
 8006c8c:	009a      	lsls	r2, r3, #2
 8006c8e:	4b79      	ldr	r3, [pc, #484]	; (8006e74 <USBD_CUSTOM_HID_Setup+0x244>)
 8006c90:	18d3      	adds	r3, r2, r3
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	609a      	str	r2, [r3, #8]
          break;
 8006ca2:	e038      	b.n	8006d16 <USBD_CUSTOM_HID_Setup+0xe6>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f001 fea4 	bl	80089fc <USBD_CtlSendData>
          break;
 8006cb4:	e02f      	b.n	8006d16 <USBD_CUSTOM_HID_Setup+0xe6>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	60da      	str	r2, [r3, #12]
          break;
 8006cc6:	e026      	b.n	8006d16 <USBD_CUSTOM_HID_Setup+0xe6>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	0019      	movs	r1, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f001 fe92 	bl	80089fc <USBD_CtlSendData>
          break;
 8006cd8:	e01d      	b.n	8006d16 <USBD_CUSTOM_HID_Setup+0xe6>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006ce0:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	1c1a      	adds	r2, r3, #0
 8006ce8:	b293      	uxth	r3, r2
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d901      	bls.n	8006cf2 <USBD_CUSTOM_HID_Setup+0xc2>
 8006cee:	2308      	movs	r3, #8
 8006cf0:	1c1a      	adds	r2, r3, #0
 8006cf2:	b293      	uxth	r3, r2
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006cf4:	001a      	movs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f001 feac 	bl	8008a56 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006cfe:	e00a      	b.n	8006d16 <USBD_CUSTOM_HID_Setup+0xe6>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0011      	movs	r1, r2
 8006d06:	0018      	movs	r0, r3
 8006d08:	f001 fdf0 	bl	80088ec <USBD_CtlError>
          ret = USBD_FAIL;
 8006d0c:	2317      	movs	r3, #23
 8006d0e:	18fb      	adds	r3, r7, r3
 8006d10:	2203      	movs	r2, #3
 8006d12:	701a      	strb	r2, [r3, #0]
          break;
 8006d14:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006d16:	e0a5      	b.n	8006e64 <USBD_CUSTOM_HID_Setup+0x234>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b0b      	cmp	r3, #11
 8006d1e:	d900      	bls.n	8006d22 <USBD_CUSTOM_HID_Setup+0xf2>
 8006d20:	e088      	b.n	8006e34 <USBD_CUSTOM_HID_Setup+0x204>
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	4b54      	ldr	r3, [pc, #336]	; (8006e78 <USBD_CUSTOM_HID_Setup+0x248>)
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	23a7      	movs	r3, #167	; 0xa7
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	5cd3      	ldrb	r3, [r2, r3]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d107      	bne.n	8006d4a <USBD_CUSTOM_HID_Setup+0x11a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d3a:	230e      	movs	r3, #14
 8006d3c:	18f9      	adds	r1, r7, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	0018      	movs	r0, r3
 8006d44:	f001 fe5a 	bl	80089fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d48:	e080      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>
            USBD_CtlError(pdev, req);
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0011      	movs	r1, r2
 8006d50:	0018      	movs	r0, r3
 8006d52:	f001 fdcb 	bl	80088ec <USBD_CtlError>
            ret = USBD_FAIL;
 8006d56:	2317      	movs	r3, #23
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	701a      	strb	r2, [r3, #0]
          break;
 8006d5e:	e075      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b22      	cmp	r3, #34	; 0x22
 8006d6a:	d115      	bne.n	8006d98 <USBD_CUSTOM_HID_Setup+0x168>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	221e      	movs	r2, #30
 8006d72:	18ba      	adds	r2, r7, r2
 8006d74:	b299      	uxth	r1, r3
 8006d76:	2903      	cmp	r1, #3
 8006d78:	d900      	bls.n	8006d7c <USBD_CUSTOM_HID_Setup+0x14c>
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	23b5      	movs	r3, #181	; 0xb5
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	58d3      	ldr	r3, [r2, r3]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	33b0      	adds	r3, #176	; 0xb0
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	18d3      	adds	r3, r2, r3
 8006d8e:	3304      	adds	r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e010      	b.n	8006dba <USBD_CUSTOM_HID_Setup+0x18a>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b21      	cmp	r3, #33	; 0x21
 8006da2:	d10a      	bne.n	8006dba <USBD_CUSTOM_HID_Setup+0x18a>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006da4:	4b35      	ldr	r3, [pc, #212]	; (8006e7c <USBD_CUSTOM_HID_Setup+0x24c>)
 8006da6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	221e      	movs	r2, #30
 8006dae:	18ba      	adds	r2, r7, r2
 8006db0:	b299      	uxth	r1, r3
 8006db2:	2909      	cmp	r1, #9
 8006db4:	d900      	bls.n	8006db8 <USBD_CUSTOM_HID_Setup+0x188>
 8006db6:	2309      	movs	r3, #9
 8006db8:	8013      	strh	r3, [r2, #0]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dba:	231e      	movs	r3, #30
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f001 fe19 	bl	80089fc <USBD_CtlSendData>
          break;
 8006dca:	e03f      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	23a7      	movs	r3, #167	; 0xa7
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	5cd3      	ldrb	r3, [r2, r3]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d108      	bne.n	8006dec <USBD_CUSTOM_HID_Setup+0x1bc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3310      	adds	r3, #16
 8006dde:	0019      	movs	r1, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	0018      	movs	r0, r3
 8006de6:	f001 fe09 	bl	80089fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dea:	e02f      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>
            USBD_CtlError(pdev, req);
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	0011      	movs	r1, r2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f001 fd7a 	bl	80088ec <USBD_CtlError>
            ret = USBD_FAIL;
 8006df8:	2317      	movs	r3, #23
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	701a      	strb	r2, [r3, #0]
          break;
 8006e00:	e024      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	23a7      	movs	r3, #167	; 0xa7
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	5cd3      	ldrb	r3, [r2, r3]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d106      	bne.n	8006e1e <USBD_CUSTOM_HID_Setup+0x1ee>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	001a      	movs	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e1c:	e016      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>
            USBD_CtlError(pdev, req);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	0011      	movs	r1, r2
 8006e24:	0018      	movs	r0, r3
 8006e26:	f001 fd61 	bl	80088ec <USBD_CtlError>
            ret = USBD_FAIL;
 8006e2a:	2317      	movs	r3, #23
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	2203      	movs	r2, #3
 8006e30:	701a      	strb	r2, [r3, #0]
          break;
 8006e32:	e00b      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	0011      	movs	r1, r2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f001 fd56 	bl	80088ec <USBD_CtlError>
          ret = USBD_FAIL;
 8006e40:	2317      	movs	r3, #23
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	2203      	movs	r2, #3
 8006e46:	701a      	strb	r2, [r3, #0]
          break;
 8006e48:	e000      	b.n	8006e4c <USBD_CUSTOM_HID_Setup+0x21c>
          break;
 8006e4a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006e4c:	e00a      	b.n	8006e64 <USBD_CUSTOM_HID_Setup+0x234>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f001 fd49 	bl	80088ec <USBD_CtlError>
      ret = USBD_FAIL;
 8006e5a:	2317      	movs	r3, #23
 8006e5c:	18fb      	adds	r3, r7, r3
 8006e5e:	2203      	movs	r2, #3
 8006e60:	701a      	strb	r2, [r3, #0]
      break;
 8006e62:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t)ret;
 8006e64:	2317      	movs	r3, #23
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	781b      	ldrb	r3, [r3, #0]
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b008      	add	sp, #32
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	080096dc 	.word	0x080096dc
 8006e78:	0800970c 	.word	0x0800970c
 8006e7c:	20000074 	.word	0x20000074

08006e80 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	1dbb      	adds	r3, r7, #6
 8006e8c:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	23b5      	movs	r3, #181	; 0xb5
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	58d2      	ldr	r2, [r2, r3]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	0092      	lsls	r2, r2, #2
 8006e9c:	58d3      	ldr	r3, [r2, r3]
 8006e9e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <USBD_CUSTOM_HID_SendReport+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e019      	b.n	8006ede <USBD_CUSTOM_HID_SendReport+0x5e>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	23a7      	movs	r3, #167	; 0xa7
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	5cd3      	ldrb	r3, [r2, r3]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d111      	bne.n	8006edc <USBD_CUSTOM_HID_SendReport+0x5c>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	7e1b      	ldrb	r3, [r3, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <USBD_CUSTOM_HID_SendReport+0x58>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <USBD_CUSTOM_HID_SendReport+0x68>)
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	1dbb      	adds	r3, r7, #6
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f002 fa6a 	bl	80093aa <USBD_LL_Transmit>
 8006ed6:	e001      	b.n	8006edc <USBD_CUSTOM_HID_SendReport+0x5c>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <USBD_CUSTOM_HID_SendReport+0x5e>
    }
  }
  return (uint8_t)USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	0018      	movs	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	b006      	add	sp, #24
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	2000008a 	.word	0x2000008a

08006eec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006ef4:	4b1c      	ldr	r3, [pc, #112]	; (8006f68 <USBD_CUSTOM_HID_GetFSCfgDesc+0x7c>)
 8006ef6:	2181      	movs	r1, #129	; 0x81
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f000 fd56 	bl	80079aa <USBD_GetEpDesc>
 8006efe:	0003      	movs	r3, r0
 8006f00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006f02:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <USBD_CUSTOM_HID_GetFSCfgDesc+0x7c>)
 8006f04:	2101      	movs	r1, #1
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 fd4f 	bl	80079aa <USBD_GetEpDesc>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	60bb      	str	r3, [r7, #8]

  if (pEpInDesc != NULL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00e      	beq.n	8006f34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x48>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	791a      	ldrb	r2, [r3, #4]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	1c11      	adds	r1, r2, #0
 8006f20:	2202      	movs	r2, #2
 8006f22:	430a      	orrs	r2, r1
 8006f24:	711a      	strb	r2, [r3, #4]
 8006f26:	795a      	ldrb	r2, [r3, #5]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2205      	movs	r2, #5
 8006f32:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <USBD_CUSTOM_HID_GetFSCfgDesc+0x6c>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	791a      	ldrb	r2, [r3, #4]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	400a      	ands	r2, r1
 8006f42:	1c11      	adds	r1, r2, #0
 8006f44:	2202      	movs	r2, #2
 8006f46:	430a      	orrs	r2, r1
 8006f48:	711a      	strb	r2, [r3, #4]
 8006f4a:	795a      	ldrb	r2, [r3, #5]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	400a      	ands	r2, r1
 8006f50:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2205      	movs	r2, #5
 8006f56:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2229      	movs	r2, #41	; 0x29
 8006f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006f5e:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <USBD_CUSTOM_HID_GetFSCfgDesc+0x7c>)
}
 8006f60:	0018      	movs	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b004      	add	sp, #16
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000048 	.word	0x20000048

08006f6c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006f74:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x7c>)
 8006f76:	2181      	movs	r1, #129	; 0x81
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 fd16 	bl	80079aa <USBD_GetEpDesc>
 8006f7e:	0003      	movs	r3, r0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006f82:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x7c>)
 8006f84:	2101      	movs	r1, #1
 8006f86:	0018      	movs	r0, r3
 8006f88:	f000 fd0f 	bl	80079aa <USBD_GetEpDesc>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	60bb      	str	r3, [r7, #8]

  if (pEpInDesc != NULL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00e      	beq.n	8006fb4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x48>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	791a      	ldrb	r2, [r3, #4]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	1c11      	adds	r1, r2, #0
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	711a      	strb	r2, [r3, #4]
 8006fa6:	795a      	ldrb	r2, [r3, #5]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	400a      	ands	r2, r1
 8006fac:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2205      	movs	r2, #5
 8006fb2:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00e      	beq.n	8006fd8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x6c>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	791a      	ldrb	r2, [r3, #4]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	400a      	ands	r2, r1
 8006fc2:	1c11      	adds	r1, r2, #0
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	711a      	strb	r2, [r3, #4]
 8006fca:	795a      	ldrb	r2, [r3, #5]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	400a      	ands	r2, r1
 8006fd0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2229      	movs	r2, #41	; 0x29
 8006fdc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006fde:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x7c>)
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b004      	add	sp, #16
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000048 	.word	0x20000048

08006fec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x7c>)
 8006ff6:	2181      	movs	r1, #129	; 0x81
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f000 fcd6 	bl	80079aa <USBD_GetEpDesc>
 8006ffe:	0003      	movs	r3, r0
 8007000:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007002:	4b19      	ldr	r3, [pc, #100]	; (8007068 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x7c>)
 8007004:	2101      	movs	r1, #1
 8007006:	0018      	movs	r0, r3
 8007008:	f000 fccf 	bl	80079aa <USBD_GetEpDesc>
 800700c:	0003      	movs	r3, r0
 800700e:	60bb      	str	r3, [r7, #8]

  if (pEpInDesc != NULL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00e      	beq.n	8007034 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x48>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	791a      	ldrb	r2, [r3, #4]
 800701a:	2100      	movs	r1, #0
 800701c:	400a      	ands	r2, r1
 800701e:	1c11      	adds	r1, r2, #0
 8007020:	2202      	movs	r2, #2
 8007022:	430a      	orrs	r2, r1
 8007024:	711a      	strb	r2, [r3, #4]
 8007026:	795a      	ldrb	r2, [r3, #5]
 8007028:	2100      	movs	r1, #0
 800702a:	400a      	ands	r2, r1
 800702c:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2205      	movs	r2, #5
 8007032:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x6c>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	791a      	ldrb	r2, [r3, #4]
 800703e:	2100      	movs	r1, #0
 8007040:	400a      	ands	r2, r1
 8007042:	1c11      	adds	r1, r2, #0
 8007044:	2202      	movs	r2, #2
 8007046:	430a      	orrs	r2, r1
 8007048:	711a      	strb	r2, [r3, #4]
 800704a:	795a      	ldrb	r2, [r3, #5]
 800704c:	2100      	movs	r1, #0
 800704e:	400a      	ands	r2, r1
 8007050:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2205      	movs	r2, #5
 8007056:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2229      	movs	r2, #41	; 0x29
 800705c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800705e:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x7c>)
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b004      	add	sp, #16
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000048 	.word	0x20000048

0800706c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	000a      	movs	r2, r1
 8007076:	1cfb      	adds	r3, r7, #3
 8007078:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	23b5      	movs	r3, #181	; 0xb5
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	58d2      	ldr	r2, [r2, r3]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	; 0xb0
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	58d3      	ldr	r3, [r2, r3]
 800708a:	2200      	movs	r2, #0
 800708c:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	0018      	movs	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	000a      	movs	r2, r1
 80070a2:	1cfb      	adds	r3, r7, #3
 80070a4:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	23b5      	movs	r3, #181	; 0xb5
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	58d2      	ldr	r2, [r2, r3]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32b0      	adds	r2, #176	; 0xb0
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	58d3      	ldr	r3, [r2, r3]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <USBD_CUSTOM_HID_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e017      	b.n	80070ee <USBD_CUSTOM_HID_DataOut+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	23b5      	movs	r3, #181	; 0xb5
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	58d2      	ldr	r2, [r2, r3]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32b0      	adds	r2, #176	; 0xb0
 80070ca:	0092      	lsls	r2, r2, #2
 80070cc:	58d3      	ldr	r3, [r2, r3]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	23b5      	movs	r3, #181	; 0xb5
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	58d3      	ldr	r3, [r2, r3]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	33b0      	adds	r3, #176	; 0xb0
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	18d3      	adds	r3, r2, r3
 80070e0:	3304      	adds	r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	0010      	movs	r0, r2
 80070ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b004      	add	sp, #16
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	23b5      	movs	r3, #181	; 0xb5
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	58d2      	ldr	r2, [r2, r3]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	32b0      	adds	r2, #176	; 0xb0
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	58d3      	ldr	r3, [r2, r3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <USBD_CUSTOM_HID_ReceivePacket+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	e010      	b.n	800713a <USBD_CUSTOM_HID_ReceivePacket+0x42>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	23b5      	movs	r3, #181	; 0xb5
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	58d2      	ldr	r2, [r2, r3]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	; 0xb0
 8007124:	0092      	lsls	r2, r2, #2
 8007126:	58d3      	ldr	r3, [r2, r3]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <USBD_CUSTOM_HID_ReceivePacket+0x4c>)
 800712c:	7819      	ldrb	r1, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	2308      	movs	r3, #8
 8007134:	f002 f969 	bl	800940a <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	0018      	movs	r0, r3
 800713c:	46bd      	mov	sp, r7
 800713e:	b004      	add	sp, #16
 8007140:	bd80      	pop	{r7, pc}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	2000008b 	.word	0x2000008b

08007148 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	23b5      	movs	r3, #181	; 0xb5
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	58d2      	ldr	r2, [r2, r3]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	; 0xb0
 800715c:	0092      	lsls	r2, r2, #2
 800715e:	58d3      	ldr	r3, [r2, r3]
 8007160:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_CUSTOM_HID_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e015      	b.n	8007198 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d110      	bne.n	8007196 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	23b5      	movs	r3, #181	; 0xb5
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	58d3      	ldr	r3, [r2, r3]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	33b0      	adds	r3, #176	; 0xb0
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	18d3      	adds	r3, r2, r3
 8007184:	3304      	adds	r3, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	0010      	movs	r0, r2
 800718e:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	220a      	movs	r2, #10
 80071ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80071ae:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 80071b0:	0018      	movs	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b002      	add	sp, #8
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000080 	.word	0x20000080

080071bc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e00b      	b.n	80071e8 <USBD_CUSTOM_HID_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	23b5      	movs	r3, #181	; 0xb5
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	58d3      	ldr	r3, [r2, r3]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	33b0      	adds	r3, #176	; 0xb0
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	18d3      	adds	r3, r2, r3
 80071e0:	3304      	adds	r3, #4
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b002      	add	sp, #8
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071f0:	b5b0      	push	{r4, r5, r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	1dfb      	adds	r3, r7, #7
 80071fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	e029      	b.n	800725c <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	23ae      	movs	r3, #174	; 0xae
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	2100      	movs	r1, #0
 8007210:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	23b1      	movs	r3, #177	; 0xb1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	2100      	movs	r1, #0
 800721a:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	23b4      	movs	r3, #180	; 0xb4
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	2100      	movs	r1, #0
 8007224:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	23ad      	movs	r3, #173	; 0xad
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	23a7      	movs	r3, #167	; 0xa7
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	2101      	movs	r1, #1
 800723e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	1dfa      	adds	r2, r7, #7
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007248:	2517      	movs	r5, #23
 800724a:	197c      	adds	r4, r7, r5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0018      	movs	r0, r3
 8007250:	f001 ff0a 	bl	8009068 <USBD_LL_Init>
 8007254:	0003      	movs	r3, r0
 8007256:	7023      	strb	r3, [r4, #0]

  return ret;
 8007258:	197b      	adds	r3, r7, r5
 800725a:	781b      	ldrb	r3, [r3, #0]
}
 800725c:	0018      	movs	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	b006      	add	sp, #24
 8007262:	bdb0      	pop	{r4, r5, r7, pc}

08007264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800726e:	230e      	movs	r3, #14
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	2200      	movs	r2, #0
 8007274:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e02b      	b.n	80072d8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	23ae      	movs	r3, #174	; 0xae
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	23b5      	movs	r3, #181	; 0xb5
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	58d2      	ldr	r2, [r2, r3]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	32ae      	adds	r2, #174	; 0xae
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	58d3      	ldr	r3, [r2, r3]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d011      	beq.n	80072c4 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	23b5      	movs	r3, #181	; 0xb5
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	58d2      	ldr	r2, [r2, r3]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32ae      	adds	r2, #174	; 0xae
 80072ac:	0092      	lsls	r2, r2, #2
 80072ae:	58d3      	ldr	r3, [r2, r3]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	220e      	movs	r2, #14
 80072b4:	18ba      	adds	r2, r7, r2
 80072b6:	0010      	movs	r0, r2
 80072b8:	4798      	blx	r3
 80072ba:	0001      	movs	r1, r0
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	23b4      	movs	r3, #180	; 0xb4
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	23b6      	movs	r3, #182	; 0xb6
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	58d3      	ldr	r3, [r2, r3]
 80072cc:	1c59      	adds	r1, r3, #1
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	23b6      	movs	r3, #182	; 0xb6
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b004      	add	sp, #16
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f001 ff24 	bl	8009138 <USBD_LL_Start>
 80072f0:	0003      	movs	r3, r0
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b002      	add	sp, #8
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	000a      	movs	r2, r1
 8007316:	1cfb      	adds	r3, r7, #3
 8007318:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731a:	210f      	movs	r1, #15
 800731c:	187b      	adds	r3, r7, r1
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	23ae      	movs	r3, #174	; 0xae
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	58d3      	ldr	r3, [r2, r3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	23ae      	movs	r3, #174	; 0xae
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	58d3      	ldr	r3, [r2, r3]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	187c      	adds	r4, r7, r1
 800733a:	1cfa      	adds	r2, r7, #3
 800733c:	7811      	ldrb	r1, [r2, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	0010      	movs	r0, r2
 8007342:	4798      	blx	r3
 8007344:	0003      	movs	r3, r0
 8007346:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007348:	230f      	movs	r3, #15
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	781b      	ldrb	r3, [r3, #0]
}
 800734e:	0018      	movs	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	b005      	add	sp, #20
 8007354:	bd90      	pop	{r4, r7, pc}

08007356 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007356:	b590      	push	{r4, r7, lr}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	000a      	movs	r2, r1
 8007360:	1cfb      	adds	r3, r7, #3
 8007362:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007364:	240f      	movs	r4, #15
 8007366:	193b      	adds	r3, r7, r4
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	23ae      	movs	r3, #174	; 0xae
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	58d3      	ldr	r3, [r2, r3]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	1cfa      	adds	r2, r7, #3
 8007378:	7811      	ldrb	r1, [r2, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	0010      	movs	r0, r2
 800737e:	4798      	blx	r3
 8007380:	1e03      	subs	r3, r0, #0
 8007382:	d002      	beq.n	800738a <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8007384:	193b      	adds	r3, r7, r4
 8007386:	2203      	movs	r2, #3
 8007388:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800738a:	230f      	movs	r3, #15
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	781b      	ldrb	r3, [r3, #0]
}
 8007390:	0018      	movs	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	b005      	add	sp, #20
 8007396:	bd90      	pop	{r4, r7, pc}

08007398 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a30      	ldr	r2, [pc, #192]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 80073a6:	4694      	mov	ip, r2
 80073a8:	4463      	add	r3, ip
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	0011      	movs	r1, r2
 80073ae:	0018      	movs	r0, r3
 80073b0:	f001 fa5f 	bl	8008872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	23a5      	movs	r3, #165	; 0xa5
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	2101      	movs	r1, #1
 80073bc:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	23ac      	movs	r3, #172	; 0xac
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	5ad3      	ldrh	r3, [r2, r3]
 80073c6:	0019      	movs	r1, r3
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	23a6      	movs	r3, #166	; 0xa6
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a25      	ldr	r2, [pc, #148]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 80073d4:	5c9b      	ldrb	r3, [r3, r2]
 80073d6:	001a      	movs	r2, r3
 80073d8:	231f      	movs	r3, #31
 80073da:	4013      	ands	r3, r2
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d01f      	beq.n	8007420 <USBD_LL_SetupStage+0x88>
 80073e0:	d82b      	bhi.n	800743a <USBD_LL_SetupStage+0xa2>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <USBD_LL_SetupStage+0x54>
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d00d      	beq.n	8007406 <USBD_LL_SetupStage+0x6e>
 80073ea:	e026      	b.n	800743a <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 80073f0:	189a      	adds	r2, r3, r2
 80073f2:	230f      	movs	r3, #15
 80073f4:	18fc      	adds	r4, r7, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0011      	movs	r1, r2
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 fb5e 	bl	8007abc <USBD_StdDevReq>
 8007400:	0003      	movs	r3, r0
 8007402:	7023      	strb	r3, [r4, #0]
      break;
 8007404:	e029      	b.n	800745a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 800740a:	189a      	adds	r2, r3, r2
 800740c:	230f      	movs	r3, #15
 800740e:	18fc      	adds	r4, r7, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0011      	movs	r1, r2
 8007414:	0018      	movs	r0, r3
 8007416:	f000 fbcf 	bl	8007bb8 <USBD_StdItfReq>
 800741a:	0003      	movs	r3, r0
 800741c:	7023      	strb	r3, [r4, #0]
      break;
 800741e:	e01c      	b.n	800745a <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a11      	ldr	r2, [pc, #68]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 8007424:	189a      	adds	r2, r3, r2
 8007426:	230f      	movs	r3, #15
 8007428:	18fc      	adds	r4, r7, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0011      	movs	r1, r2
 800742e:	0018      	movs	r0, r3
 8007430:	f000 fc4f 	bl	8007cd2 <USBD_StdEPReq>
 8007434:	0003      	movs	r3, r0
 8007436:	7023      	strb	r3, [r4, #0]
      break;
 8007438:	e00f      	b.n	800745a <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <USBD_LL_SetupStage+0xd0>)
 800743e:	5c9b      	ldrb	r3, [r3, r2]
 8007440:	227f      	movs	r2, #127	; 0x7f
 8007442:	4393      	bics	r3, r2
 8007444:	b2da      	uxtb	r2, r3
 8007446:	230f      	movs	r3, #15
 8007448:	18fc      	adds	r4, r7, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	0011      	movs	r1, r2
 800744e:	0018      	movs	r0, r3
 8007450:	f001 fef9 	bl	8009246 <USBD_LL_StallEP>
 8007454:	0003      	movs	r3, r0
 8007456:	7023      	strb	r3, [r4, #0]
      break;
 8007458:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800745a:	230f      	movs	r3, #15
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	781b      	ldrb	r3, [r3, #0]
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b005      	add	sp, #20
 8007466:	bd90      	pop	{r4, r7, pc}
 8007468:	000002aa 	.word	0x000002aa

0800746c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	200b      	movs	r0, #11
 8007478:	183b      	adds	r3, r7, r0
 800747a:	1c0a      	adds	r2, r1, #0
 800747c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2317      	movs	r3, #23
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8007486:	183b      	adds	r3, r7, r0
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d000      	beq.n	8007490 <USBD_LL_DataOutStage+0x24>
 800748e:	e084      	b.n	800759a <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3355      	adds	r3, #85	; 0x55
 8007494:	33ff      	adds	r3, #255	; 0xff
 8007496:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	23a5      	movs	r3, #165	; 0xa5
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	58d3      	ldr	r3, [r2, r3]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d000      	beq.n	80074a6 <USBD_LL_DataOutStage+0x3a>
 80074a4:	e0c0      	b.n	8007628 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d914      	bls.n	80074dc <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68d9      	ldr	r1, [r3, #12]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	000b      	movs	r3, r1
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d900      	bls.n	80074d0 <USBD_LL_DataOutStage+0x64>
 80074ce:	0013      	movs	r3, r2
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	001a      	movs	r2, r3
 80074d6:	f001 fade 	bl	8008a96 <USBD_CtlContinueRx>
 80074da:	e0a5      	b.n	8007628 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4a55      	ldr	r2, [pc, #340]	; (8007634 <USBD_LL_DataOutStage+0x1c8>)
 80074e0:	5c9b      	ldrb	r3, [r3, r2]
 80074e2:	001a      	movs	r2, r3
 80074e4:	231f      	movs	r3, #31
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d018      	beq.n	800751e <USBD_LL_DataOutStage+0xb2>
 80074ec:	d825      	bhi.n	800753a <USBD_LL_DataOutStage+0xce>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <USBD_LL_DataOutStage+0x8c>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d005      	beq.n	8007502 <USBD_LL_DataOutStage+0x96>
 80074f6:	e020      	b.n	800753a <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074f8:	2316      	movs	r3, #22
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
            break;
 8007500:	e020      	b.n	8007544 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a4c      	ldr	r2, [pc, #304]	; (8007638 <USBD_LL_DataOutStage+0x1cc>)
 8007506:	5a9b      	ldrh	r3, [r3, r2]
 8007508:	b2da      	uxtb	r2, r3
 800750a:	2316      	movs	r3, #22
 800750c:	18fc      	adds	r4, r7, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	0011      	movs	r1, r2
 8007512:	0018      	movs	r0, r3
 8007514:	f000 fa31 	bl	800797a <USBD_CoreFindIF>
 8007518:	0003      	movs	r3, r0
 800751a:	7023      	strb	r3, [r4, #0]
            break;
 800751c:	e012      	b.n	8007544 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4a45      	ldr	r2, [pc, #276]	; (8007638 <USBD_LL_DataOutStage+0x1cc>)
 8007522:	5a9b      	ldrh	r3, [r3, r2]
 8007524:	b2da      	uxtb	r2, r3
 8007526:	2316      	movs	r3, #22
 8007528:	18fc      	adds	r4, r7, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	0011      	movs	r1, r2
 800752e:	0018      	movs	r0, r3
 8007530:	f000 fa2f 	bl	8007992 <USBD_CoreFindEP>
 8007534:	0003      	movs	r3, r0
 8007536:	7023      	strb	r3, [r4, #0]
            break;
 8007538:	e004      	b.n	8007544 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800753a:	2316      	movs	r3, #22
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
            break;
 8007542:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007544:	2116      	movs	r1, #22
 8007546:	187b      	adds	r3, r7, r1
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d120      	bne.n	8007590 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	23a7      	movs	r3, #167	; 0xa7
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	5cd3      	ldrb	r3, [r2, r3]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b03      	cmp	r3, #3
 800755a:	d119      	bne.n	8007590 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800755c:	187b      	adds	r3, r7, r1
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	32ae      	adds	r2, #174	; 0xae
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	58d3      	ldr	r3, [r2, r3]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d010      	beq.n	8007590 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 800756e:	0008      	movs	r0, r1
 8007570:	187b      	adds	r3, r7, r1
 8007572:	7819      	ldrb	r1, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	23b5      	movs	r3, #181	; 0xb5
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800757c:	183b      	adds	r3, r7, r0
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	32ae      	adds	r2, #174	; 0xae
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	58d3      	ldr	r3, [r2, r3]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	0010      	movs	r0, r2
 800758e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	0018      	movs	r0, r3
 8007594:	f001 fa90 	bl	8008ab8 <USBD_CtlSendStatus>
 8007598:	e046      	b.n	8007628 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800759a:	260b      	movs	r6, #11
 800759c:	19bb      	adds	r3, r7, r6
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	227f      	movs	r2, #127	; 0x7f
 80075a2:	4013      	ands	r3, r2
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	2516      	movs	r5, #22
 80075a8:	197c      	adds	r4, r7, r5
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	0011      	movs	r1, r2
 80075ae:	0018      	movs	r0, r3
 80075b0:	f000 f9ef 	bl	8007992 <USBD_CoreFindEP>
 80075b4:	0003      	movs	r3, r0
 80075b6:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075b8:	0029      	movs	r1, r5
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d032      	beq.n	8007628 <USBD_LL_DataOutStage+0x1bc>
 80075c2:	187b      	adds	r3, r7, r1
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12e      	bne.n	8007628 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	23a7      	movs	r3, #167	; 0xa7
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	5cd3      	ldrb	r3, [r2, r3]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d11f      	bne.n	8007618 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075d8:	187b      	adds	r3, r7, r1
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	32ae      	adds	r2, #174	; 0xae
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	58d3      	ldr	r3, [r2, r3]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 80075ea:	0008      	movs	r0, r1
 80075ec:	187b      	adds	r3, r7, r1
 80075ee:	7819      	ldrb	r1, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	23b5      	movs	r3, #181	; 0xb5
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075f8:	183b      	adds	r3, r7, r0
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	32ae      	adds	r2, #174	; 0xae
 8007600:	0092      	lsls	r2, r2, #2
 8007602:	58d3      	ldr	r3, [r2, r3]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2217      	movs	r2, #23
 8007608:	18bc      	adds	r4, r7, r2
 800760a:	19ba      	adds	r2, r7, r6
 800760c:	7811      	ldrb	r1, [r2, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	0010      	movs	r0, r2
 8007612:	4798      	blx	r3
 8007614:	0003      	movs	r3, r0
 8007616:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8007618:	2217      	movs	r2, #23
 800761a:	18bb      	adds	r3, r7, r2
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8007622:	18bb      	adds	r3, r7, r2
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	e000      	b.n	800762a <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b007      	add	sp, #28
 8007630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	000002aa 	.word	0x000002aa
 8007638:	000002ae 	.word	0x000002ae

0800763c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	200b      	movs	r0, #11
 8007648:	183b      	adds	r3, r7, r0
 800764a:	1c0a      	adds	r2, r1, #0
 800764c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800764e:	183b      	adds	r3, r7, r0
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d000      	beq.n	8007658 <USBD_LL_DataInStage+0x1c>
 8007656:	e07d      	b.n	8007754 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3314      	adds	r3, #20
 800765c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	23a5      	movs	r3, #165	; 0xa5
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	58d3      	ldr	r3, [r2, r3]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d164      	bne.n	8007734 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d914      	bls.n	80076a0 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	0018      	movs	r0, r3
 800768e:	f001 f9d1 	bl	8008a34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	f001 feb6 	bl	800940a <USBD_LL_PrepareReceive>
 800769e:	e049      	b.n	8007734 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d11f      	bne.n	80076ec <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d319      	bcc.n	80076ec <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	68f9      	ldr	r1, [r7, #12]
 80076be:	23a6      	movs	r3, #166	; 0xa6
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d211      	bcs.n	80076ec <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	0018      	movs	r0, r3
 80076d0:	f001 f9b0 	bl	8008a34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	23a6      	movs	r3, #166	; 0xa6
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	2100      	movs	r1, #0
 80076dc:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	2300      	movs	r3, #0
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	f001 fe90 	bl	800940a <USBD_LL_PrepareReceive>
 80076ea:	e023      	b.n	8007734 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	23a7      	movs	r3, #167	; 0xa7
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	5cd3      	ldrb	r3, [r2, r3]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d113      	bne.n	8007722 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	23ae      	movs	r3, #174	; 0xae
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	58d3      	ldr	r3, [r2, r3]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00c      	beq.n	8007722 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	23b5      	movs	r3, #181	; 0xb5
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	2100      	movs	r1, #0
 8007710:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	23ae      	movs	r3, #174	; 0xae
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	58d3      	ldr	r3, [r2, r3]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	0010      	movs	r0, r2
 8007720:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2180      	movs	r1, #128	; 0x80
 8007726:	0018      	movs	r0, r3
 8007728:	f001 fd8d 	bl	8009246 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	0018      	movs	r0, r3
 8007730:	f001 f9d6 	bl	8008ae0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	23a8      	movs	r3, #168	; 0xa8
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	5cd3      	ldrb	r3, [r2, r3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d050      	beq.n	80077e2 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	0018      	movs	r0, r3
 8007744:	f7ff fdd9 	bl	80072fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	23a8      	movs	r3, #168	; 0xa8
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	2100      	movs	r1, #0
 8007750:	54d1      	strb	r1, [r2, r3]
 8007752:	e046      	b.n	80077e2 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007754:	260b      	movs	r6, #11
 8007756:	19bb      	adds	r3, r7, r6
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	4252      	negs	r2, r2
 800775e:	4313      	orrs	r3, r2
 8007760:	b2da      	uxtb	r2, r3
 8007762:	2517      	movs	r5, #23
 8007764:	197c      	adds	r4, r7, r5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	0011      	movs	r1, r2
 800776a:	0018      	movs	r0, r3
 800776c:	f000 f911 	bl	8007992 <USBD_CoreFindEP>
 8007770:	0003      	movs	r3, r0
 8007772:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007774:	0029      	movs	r1, r5
 8007776:	187b      	adds	r3, r7, r1
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d031      	beq.n	80077e2 <USBD_LL_DataInStage+0x1a6>
 800777e:	187b      	adds	r3, r7, r1
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12d      	bne.n	80077e2 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	23a7      	movs	r3, #167	; 0xa7
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	5cd3      	ldrb	r3, [r2, r3]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b03      	cmp	r3, #3
 8007792:	d126      	bne.n	80077e2 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007794:	187b      	adds	r3, r7, r1
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	32ae      	adds	r2, #174	; 0xae
 800779c:	0092      	lsls	r2, r2, #2
 800779e:	58d3      	ldr	r3, [r2, r3]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01d      	beq.n	80077e2 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 80077a6:	0008      	movs	r0, r1
 80077a8:	187b      	adds	r3, r7, r1
 80077aa:	7819      	ldrb	r1, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	23b5      	movs	r3, #181	; 0xb5
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80077b4:	183b      	adds	r3, r7, r0
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	32ae      	adds	r2, #174	; 0xae
 80077bc:	0092      	lsls	r2, r2, #2
 80077be:	58d3      	ldr	r3, [r2, r3]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2516      	movs	r5, #22
 80077c4:	197c      	adds	r4, r7, r5
 80077c6:	19ba      	adds	r2, r7, r6
 80077c8:	7811      	ldrb	r1, [r2, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	0010      	movs	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	0003      	movs	r3, r0
 80077d2:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 80077d4:	197b      	adds	r3, r7, r5
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 80077dc:	197b      	adds	r3, r7, r5
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	e000      	b.n	80077e4 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	0018      	movs	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b007      	add	sp, #28
 80077ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f4:	240f      	movs	r4, #15
 80077f6:	193b      	adds	r3, r7, r4
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	23a7      	movs	r3, #167	; 0xa7
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	2101      	movs	r1, #1
 8007804:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	23a5      	movs	r3, #165	; 0xa5
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	2100      	movs	r1, #0
 800780e:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	23a9      	movs	r3, #169	; 0xa9
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	2100      	movs	r1, #0
 800781e:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	23a8      	movs	r3, #168	; 0xa8
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	2100      	movs	r1, #0
 8007828:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	23ae      	movs	r3, #174	; 0xae
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	58d3      	ldr	r3, [r2, r3]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	23ae      	movs	r3, #174	; 0xae
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	58d3      	ldr	r3, [r2, r3]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00f      	beq.n	8007864 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	23ae      	movs	r3, #174	; 0xae
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	58d3      	ldr	r3, [r2, r3]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	b2d9      	uxtb	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0018      	movs	r0, r3
 8007858:	4790      	blx	r2
 800785a:	1e03      	subs	r3, r0, #0
 800785c:	d002      	beq.n	8007864 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800785e:	193b      	adds	r3, r7, r4
 8007860:	2203      	movs	r2, #3
 8007862:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	2340      	movs	r3, #64	; 0x40
 8007868:	2200      	movs	r2, #0
 800786a:	2100      	movs	r1, #0
 800786c:	f001 fc89 	bl	8009182 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	23b2      	movs	r3, #178	; 0xb2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	2101      	movs	r1, #1
 8007878:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	23b0      	movs	r3, #176	; 0xb0
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	2140      	movs	r1, #64	; 0x40
 8007882:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	2340      	movs	r3, #64	; 0x40
 8007888:	2200      	movs	r2, #0
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	f001 fc79 	bl	8009182 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2240      	movs	r2, #64	; 0x40
 800789a:	621a      	str	r2, [r3, #32]

  return ret;
 800789c:	230f      	movs	r3, #15
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	781b      	ldrb	r3, [r3, #0]
}
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b005      	add	sp, #20
 80078a8:	bd90      	pop	{r4, r7, pc}

080078aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	000a      	movs	r2, r1
 80078b4:	1cfb      	adds	r3, r7, #3
 80078b6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1cfa      	adds	r2, r7, #3
 80078bc:	7812      	ldrb	r2, [r2, #0]
 80078be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	0018      	movs	r0, r3
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b002      	add	sp, #8
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	23a7      	movs	r3, #167	; 0xa7
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	5cd3      	ldrb	r3, [r2, r3]
 80078dc:	b2d9      	uxtb	r1, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a05      	ldr	r2, [pc, #20]	; (80078f8 <USBD_LL_Suspend+0x2c>)
 80078e2:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	23a7      	movs	r3, #167	; 0xa7
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	2104      	movs	r1, #4
 80078ec:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b002      	add	sp, #8
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	0000029d 	.word	0x0000029d

080078fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	23a7      	movs	r3, #167	; 0xa7
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	5cd3      	ldrb	r3, [r2, r3]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b04      	cmp	r3, #4
 8007910:	d107      	bne.n	8007922 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a05      	ldr	r2, [pc, #20]	; (800792c <USBD_LL_Resume+0x30>)
 8007916:	5c9b      	ldrb	r3, [r3, r2]
 8007918:	b2d9      	uxtb	r1, r3
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	23a7      	movs	r3, #167	; 0xa7
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	0018      	movs	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	b002      	add	sp, #8
 800792a:	bd80      	pop	{r7, pc}
 800792c:	0000029d 	.word	0x0000029d

08007930 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	23a7      	movs	r3, #167	; 0xa7
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	5cd3      	ldrb	r3, [r2, r3]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b03      	cmp	r3, #3
 8007944:	d114      	bne.n	8007970 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	23ae      	movs	r3, #174	; 0xae
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	58d3      	ldr	r3, [r2, r3]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	23ae      	movs	r3, #174	; 0xae
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	58d3      	ldr	r3, [r2, r3]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	23ae      	movs	r3, #174	; 0xae
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	58d3      	ldr	r3, [r2, r3]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	0010      	movs	r0, r2
 800796e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b002      	add	sp, #8
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	000a      	movs	r2, r1
 8007984:	1cfb      	adds	r3, r7, #3
 8007986:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007988:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800798a:	0018      	movs	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	b002      	add	sp, #8
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	000a      	movs	r2, r1
 800799c:	1cfb      	adds	r3, r7, #3
 800799e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079a2:	0018      	movs	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	b002      	add	sp, #8
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	000a      	movs	r2, r1
 80079b4:	1cfb      	adds	r3, r7, #3
 80079b6:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	789a      	ldrb	r2, [r3, #2]
 80079c8:	78db      	ldrb	r3, [r3, #3]
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d92a      	bls.n	8007a30 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b29a      	uxth	r2, r3
 80079e0:	230a      	movs	r3, #10
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 80079e6:	e016      	b.n	8007a16 <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079e8:	230a      	movs	r3, #10
 80079ea:	18fa      	adds	r2, r7, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	0011      	movs	r1, r2
 80079f0:	0018      	movs	r0, r3
 80079f2:	f000 f822 	bl	8007a3a <USBD_GetNextDesc>
 80079f6:	0003      	movs	r3, r0
 80079f8:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d109      	bne.n	8007a16 <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	789b      	ldrb	r3, [r3, #2]
 8007a0a:	1cfa      	adds	r2, r7, #3
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d00d      	beq.n	8007a2e <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	789a      	ldrb	r2, [r3, #2]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	230a      	movs	r3, #10
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d8dd      	bhi.n	80079e8 <USBD_GetEpDesc+0x3e>
 8007a2c:	e000      	b.n	8007a30 <USBD_GetEpDesc+0x86>
          break;
 8007a2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a30:	693b      	ldr	r3, [r7, #16]
}
 8007a32:	0018      	movs	r0, r3
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b006      	add	sp, #24
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	001a      	movs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	0018      	movs	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b004      	add	sp, #16
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	781a      	ldrb	r2, [r3, #0]
 8007a80:	2112      	movs	r1, #18
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	2010      	movs	r0, #16
 8007a92:	183b      	adds	r3, r7, r0
 8007a94:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a96:	183b      	adds	r3, r7, r0
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	b21a      	sxth	r2, r3
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	5e5b      	ldrsh	r3, [r3, r1]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b21a      	sxth	r2, r3
 8007aa8:	210e      	movs	r1, #14
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8007aae:	187b      	adds	r3, r7, r1
 8007ab0:	881b      	ldrh	r3, [r3, #0]
}
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b006      	add	sp, #24
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac6:	230f      	movs	r3, #15
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	2360      	movs	r3, #96	; 0x60
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d004      	beq.n	8007ae6 <USBD_StdDevReq+0x2a>
 8007adc:	d85b      	bhi.n	8007b96 <USBD_StdDevReq+0xda>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d013      	beq.n	8007b0a <USBD_StdDevReq+0x4e>
 8007ae2:	2b20      	cmp	r3, #32
 8007ae4:	d157      	bne.n	8007b96 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	23b5      	movs	r3, #181	; 0xb5
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	58d2      	ldr	r2, [r2, r3]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	; 0xae
 8007af2:	0092      	lsls	r2, r2, #2
 8007af4:	58d3      	ldr	r3, [r2, r3]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	220f      	movs	r2, #15
 8007afa:	18bc      	adds	r4, r7, r2
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	0010      	movs	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	0003      	movs	r3, r0
 8007b06:	7023      	strb	r3, [r4, #0]
      break;
 8007b08:	e04c      	b.n	8007ba4 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d839      	bhi.n	8007b86 <USBD_StdDevReq+0xca>
 8007b12:	009a      	lsls	r2, r3, #2
 8007b14:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <USBD_StdDevReq+0xf8>)
 8007b16:	18d3      	adds	r3, r2, r3
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	0011      	movs	r1, r2
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 fada 	bl	80080dc <USBD_GetDescriptor>
          break;
 8007b28:	e034      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f000 fcad 	bl	8008490 <USBD_SetAddress>
          break;
 8007b36:	e02d      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b38:	230f      	movs	r3, #15
 8007b3a:	18fc      	adds	r4, r7, r3
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	0011      	movs	r1, r2
 8007b42:	0018      	movs	r0, r3
 8007b44:	f000 fcfa 	bl	800853c <USBD_SetConfig>
 8007b48:	0003      	movs	r3, r0
 8007b4a:	7023      	strb	r3, [r4, #0]
          break;
 8007b4c:	e022      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0011      	movs	r1, r2
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 fdbf 	bl	80086d8 <USBD_GetConfig>
          break;
 8007b5a:	e01b      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0011      	movs	r1, r2
 8007b62:	0018      	movs	r0, r3
 8007b64:	f000 fdf4 	bl	8008750 <USBD_GetStatus>
          break;
 8007b68:	e014      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	0011      	movs	r1, r2
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 fe28 	bl	80087c6 <USBD_SetFeature>
          break;
 8007b76:	e00d      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0011      	movs	r1, r2
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 fe50 	bl	8008824 <USBD_ClrFeature>
          break;
 8007b84:	e006      	b.n	8007b94 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0011      	movs	r1, r2
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 fead 	bl	80088ec <USBD_CtlError>
          break;
 8007b92:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007b94:	e006      	b.n	8007ba4 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	0011      	movs	r1, r2
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f000 fea5 	bl	80088ec <USBD_CtlError>
      break;
 8007ba2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007ba4:	230f      	movs	r3, #15
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	781b      	ldrb	r3, [r3, #0]
}
 8007baa:	0018      	movs	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b005      	add	sp, #20
 8007bb0:	bd90      	pop	{r4, r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	0800973c 	.word	0x0800973c

08007bb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b5b0      	push	{r4, r5, r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc2:	230f      	movs	r3, #15
 8007bc4:	18fb      	adds	r3, r7, r3
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	001a      	movs	r2, r3
 8007bd0:	2360      	movs	r3, #96	; 0x60
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d005      	beq.n	8007be4 <USBD_StdItfReq+0x2c>
 8007bd8:	d900      	bls.n	8007bdc <USBD_StdItfReq+0x24>
 8007bda:	e06c      	b.n	8007cb6 <USBD_StdItfReq+0xfe>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <USBD_StdItfReq+0x2c>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d168      	bne.n	8007cb6 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	23a7      	movs	r3, #167	; 0xa7
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	5cd3      	ldrb	r3, [r2, r3]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d857      	bhi.n	8007ca4 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	889b      	ldrh	r3, [r3, #4]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d84b      	bhi.n	8007c96 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	889b      	ldrh	r3, [r3, #4]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	250e      	movs	r5, #14
 8007c06:	197c      	adds	r4, r7, r5
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0011      	movs	r1, r2
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f7ff feb4 	bl	800797a <USBD_CoreFindIF>
 8007c12:	0003      	movs	r3, r0
 8007c14:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c16:	0029      	movs	r1, r5
 8007c18:	187b      	adds	r3, r7, r1
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2bff      	cmp	r3, #255	; 0xff
 8007c1e:	d028      	beq.n	8007c72 <USBD_StdItfReq+0xba>
 8007c20:	187b      	adds	r3, r7, r1
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d124      	bne.n	8007c72 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	32ae      	adds	r2, #174	; 0xae
 8007c30:	0092      	lsls	r2, r2, #2
 8007c32:	58d3      	ldr	r3, [r2, r3]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d016      	beq.n	8007c68 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8007c3a:	0008      	movs	r0, r1
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	7819      	ldrb	r1, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	23b5      	movs	r3, #181	; 0xb5
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c48:	183b      	adds	r3, r7, r0
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	32ae      	adds	r2, #174	; 0xae
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	58d3      	ldr	r3, [r2, r3]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	220f      	movs	r2, #15
 8007c58:	18bc      	adds	r4, r7, r2
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	0010      	movs	r0, r2
 8007c60:	4798      	blx	r3
 8007c62:	0003      	movs	r3, r0
 8007c64:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c66:	e008      	b.n	8007c7a <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c68:	230f      	movs	r3, #15
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c70:	e003      	b.n	8007c7a <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c72:	230f      	movs	r3, #15
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	2203      	movs	r2, #3
 8007c78:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	88db      	ldrh	r3, [r3, #6]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d117      	bne.n	8007cb2 <USBD_StdItfReq+0xfa>
 8007c82:	230f      	movs	r3, #15
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d112      	bne.n	8007cb2 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 ff12 	bl	8008ab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c94:	e00d      	b.n	8007cb2 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	0011      	movs	r1, r2
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f000 fe25 	bl	80088ec <USBD_CtlError>
          break;
 8007ca2:	e006      	b.n	8007cb2 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0011      	movs	r1, r2
 8007caa:	0018      	movs	r0, r3
 8007cac:	f000 fe1e 	bl	80088ec <USBD_CtlError>
          break;
 8007cb0:	e000      	b.n	8007cb4 <USBD_StdItfReq+0xfc>
          break;
 8007cb2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007cb4:	e006      	b.n	8007cc4 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	0011      	movs	r1, r2
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f000 fe15 	bl	80088ec <USBD_CtlError>
      break;
 8007cc2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007cc4:	230f      	movs	r3, #15
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	781b      	ldrb	r3, [r3, #0]
}
 8007cca:	0018      	movs	r0, r3
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b004      	add	sp, #16
 8007cd0:	bdb0      	pop	{r4, r5, r7, pc}

08007cd2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd2:	b5b0      	push	{r4, r5, r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cdc:	230f      	movs	r3, #15
 8007cde:	18fb      	adds	r3, r7, r3
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	889a      	ldrh	r2, [r3, #4]
 8007ce8:	230e      	movs	r3, #14
 8007cea:	18fb      	adds	r3, r7, r3
 8007cec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	2360      	movs	r3, #96	; 0x60
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d006      	beq.n	8007d0a <USBD_StdEPReq+0x38>
 8007cfc:	d900      	bls.n	8007d00 <USBD_StdEPReq+0x2e>
 8007cfe:	e1de      	b.n	80080be <USBD_StdEPReq+0x3ec>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d039      	beq.n	8007d78 <USBD_StdEPReq+0xa6>
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d000      	beq.n	8007d0a <USBD_StdEPReq+0x38>
 8007d08:	e1d9      	b.n	80080be <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d0a:	250d      	movs	r5, #13
 8007d0c:	197c      	adds	r4, r7, r5
 8007d0e:	230e      	movs	r3, #14
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0011      	movs	r1, r2
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f7ff fe3a 	bl	8007992 <USBD_CoreFindEP>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d22:	197b      	adds	r3, r7, r5
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2bff      	cmp	r3, #255	; 0xff
 8007d28:	d100      	bne.n	8007d2c <USBD_StdEPReq+0x5a>
 8007d2a:	e1cf      	b.n	80080cc <USBD_StdEPReq+0x3fa>
 8007d2c:	197b      	adds	r3, r7, r5
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d000      	beq.n	8007d36 <USBD_StdEPReq+0x64>
 8007d34:	e1ca      	b.n	80080cc <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 8007d36:	197b      	adds	r3, r7, r5
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	23b5      	movs	r3, #181	; 0xb5
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d42:	0029      	movs	r1, r5
 8007d44:	187b      	adds	r3, r7, r1
 8007d46:	781a      	ldrb	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	32ae      	adds	r2, #174	; 0xae
 8007d4c:	0092      	lsls	r2, r2, #2
 8007d4e:	58d3      	ldr	r3, [r2, r3]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d100      	bne.n	8007d58 <USBD_StdEPReq+0x86>
 8007d56:	e1b9      	b.n	80080cc <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d58:	187b      	adds	r3, r7, r1
 8007d5a:	781a      	ldrb	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32ae      	adds	r2, #174	; 0xae
 8007d60:	0092      	lsls	r2, r2, #2
 8007d62:	58d3      	ldr	r3, [r2, r3]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	220f      	movs	r2, #15
 8007d68:	18bc      	adds	r4, r7, r2
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	0010      	movs	r0, r2
 8007d70:	4798      	blx	r3
 8007d72:	0003      	movs	r3, r0
 8007d74:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 8007d76:	e1a9      	b.n	80080cc <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d007      	beq.n	8007d90 <USBD_StdEPReq+0xbe>
 8007d80:	dd00      	ble.n	8007d84 <USBD_StdEPReq+0xb2>
 8007d82:	e194      	b.n	80080ae <USBD_StdEPReq+0x3dc>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d100      	bne.n	8007d8a <USBD_StdEPReq+0xb8>
 8007d88:	e0c9      	b.n	8007f1e <USBD_StdEPReq+0x24c>
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d04d      	beq.n	8007e2a <USBD_StdEPReq+0x158>
 8007d8e:	e18e      	b.n	80080ae <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	23a7      	movs	r3, #167	; 0xa7
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d002      	beq.n	8007da4 <USBD_StdEPReq+0xd2>
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d01e      	beq.n	8007de0 <USBD_StdEPReq+0x10e>
 8007da2:	e03a      	b.n	8007e1a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da4:	220e      	movs	r2, #14
 8007da6:	18bb      	adds	r3, r7, r2
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d011      	beq.n	8007dd2 <USBD_StdEPReq+0x100>
 8007dae:	18bb      	adds	r3, r7, r2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b80      	cmp	r3, #128	; 0x80
 8007db4:	d00d      	beq.n	8007dd2 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db6:	18bb      	adds	r3, r7, r2
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	0011      	movs	r1, r2
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f001 fa41 	bl	8009246 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2180      	movs	r1, #128	; 0x80
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f001 fa3c 	bl	8009246 <USBD_LL_StallEP>
 8007dce:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dd0:	e02a      	b.n	8007e28 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	0011      	movs	r1, r2
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f000 fd87 	bl	80088ec <USBD_CtlError>
              break;
 8007dde:	e023      	b.n	8007e28 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	885b      	ldrh	r3, [r3, #2]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d113      	bne.n	8007e10 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de8:	220e      	movs	r2, #14
 8007dea:	18bb      	adds	r3, r7, r2
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <USBD_StdEPReq+0x13e>
 8007df2:	18bb      	adds	r3, r7, r2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b80      	cmp	r3, #128	; 0x80
 8007df8:	d00a      	beq.n	8007e10 <USBD_StdEPReq+0x13e>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e02:	18bb      	adds	r3, r7, r2
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0011      	movs	r1, r2
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f001 fa1b 	bl	8009246 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	0018      	movs	r0, r3
 8007e14:	f000 fe50 	bl	8008ab8 <USBD_CtlSendStatus>

              break;
 8007e18:	e006      	b.n	8007e28 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0011      	movs	r1, r2
 8007e20:	0018      	movs	r0, r3
 8007e22:	f000 fd63 	bl	80088ec <USBD_CtlError>
              break;
 8007e26:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007e28:	e148      	b.n	80080bc <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	23a7      	movs	r3, #167	; 0xa7
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	5cd3      	ldrb	r3, [r2, r3]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <USBD_StdEPReq+0x16c>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d01e      	beq.n	8007e7a <USBD_StdEPReq+0x1a8>
 8007e3c:	e066      	b.n	8007f0c <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e3e:	220e      	movs	r2, #14
 8007e40:	18bb      	adds	r3, r7, r2
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d011      	beq.n	8007e6c <USBD_StdEPReq+0x19a>
 8007e48:	18bb      	adds	r3, r7, r2
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d00d      	beq.n	8007e6c <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e50:	18bb      	adds	r3, r7, r2
 8007e52:	781a      	ldrb	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	0011      	movs	r1, r2
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f001 f9f4 	bl	8009246 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2180      	movs	r1, #128	; 0x80
 8007e62:	0018      	movs	r0, r3
 8007e64:	f001 f9ef 	bl	8009246 <USBD_LL_StallEP>
 8007e68:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e6a:	e057      	b.n	8007f1c <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0011      	movs	r1, r2
 8007e72:	0018      	movs	r0, r3
 8007e74:	f000 fd3a 	bl	80088ec <USBD_CtlError>
              break;
 8007e78:	e050      	b.n	8007f1c <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	885b      	ldrh	r3, [r3, #2]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d14b      	bne.n	8007f1a <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e82:	210e      	movs	r1, #14
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	227f      	movs	r2, #127	; 0x7f
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d006      	beq.n	8007e9c <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e8e:	187b      	adds	r3, r7, r1
 8007e90:	781a      	ldrb	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	0011      	movs	r1, r2
 8007e96:	0018      	movs	r0, r3
 8007e98:	f001 fa00 	bl	800929c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f000 fe0a 	bl	8008ab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ea4:	250d      	movs	r5, #13
 8007ea6:	197c      	adds	r4, r7, r5
 8007ea8:	230e      	movs	r3, #14
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0011      	movs	r1, r2
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f7ff fd6d 	bl	8007992 <USBD_CoreFindEP>
 8007eb8:	0003      	movs	r3, r0
 8007eba:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebc:	197b      	adds	r3, r7, r5
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	d02a      	beq.n	8007f1a <USBD_StdEPReq+0x248>
 8007ec4:	197b      	adds	r3, r7, r5
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d126      	bne.n	8007f1a <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8007ecc:	197b      	adds	r3, r7, r5
 8007ece:	7819      	ldrb	r1, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	23b5      	movs	r3, #181	; 0xb5
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ed8:	0029      	movs	r1, r5
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	; 0xae
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	58d3      	ldr	r3, [r2, r3]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d016      	beq.n	8007f1a <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007eec:	187b      	adds	r3, r7, r1
 8007eee:	781a      	ldrb	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	32ae      	adds	r2, #174	; 0xae
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	58d3      	ldr	r3, [r2, r3]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	220f      	movs	r2, #15
 8007efc:	18bc      	adds	r4, r7, r2
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	0010      	movs	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	0003      	movs	r3, r0
 8007f08:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 8007f0a:	e006      	b.n	8007f1a <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	0011      	movs	r1, r2
 8007f12:	0018      	movs	r0, r3
 8007f14:	f000 fcea 	bl	80088ec <USBD_CtlError>
              break;
 8007f18:	e000      	b.n	8007f1c <USBD_StdEPReq+0x24a>
              break;
 8007f1a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007f1c:	e0ce      	b.n	80080bc <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	23a7      	movs	r3, #167	; 0xa7
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	5cd3      	ldrb	r3, [r2, r3]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d002      	beq.n	8007f32 <USBD_StdEPReq+0x260>
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d03c      	beq.n	8007faa <USBD_StdEPReq+0x2d8>
 8007f30:	e0b5      	b.n	800809e <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f32:	220e      	movs	r2, #14
 8007f34:	18bb      	adds	r3, r7, r2
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <USBD_StdEPReq+0x280>
 8007f3c:	18bb      	adds	r3, r7, r2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b80      	cmp	r3, #128	; 0x80
 8007f42:	d006      	beq.n	8007f52 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	0011      	movs	r1, r2
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f000 fcce 	bl	80088ec <USBD_CtlError>
                break;
 8007f50:	e0ac      	b.n	80080ac <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f52:	220e      	movs	r2, #14
 8007f54:	18bb      	adds	r3, r7, r2
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da0c      	bge.n	8007f78 <USBD_StdEPReq+0x2a6>
 8007f5e:	18bb      	adds	r3, r7, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	227f      	movs	r2, #127	; 0x7f
 8007f64:	401a      	ands	r2, r3
 8007f66:	0013      	movs	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	189b      	adds	r3, r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	18d3      	adds	r3, r2, r3
 8007f74:	3304      	adds	r3, #4
 8007f76:	e00d      	b.n	8007f94 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f78:	230e      	movs	r3, #14
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	227f      	movs	r2, #127	; 0x7f
 8007f80:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f82:	0013      	movs	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	3351      	adds	r3, #81	; 0x51
 8007f8c:	33ff      	adds	r3, #255	; 0xff
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	18d3      	adds	r3, r2, r3
 8007f92:	3304      	adds	r3, #4
 8007f94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f000 fd2a 	bl	80089fc <USBD_CtlSendData>
              break;
 8007fa8:	e080      	b.n	80080ac <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007faa:	220e      	movs	r2, #14
 8007fac:	18bb      	adds	r3, r7, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da14      	bge.n	8007fe0 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fb6:	18bb      	adds	r3, r7, r2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	220f      	movs	r2, #15
 8007fbc:	401a      	ands	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	0013      	movs	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	18cb      	adds	r3, r1, r3
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d11e      	bne.n	8008010 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	0011      	movs	r1, r2
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f000 fc87 	bl	80088ec <USBD_CtlError>
                  break;
 8007fde:	e065      	b.n	80080ac <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fe0:	230e      	movs	r3, #14
 8007fe2:	18fb      	adds	r3, r7, r3
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	220f      	movs	r2, #15
 8007fe8:	401a      	ands	r2, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	23b2      	movs	r3, #178	; 0xb2
 8007fee:	0059      	lsls	r1, r3, #1
 8007ff0:	0013      	movs	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	189b      	adds	r3, r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	18c3      	adds	r3, r0, r3
 8007ffa:	185b      	adds	r3, r3, r1
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	0011      	movs	r1, r2
 8008008:	0018      	movs	r0, r3
 800800a:	f000 fc6f 	bl	80088ec <USBD_CtlError>
                  break;
 800800e:	e04d      	b.n	80080ac <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008010:	220e      	movs	r2, #14
 8008012:	18bb      	adds	r3, r7, r2
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b25b      	sxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	da0c      	bge.n	8008036 <USBD_StdEPReq+0x364>
 800801c:	18bb      	adds	r3, r7, r2
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	227f      	movs	r2, #127	; 0x7f
 8008022:	401a      	ands	r2, r3
 8008024:	0013      	movs	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	189b      	adds	r3, r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	3310      	adds	r3, #16
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	18d3      	adds	r3, r2, r3
 8008032:	3304      	adds	r3, #4
 8008034:	e00d      	b.n	8008052 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008036:	230e      	movs	r3, #14
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	227f      	movs	r2, #127	; 0x7f
 800803e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008040:	0013      	movs	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	189b      	adds	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	3351      	adds	r3, #81	; 0x51
 800804a:	33ff      	adds	r3, #255	; 0xff
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	18d3      	adds	r3, r2, r3
 8008050:	3304      	adds	r3, #4
 8008052:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008054:	220e      	movs	r2, #14
 8008056:	18bb      	adds	r3, r7, r2
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <USBD_StdEPReq+0x394>
 800805e:	18bb      	adds	r3, r7, r2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d103      	bne.n	800806e <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e010      	b.n	8008090 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800806e:	230e      	movs	r3, #14
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	781a      	ldrb	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	0011      	movs	r1, r2
 8008078:	0018      	movs	r0, r3
 800807a:	f001 f93a 	bl	80092f2 <USBD_LL_IsStallEP>
 800807e:	1e03      	subs	r3, r0, #0
 8008080:	d003      	beq.n	800808a <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e002      	b.n	8008090 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	0018      	movs	r0, r3
 8008098:	f000 fcb0 	bl	80089fc <USBD_CtlSendData>
              break;
 800809c:	e006      	b.n	80080ac <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	0011      	movs	r1, r2
 80080a4:	0018      	movs	r0, r3
 80080a6:	f000 fc21 	bl	80088ec <USBD_CtlError>
              break;
 80080aa:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80080ac:	e006      	b.n	80080bc <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	0011      	movs	r1, r2
 80080b4:	0018      	movs	r0, r3
 80080b6:	f000 fc19 	bl	80088ec <USBD_CtlError>
          break;
 80080ba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80080bc:	e007      	b.n	80080ce <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	0011      	movs	r1, r2
 80080c4:	0018      	movs	r0, r3
 80080c6:	f000 fc11 	bl	80088ec <USBD_CtlError>
      break;
 80080ca:	e000      	b.n	80080ce <USBD_StdEPReq+0x3fc>
      break;
 80080cc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80080ce:	230f      	movs	r3, #15
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	781b      	ldrb	r3, [r3, #0]
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b004      	add	sp, #16
 80080da:	bdb0      	pop	{r4, r5, r7, pc}

080080dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080e6:	2308      	movs	r3, #8
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	2200      	movs	r2, #0
 80080ec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080f2:	230b      	movs	r3, #11
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d900      	bls.n	8008108 <USBD_GetDescriptor+0x2c>
 8008106:	e17b      	b.n	8008400 <USBD_GetDescriptor+0x324>
 8008108:	009a      	lsls	r2, r3, #2
 800810a:	4bdd      	ldr	r3, [pc, #884]	; (8008480 <USBD_GetDescriptor+0x3a4>)
 800810c:	18d3      	adds	r3, r2, r3
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	23ad      	movs	r3, #173	; 0xad
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	58d3      	ldr	r3, [r2, r3]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	23ad      	movs	r3, #173	; 0xad
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	58d3      	ldr	r3, [r2, r3]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	7c12      	ldrb	r2, [r2, #16]
 800812e:	2108      	movs	r1, #8
 8008130:	1879      	adds	r1, r7, r1
 8008132:	0010      	movs	r0, r2
 8008134:	4798      	blx	r3
 8008136:	0003      	movs	r3, r0
 8008138:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800813a:	e16e      	b.n	800841a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f000 fbd2 	bl	80088ec <USBD_CtlError>
        err++;
 8008148:	210b      	movs	r1, #11
 800814a:	187b      	adds	r3, r7, r1
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	187b      	adds	r3, r7, r1
 8008150:	3201      	adds	r2, #1
 8008152:	701a      	strb	r2, [r3, #0]
      break;
 8008154:	e161      	b.n	800841a <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	23ad      	movs	r3, #173	; 0xad
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	58d3      	ldr	r3, [r2, r3]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	2108      	movs	r1, #8
 8008166:	1879      	adds	r1, r7, r1
 8008168:	0010      	movs	r0, r2
 800816a:	4798      	blx	r3
 800816c:	0003      	movs	r3, r0
 800816e:	60fb      	str	r3, [r7, #12]
      break;
 8008170:	e153      	b.n	800841a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7c1b      	ldrb	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10f      	bne.n	800819a <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	23ae      	movs	r3, #174	; 0xae
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	58d3      	ldr	r3, [r2, r3]
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	2208      	movs	r2, #8
 8008186:	18ba      	adds	r2, r7, r2
 8008188:	0010      	movs	r0, r2
 800818a:	4798      	blx	r3
 800818c:	0003      	movs	r3, r0
 800818e:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	2202      	movs	r2, #2
 8008196:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008198:	e13f      	b.n	800841a <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	23ae      	movs	r3, #174	; 0xae
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	58d3      	ldr	r3, [r2, r3]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	2208      	movs	r2, #8
 80081a6:	18ba      	adds	r2, r7, r2
 80081a8:	0010      	movs	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	0003      	movs	r3, r0
 80081ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	2202      	movs	r2, #2
 80081b6:	701a      	strb	r2, [r3, #0]
      break;
 80081b8:	e12f      	b.n	800841a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	d900      	bls.n	80081c6 <USBD_GetDescriptor+0xea>
 80081c4:	e0d0      	b.n	8008368 <USBD_GetDescriptor+0x28c>
 80081c6:	009a      	lsls	r2, r3, #2
 80081c8:	4bae      	ldr	r3, [pc, #696]	; (8008484 <USBD_GetDescriptor+0x3a8>)
 80081ca:	18d3      	adds	r3, r2, r3
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	23ad      	movs	r3, #173	; 0xad
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	58d3      	ldr	r3, [r2, r3]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	23ad      	movs	r3, #173	; 0xad
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	58d3      	ldr	r3, [r2, r3]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	7c12      	ldrb	r2, [r2, #16]
 80081ec:	2108      	movs	r1, #8
 80081ee:	1879      	adds	r1, r7, r1
 80081f0:	0010      	movs	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	0003      	movs	r3, r0
 80081f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f8:	e0c3      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	0011      	movs	r1, r2
 8008200:	0018      	movs	r0, r3
 8008202:	f000 fb73 	bl	80088ec <USBD_CtlError>
            err++;
 8008206:	210b      	movs	r1, #11
 8008208:	187b      	adds	r3, r7, r1
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	187b      	adds	r3, r7, r1
 800820e:	3201      	adds	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
          break;
 8008212:	e0b6      	b.n	8008382 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	23ad      	movs	r3, #173	; 0xad
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	58d3      	ldr	r3, [r2, r3]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	23ad      	movs	r3, #173	; 0xad
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	58d3      	ldr	r3, [r2, r3]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	2108      	movs	r1, #8
 8008232:	1879      	adds	r1, r7, r1
 8008234:	0010      	movs	r0, r2
 8008236:	4798      	blx	r3
 8008238:	0003      	movs	r3, r0
 800823a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823c:	e0a1      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0011      	movs	r1, r2
 8008244:	0018      	movs	r0, r3
 8008246:	f000 fb51 	bl	80088ec <USBD_CtlError>
            err++;
 800824a:	210b      	movs	r1, #11
 800824c:	187b      	adds	r3, r7, r1
 800824e:	781a      	ldrb	r2, [r3, #0]
 8008250:	187b      	adds	r3, r7, r1
 8008252:	3201      	adds	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
          break;
 8008256:	e094      	b.n	8008382 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	23ad      	movs	r3, #173	; 0xad
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	58d3      	ldr	r3, [r2, r3]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	23ad      	movs	r3, #173	; 0xad
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	58d3      	ldr	r3, [r2, r3]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	2108      	movs	r1, #8
 8008276:	1879      	adds	r1, r7, r1
 8008278:	0010      	movs	r0, r2
 800827a:	4798      	blx	r3
 800827c:	0003      	movs	r3, r0
 800827e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008280:	e07f      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f000 fb2f 	bl	80088ec <USBD_CtlError>
            err++;
 800828e:	210b      	movs	r1, #11
 8008290:	187b      	adds	r3, r7, r1
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	187b      	adds	r3, r7, r1
 8008296:	3201      	adds	r2, #1
 8008298:	701a      	strb	r2, [r3, #0]
          break;
 800829a:	e072      	b.n	8008382 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	23ad      	movs	r3, #173	; 0xad
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	58d3      	ldr	r3, [r2, r3]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	23ad      	movs	r3, #173	; 0xad
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	58d3      	ldr	r3, [r2, r3]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7c12      	ldrb	r2, [r2, #16]
 80082b8:	2108      	movs	r1, #8
 80082ba:	1879      	adds	r1, r7, r1
 80082bc:	0010      	movs	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	0003      	movs	r3, r0
 80082c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c4:	e05d      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	0011      	movs	r1, r2
 80082cc:	0018      	movs	r0, r3
 80082ce:	f000 fb0d 	bl	80088ec <USBD_CtlError>
            err++;
 80082d2:	210b      	movs	r1, #11
 80082d4:	187b      	adds	r3, r7, r1
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	3201      	adds	r2, #1
 80082dc:	701a      	strb	r2, [r3, #0]
          break;
 80082de:	e050      	b.n	8008382 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	23ad      	movs	r3, #173	; 0xad
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	58d3      	ldr	r3, [r2, r3]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	23ad      	movs	r3, #173	; 0xad
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	58d3      	ldr	r3, [r2, r3]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7c12      	ldrb	r2, [r2, #16]
 80082fc:	2108      	movs	r1, #8
 80082fe:	1879      	adds	r1, r7, r1
 8008300:	0010      	movs	r0, r2
 8008302:	4798      	blx	r3
 8008304:	0003      	movs	r3, r0
 8008306:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008308:	e03b      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0011      	movs	r1, r2
 8008310:	0018      	movs	r0, r3
 8008312:	f000 faeb 	bl	80088ec <USBD_CtlError>
            err++;
 8008316:	210b      	movs	r1, #11
 8008318:	187b      	adds	r3, r7, r1
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	187b      	adds	r3, r7, r1
 800831e:	3201      	adds	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
          break;
 8008322:	e02e      	b.n	8008382 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	23ad      	movs	r3, #173	; 0xad
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	58d3      	ldr	r3, [r2, r3]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	23ad      	movs	r3, #173	; 0xad
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	58d3      	ldr	r3, [r2, r3]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	2108      	movs	r1, #8
 8008342:	1879      	adds	r1, r7, r1
 8008344:	0010      	movs	r0, r2
 8008346:	4798      	blx	r3
 8008348:	0003      	movs	r3, r0
 800834a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834c:	e019      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	0011      	movs	r1, r2
 8008354:	0018      	movs	r0, r3
 8008356:	f000 fac9 	bl	80088ec <USBD_CtlError>
            err++;
 800835a:	210b      	movs	r1, #11
 800835c:	187b      	adds	r3, r7, r1
 800835e:	781a      	ldrb	r2, [r3, #0]
 8008360:	187b      	adds	r3, r7, r1
 8008362:	3201      	adds	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
          break;
 8008366:	e00c      	b.n	8008382 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	0011      	movs	r1, r2
 800836e:	0018      	movs	r0, r3
 8008370:	f000 fabc 	bl	80088ec <USBD_CtlError>
          err++;
 8008374:	210b      	movs	r1, #11
 8008376:	187b      	adds	r3, r7, r1
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	187b      	adds	r3, r7, r1
 800837c:	3201      	adds	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008380:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008382:	e04a      	b.n	800841a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	7c1b      	ldrb	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10b      	bne.n	80083a4 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	23ae      	movs	r3, #174	; 0xae
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	58d3      	ldr	r3, [r2, r3]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	2208      	movs	r2, #8
 8008398:	18ba      	adds	r2, r7, r2
 800839a:	0010      	movs	r0, r2
 800839c:	4798      	blx	r3
 800839e:	0003      	movs	r3, r0
 80083a0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a2:	e03a      	b.n	800841a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	0011      	movs	r1, r2
 80083aa:	0018      	movs	r0, r3
 80083ac:	f000 fa9e 	bl	80088ec <USBD_CtlError>
        err++;
 80083b0:	210b      	movs	r1, #11
 80083b2:	187b      	adds	r3, r7, r1
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	187b      	adds	r3, r7, r1
 80083b8:	3201      	adds	r2, #1
 80083ba:	701a      	strb	r2, [r3, #0]
      break;
 80083bc:	e02d      	b.n	800841a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7c1b      	ldrb	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10f      	bne.n	80083e6 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	23ae      	movs	r3, #174	; 0xae
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	58d3      	ldr	r3, [r2, r3]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	2208      	movs	r2, #8
 80083d2:	18ba      	adds	r2, r7, r2
 80083d4:	0010      	movs	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	0003      	movs	r3, r0
 80083da:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	2207      	movs	r2, #7
 80083e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e4:	e019      	b.n	800841a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f000 fa7d 	bl	80088ec <USBD_CtlError>
        err++;
 80083f2:	210b      	movs	r1, #11
 80083f4:	187b      	adds	r3, r7, r1
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	3201      	adds	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e00c      	b.n	800841a <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f000 fa70 	bl	80088ec <USBD_CtlError>
      err++;
 800840c:	210b      	movs	r1, #11
 800840e:	187b      	adds	r3, r7, r1
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	187b      	adds	r3, r7, r1
 8008414:	3201      	adds	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
      break;
 8008418:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800841a:	230b      	movs	r3, #11
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d131      	bne.n	8008488 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	88db      	ldrh	r3, [r3, #6]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d023      	beq.n	8008474 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800842c:	2108      	movs	r1, #8
 800842e:	187b      	adds	r3, r7, r1
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d017      	beq.n	8008466 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	88da      	ldrh	r2, [r3, #6]
 800843a:	187b      	adds	r3, r7, r1
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	1c18      	adds	r0, r3, #0
 8008440:	1c11      	adds	r1, r2, #0
 8008442:	b28a      	uxth	r2, r1
 8008444:	b283      	uxth	r3, r0
 8008446:	429a      	cmp	r2, r3
 8008448:	d900      	bls.n	800844c <USBD_GetDescriptor+0x370>
 800844a:	1c01      	adds	r1, r0, #0
 800844c:	b28a      	uxth	r2, r1
 800844e:	2108      	movs	r1, #8
 8008450:	187b      	adds	r3, r7, r1
 8008452:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008454:	187b      	adds	r3, r7, r1
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	001a      	movs	r2, r3
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	0018      	movs	r0, r3
 8008460:	f000 facc 	bl	80089fc <USBD_CtlSendData>
 8008464:	e011      	b.n	800848a <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	0011      	movs	r1, r2
 800846c:	0018      	movs	r0, r3
 800846e:	f000 fa3d 	bl	80088ec <USBD_CtlError>
 8008472:	e00a      	b.n	800848a <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	0018      	movs	r0, r3
 8008478:	f000 fb1e 	bl	8008ab8 <USBD_CtlSendStatus>
 800847c:	e005      	b.n	800848a <USBD_GetDescriptor+0x3ae>
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	08009764 	.word	0x08009764
 8008484:	080097a4 	.word	0x080097a4
    return;
 8008488:	46c0      	nop			; (mov r8, r8)
  }
}
 800848a:	46bd      	mov	sp, r7
 800848c:	b004      	add	sp, #16
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d13e      	bne.n	8008520 <USBD_SetAddress+0x90>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d13a      	bne.n	8008520 <USBD_SetAddress+0x90>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	2b7f      	cmp	r3, #127	; 0x7f
 80084b0:	d836      	bhi.n	8008520 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	230f      	movs	r3, #15
 80084ba:	18fb      	adds	r3, r7, r3
 80084bc:	217f      	movs	r1, #127	; 0x7f
 80084be:	400a      	ands	r2, r1
 80084c0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	23a7      	movs	r3, #167	; 0xa7
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	5cd3      	ldrb	r3, [r2, r3]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d106      	bne.n	80084de <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	0011      	movs	r1, r2
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 fa08 	bl	80088ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084dc:	e027      	b.n	800852e <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	240f      	movs	r4, #15
 80084e2:	193a      	adds	r2, r7, r4
 80084e4:	4914      	ldr	r1, [pc, #80]	; (8008538 <USBD_SetAddress+0xa8>)
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ea:	193b      	adds	r3, r7, r4
 80084ec:	781a      	ldrb	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0011      	movs	r1, r2
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 ff2e 	bl	8009354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	0018      	movs	r0, r3
 80084fc:	f000 fadc 	bl	8008ab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008500:	193b      	adds	r3, r7, r4
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	23a7      	movs	r3, #167	; 0xa7
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	2102      	movs	r1, #2
 8008510:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008512:	e00c      	b.n	800852e <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	23a7      	movs	r3, #167	; 0xa7
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	2101      	movs	r1, #1
 800851c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	e006      	b.n	800852e <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	0011      	movs	r1, r2
 8008526:	0018      	movs	r0, r3
 8008528:	f000 f9e0 	bl	80088ec <USBD_CtlError>
  }
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	46bd      	mov	sp, r7
 8008532:	b005      	add	sp, #20
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	0000029e 	.word	0x0000029e

0800853c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b5b0      	push	{r4, r5, r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008546:	230f      	movs	r3, #15
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	b2da      	uxtb	r2, r3
 8008554:	4b5f      	ldr	r3, [pc, #380]	; (80086d4 <USBD_SetConfig+0x198>)
 8008556:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008558:	4b5e      	ldr	r3, [pc, #376]	; (80086d4 <USBD_SetConfig+0x198>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d907      	bls.n	8008570 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	0011      	movs	r1, r2
 8008566:	0018      	movs	r0, r3
 8008568:	f000 f9c0 	bl	80088ec <USBD_CtlError>
    return USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	e0ac      	b.n	80086ca <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	23a7      	movs	r3, #167	; 0xa7
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	5cd3      	ldrb	r3, [r2, r3]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d002      	beq.n	8008584 <USBD_SetConfig+0x48>
 800857e:	2b03      	cmp	r3, #3
 8008580:	d033      	beq.n	80085ea <USBD_SetConfig+0xae>
 8008582:	e08d      	b.n	80086a0 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008584:	4b53      	ldr	r3, [pc, #332]	; (80086d4 <USBD_SetConfig+0x198>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d029      	beq.n	80085e0 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 800858c:	4b51      	ldr	r3, [pc, #324]	; (80086d4 <USBD_SetConfig+0x198>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	001a      	movs	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008596:	4b4f      	ldr	r3, [pc, #316]	; (80086d4 <USBD_SetConfig+0x198>)
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	250f      	movs	r5, #15
 800859c:	197c      	adds	r4, r7, r5
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0011      	movs	r1, r2
 80085a2:	0018      	movs	r0, r3
 80085a4:	f7fe feb2 	bl	800730c <USBD_SetClassConfig>
 80085a8:	0003      	movs	r3, r0
 80085aa:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 80085ac:	197b      	adds	r3, r7, r5
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0011      	movs	r1, r2
 80085ba:	0018      	movs	r0, r3
 80085bc:	f000 f996 	bl	80088ec <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	23a7      	movs	r3, #167	; 0xa7
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	2102      	movs	r1, #2
 80085c8:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085ca:	e07b      	b.n	80086c4 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	0018      	movs	r0, r3
 80085d0:	f000 fa72 	bl	8008ab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	23a7      	movs	r3, #167	; 0xa7
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	2103      	movs	r1, #3
 80085dc:	54d1      	strb	r1, [r2, r3]
      break;
 80085de:	e071      	b.n	80086c4 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f000 fa68 	bl	8008ab8 <USBD_CtlSendStatus>
      break;
 80085e8:	e06c      	b.n	80086c4 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085ea:	4b3a      	ldr	r3, [pc, #232]	; (80086d4 <USBD_SetConfig+0x198>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d115      	bne.n	800861e <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	23a7      	movs	r3, #167	; 0xa7
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	2102      	movs	r1, #2
 80085fa:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80085fc:	4b35      	ldr	r3, [pc, #212]	; (80086d4 <USBD_SetConfig+0x198>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	001a      	movs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008606:	4b33      	ldr	r3, [pc, #204]	; (80086d4 <USBD_SetConfig+0x198>)
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0011      	movs	r1, r2
 800860e:	0018      	movs	r0, r3
 8008610:	f7fe fea1 	bl	8007356 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	0018      	movs	r0, r3
 8008618:	f000 fa4e 	bl	8008ab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800861c:	e052      	b.n	80086c4 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 800861e:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <USBD_SetConfig+0x198>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	001a      	movs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d034      	beq.n	8008696 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	0011      	movs	r1, r2
 8008636:	0018      	movs	r0, r3
 8008638:	f7fe fe8d 	bl	8007356 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <USBD_SetConfig+0x198>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	001a      	movs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <USBD_SetConfig+0x198>)
 8008648:	781a      	ldrb	r2, [r3, #0]
 800864a:	250f      	movs	r5, #15
 800864c:	197c      	adds	r4, r7, r5
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	0011      	movs	r1, r2
 8008652:	0018      	movs	r0, r3
 8008654:	f7fe fe5a 	bl	800730c <USBD_SetClassConfig>
 8008658:	0003      	movs	r3, r0
 800865a:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800865c:	197b      	adds	r3, r7, r5
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d013      	beq.n	800868c <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0011      	movs	r1, r2
 800866a:	0018      	movs	r0, r3
 800866c:	f000 f93e 	bl	80088ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	0011      	movs	r1, r2
 800867a:	0018      	movs	r0, r3
 800867c:	f7fe fe6b 	bl	8007356 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	23a7      	movs	r3, #167	; 0xa7
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	2102      	movs	r1, #2
 8008688:	54d1      	strb	r1, [r2, r3]
      break;
 800868a:	e01b      	b.n	80086c4 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	0018      	movs	r0, r3
 8008690:	f000 fa12 	bl	8008ab8 <USBD_CtlSendStatus>
      break;
 8008694:	e016      	b.n	80086c4 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	0018      	movs	r0, r3
 800869a:	f000 fa0d 	bl	8008ab8 <USBD_CtlSendStatus>
      break;
 800869e:	e011      	b.n	80086c4 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f000 f920 	bl	80088ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <USBD_SetConfig+0x198>)
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	0011      	movs	r1, r2
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7fe fe4e 	bl	8007356 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086ba:	230f      	movs	r3, #15
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	2203      	movs	r2, #3
 80086c0:	701a      	strb	r2, [r3, #0]
      break;
 80086c2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80086c4:	230f      	movs	r3, #15
 80086c6:	18fb      	adds	r3, r7, r3
 80086c8:	781b      	ldrb	r3, [r3, #0]
}
 80086ca:	0018      	movs	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b004      	add	sp, #16
 80086d0:	bdb0      	pop	{r4, r5, r7, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	200001a8 	.word	0x200001a8

080086d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d006      	beq.n	80086f8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	0011      	movs	r1, r2
 80086f0:	0018      	movs	r0, r3
 80086f2:	f000 f8fb 	bl	80088ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086f6:	e027      	b.n	8008748 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	23a7      	movs	r3, #167	; 0xa7
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	5cd3      	ldrb	r3, [r2, r3]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	dc02      	bgt.n	800870c <USBD_GetConfig+0x34>
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc03      	bgt.n	8008712 <USBD_GetConfig+0x3a>
 800870a:	e016      	b.n	800873a <USBD_GetConfig+0x62>
 800870c:	2b03      	cmp	r3, #3
 800870e:	d00c      	beq.n	800872a <USBD_GetConfig+0x52>
 8008710:	e013      	b.n	800873a <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3308      	adds	r3, #8
 800871c:	0019      	movs	r1, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	0018      	movs	r0, r3
 8008724:	f000 f96a 	bl	80089fc <USBD_CtlSendData>
        break;
 8008728:	e00e      	b.n	8008748 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1d19      	adds	r1, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	0018      	movs	r0, r3
 8008734:	f000 f962 	bl	80089fc <USBD_CtlSendData>
        break;
 8008738:	e006      	b.n	8008748 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	0011      	movs	r1, r2
 8008740:	0018      	movs	r0, r3
 8008742:	f000 f8d3 	bl	80088ec <USBD_CtlError>
        break;
 8008746:	46c0      	nop			; (mov r8, r8)
}
 8008748:	46c0      	nop			; (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b002      	add	sp, #8
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	23a7      	movs	r3, #167	; 0xa7
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	5cd3      	ldrb	r3, [r2, r3]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	2b02      	cmp	r3, #2
 8008768:	d822      	bhi.n	80087b0 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d006      	beq.n	8008780 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	0011      	movs	r1, r2
 8008778:	0018      	movs	r0, r3
 800877a:	f000 f8b7 	bl	80088ec <USBD_CtlError>
        break;
 800877e:	e01e      	b.n	80087be <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	23a9      	movs	r3, #169	; 0xa9
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	58d3      	ldr	r3, [r2, r3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2202      	movs	r2, #2
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	330c      	adds	r3, #12
 80087a2:	0019      	movs	r1, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	0018      	movs	r0, r3
 80087aa:	f000 f927 	bl	80089fc <USBD_CtlSendData>
      break;
 80087ae:	e006      	b.n	80087be <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	0011      	movs	r1, r2
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 f898 	bl	80088ec <USBD_CtlError>
      break;
 80087bc:	46c0      	nop			; (mov r8, r8)
  }
}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b002      	add	sp, #8
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d109      	bne.n	80087ec <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	23a9      	movs	r3, #169	; 0xa9
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	2101      	movs	r1, #1
 80087e0:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 f967 	bl	8008ab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087ea:	e017      	b.n	800881c <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	885b      	ldrh	r3, [r3, #2]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d10d      	bne.n	8008810 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	889b      	ldrh	r3, [r3, #4]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	b2d9      	uxtb	r1, r3
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	23a8      	movs	r3, #168	; 0xa8
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0018      	movs	r0, r3
 800880a:	f000 f955 	bl	8008ab8 <USBD_CtlSendStatus>
}
 800880e:	e005      	b.n	800881c <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	0011      	movs	r1, r2
 8008816:	0018      	movs	r0, r3
 8008818:	f000 f868 	bl	80088ec <USBD_CtlError>
}
 800881c:	46c0      	nop			; (mov r8, r8)
 800881e:	46bd      	mov	sp, r7
 8008820:	b002      	add	sp, #8
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	23a7      	movs	r3, #167	; 0xa7
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	5cd3      	ldrb	r3, [r2, r3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	3b01      	subs	r3, #1
 800883a:	2b02      	cmp	r3, #2
 800883c:	d80d      	bhi.n	800885a <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d110      	bne.n	8008868 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	23a9      	movs	r3, #169	; 0xa9
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	2100      	movs	r1, #0
 800884e:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	0018      	movs	r0, r3
 8008854:	f000 f930 	bl	8008ab8 <USBD_CtlSendStatus>
      }
      break;
 8008858:	e006      	b.n	8008868 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	0011      	movs	r1, r2
 8008860:	0018      	movs	r0, r3
 8008862:	f000 f843 	bl	80088ec <USBD_CtlError>
      break;
 8008866:	e000      	b.n	800886a <USBD_ClrFeature+0x46>
      break;
 8008868:	46c0      	nop			; (mov r8, r8)
  }
}
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	46bd      	mov	sp, r7
 800886e:	b002      	add	sp, #8
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3301      	adds	r3, #1
 800889a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	0018      	movs	r0, r3
 80088a0:	f7ff f8e6 	bl	8007a70 <SWAPBYTE>
 80088a4:	0003      	movs	r3, r0
 80088a6:	001a      	movs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7ff f8d8 	bl	8007a70 <SWAPBYTE>
 80088c0:	0003      	movs	r3, r0
 80088c2:	001a      	movs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7ff f8ca 	bl	8007a70 <SWAPBYTE>
 80088dc:	0003      	movs	r3, r0
 80088de:	001a      	movs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	80da      	strh	r2, [r3, #6]
}
 80088e4:	46c0      	nop			; (mov r8, r8)
 80088e6:	46bd      	mov	sp, r7
 80088e8:	b004      	add	sp, #16
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 fca3 	bl	8009246 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2100      	movs	r1, #0
 8008904:	0018      	movs	r0, r3
 8008906:	f000 fc9e 	bl	8009246 <USBD_LL_StallEP>
}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	46bd      	mov	sp, r7
 800890e:	b002      	add	sp, #8
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008912:	b590      	push	{r4, r7, lr}
 8008914:	b087      	sub	sp, #28
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800891e:	2417      	movs	r4, #23
 8008920:	193b      	adds	r3, r7, r4
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d044      	beq.n	80089b6 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	0018      	movs	r0, r3
 8008934:	f000 f843 	bl	80089be <USBD_GetLen>
 8008938:	0003      	movs	r3, r0
 800893a:	3301      	adds	r3, #1
 800893c:	b29b      	uxth	r3, r3
 800893e:	18db      	adds	r3, r3, r3
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008946:	193b      	adds	r3, r7, r4
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	701a      	strb	r2, [r3, #0]
  idx++;
 8008954:	193b      	adds	r3, r7, r4
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	193b      	adds	r3, r7, r4
 800895a:	3201      	adds	r2, #1
 800895c:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800895e:	193b      	adds	r3, r7, r4
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	18d3      	adds	r3, r2, r3
 8008966:	2203      	movs	r2, #3
 8008968:	701a      	strb	r2, [r3, #0]
  idx++;
 800896a:	193b      	adds	r3, r7, r4
 800896c:	781a      	ldrb	r2, [r3, #0]
 800896e:	193b      	adds	r3, r7, r4
 8008970:	3201      	adds	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8008974:	e01a      	b.n	80089ac <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8008976:	2117      	movs	r1, #23
 8008978:	187b      	adds	r3, r7, r1
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	18d3      	adds	r3, r2, r3
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3301      	adds	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
    idx++;
 800898c:	187b      	adds	r3, r7, r1
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	187b      	adds	r3, r7, r1
 8008992:	3201      	adds	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8008996:	187b      	adds	r3, r7, r1
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	18d3      	adds	r3, r2, r3
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80089a2:	187b      	adds	r3, r7, r1
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	187b      	adds	r3, r7, r1
 80089a8:	3201      	adds	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e0      	bne.n	8008976 <USBD_GetString+0x64>
 80089b4:	e000      	b.n	80089b8 <USBD_GetString+0xa6>
    return;
 80089b6:	46c0      	nop			; (mov r8, r8)
  }
}
 80089b8:	46bd      	mov	sp, r7
 80089ba:	b007      	add	sp, #28
 80089bc:	bd90      	pop	{r4, r7, pc}

080089be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089c6:	230f      	movs	r3, #15
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089d2:	e008      	b.n	80089e6 <USBD_GetLen+0x28>
  {
    len++;
 80089d4:	210f      	movs	r1, #15
 80089d6:	187b      	adds	r3, r7, r1
 80089d8:	781a      	ldrb	r2, [r3, #0]
 80089da:	187b      	adds	r3, r7, r1
 80089dc:	3201      	adds	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
    pbuff++;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3301      	adds	r3, #1
 80089e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1f2      	bne.n	80089d4 <USBD_GetLen+0x16>
  }

  return len;
 80089ee:	230f      	movs	r3, #15
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	781b      	ldrb	r3, [r3, #0]
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b004      	add	sp, #16
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	23a5      	movs	r3, #165	; 0xa5
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	2102      	movs	r1, #2
 8008a10:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	2100      	movs	r1, #0
 8008a26:	f000 fcc0 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	b004      	add	sp, #16
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	2100      	movs	r1, #0
 8008a48:	f000 fcaf 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b004      	add	sp, #16
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	23a5      	movs	r3, #165	; 0xa5
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	2103      	movs	r1, #3
 8008a6a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	23ac      	movs	r3, #172	; 0xac
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	23ae      	movs	r3, #174	; 0xae
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	2100      	movs	r1, #0
 8008a88:	f000 fcbf 	bl	800940a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	0018      	movs	r0, r3
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b004      	add	sp, #16
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f000 fcae 	bl	800940a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	b004      	add	sp, #16
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	23a5      	movs	r3, #165	; 0xa5
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	2104      	movs	r1, #4
 8008ac8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f000 fc6a 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	0018      	movs	r0, r3
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b002      	add	sp, #8
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	23a5      	movs	r3, #165	; 0xa5
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	2105      	movs	r1, #5
 8008af0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	f000 fc86 	bl	800940a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	0018      	movs	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	b002      	add	sp, #8
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CUSTOM_HID_Desc, DEVICE_FS) != USBD_OK) {
 8008b0c:	4914      	ldr	r1, [pc, #80]	; (8008b60 <MX_USB_Device_Init+0x58>)
 8008b0e:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <MX_USB_Device_Init+0x5c>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	0018      	movs	r0, r3
 8008b14:	f7fe fb6c 	bl	80071f0 <USBD_Init>
 8008b18:	1e03      	subs	r3, r0, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008b1c:	f7f7 febe 	bl	800089c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK) {
 8008b20:	4a11      	ldr	r2, [pc, #68]	; (8008b68 <MX_USB_Device_Init+0x60>)
 8008b22:	4b10      	ldr	r3, [pc, #64]	; (8008b64 <MX_USB_Device_Init+0x5c>)
 8008b24:	0011      	movs	r1, r2
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7fe fb9c 	bl	8007264 <USBD_RegisterClass>
 8008b2c:	1e03      	subs	r3, r0, #0
 8008b2e:	d001      	beq.n	8008b34 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8008b30:	f7f7 feb4 	bl	800089c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK) {
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <MX_USB_Device_Init+0x64>)
 8008b36:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <MX_USB_Device_Init+0x5c>)
 8008b38:	0011      	movs	r1, r2
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f7fe fb3e 	bl	80071bc <USBD_CUSTOM_HID_RegisterInterface>
 8008b40:	1e03      	subs	r3, r0, #0
 8008b42:	d001      	beq.n	8008b48 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8008b44:	f7f7 feaa 	bl	800089c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <MX_USB_Device_Init+0x5c>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7fe fbc8 	bl	80072e0 <USBD_Start>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d001      	beq.n	8008b58 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8008b54:	f7f7 fea2 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008b58:	46c0      	nop			; (mov r8, r8)
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	200000a0 	.word	0x200000a0
 8008b64:	200001ac 	.word	0x200001ac
 8008b68:	20000010 	.word	0x20000010
 8008b6c:	20000090 	.word	0x20000090

08008b70 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b76:	0018      	movs	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008b80:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b82:	0018      	movs	r0, r3
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *buffer)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
//  UNUSED(event_idx);
//  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <CUSTOM_HID_OutEvent_FS+0x38>)
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7fe fab0 	bl	80070f8 <USBD_CUSTOM_HID_ReceivePacket>
 8008b98:	1e03      	subs	r3, r0, #0
 8008b9a:	d002      	beq.n	8008ba2 <CUSTOM_HID_OutEvent_FS+0x1a>
  {
    return -1;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	425b      	negs	r3, r3
 8008ba0:	e009      	b.n	8008bb6 <CUSTOM_HID_OutEvent_FS+0x2e>
  }

  if(buffer[0] == '0')
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b30      	cmp	r3, #48	; 0x30
 8008ba8:	d104      	bne.n	8008bb4 <CUSTOM_HID_OutEvent_FS+0x2c>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008baa:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <CUSTOM_HID_OutEvent_FS+0x3c>)
 8008bac:	2140      	movs	r1, #64	; 0x40
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7f8 fa80 	bl	80010b4 <HAL_GPIO_TogglePin>

  return (USBD_OK);
 8008bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b002      	add	sp, #8
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	200001ac 	.word	0x200001ac
 8008bc4:	50000800 	.word	0x50000800

08008bc8 <USBD_CUSTOM_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	0002      	movs	r2, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	1dfb      	adds	r3, r7, #7
 8008bd4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CUSTOM_HID_DeviceDesc);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2212      	movs	r2, #18
 8008bda:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceDesc;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_CUSTOM_HID_DeviceDescriptor+0x20>)
}
 8008bde:	0018      	movs	r0, r3
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b002      	add	sp, #8
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	200000c0 	.word	0x200000c0

08008bec <USBD_CUSTOM_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	1dfb      	adds	r3, r7, #7
 8008bf8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c00:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <USBD_CUSTOM_HID_LangIDStrDescriptor+0x20>)
}
 8008c02:	0018      	movs	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	b002      	add	sp, #8
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	200000d4 	.word	0x200000d4

08008c10 <USBD_CUSTOM_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	0002      	movs	r2, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	1dfb      	adds	r3, r7, #7
 8008c1c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008c1e:	1dfb      	adds	r3, r7, #7
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <USBD_CUSTOM_HID_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4908      	ldr	r1, [pc, #32]	; (8008c4c <USBD_CUSTOM_HID_ProductStrDescriptor+0x3c>)
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <USBD_CUSTOM_HID_ProductStrDescriptor+0x40>)
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7ff fe70 	bl	8008912 <USBD_GetString>
 8008c32:	e005      	b.n	8008c40 <USBD_CUSTOM_HID_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	4905      	ldr	r1, [pc, #20]	; (8008c4c <USBD_CUSTOM_HID_ProductStrDescriptor+0x3c>)
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <USBD_CUSTOM_HID_ProductStrDescriptor+0x40>)
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7ff fe69 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <USBD_CUSTOM_HID_ProductStrDescriptor+0x3c>)
}
 8008c42:	0018      	movs	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	b002      	add	sp, #8
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	46c0      	nop			; (mov r8, r8)
 8008c4c:	20000488 	.word	0x20000488
 8008c50:	080095f4 	.word	0x080095f4

08008c54 <USBD_CUSTOM_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	0002      	movs	r2, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	1dfb      	adds	r3, r7, #7
 8008c60:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4904      	ldr	r1, [pc, #16]	; (8008c78 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x24>)
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x28>)
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f7ff fe52 	bl	8008912 <USBD_GetString>
  return USBD_StrDesc;
 8008c6e:	4b02      	ldr	r3, [pc, #8]	; (8008c78 <USBD_CUSTOM_HID_ManufacturerStrDescriptor+0x24>)
}
 8008c70:	0018      	movs	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	b002      	add	sp, #8
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000488 	.word	0x20000488
 8008c7c:	08009614 	.word	0x08009614

08008c80 <USBD_CUSTOM_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	0002      	movs	r2, r0
 8008c88:	6039      	str	r1, [r7, #0]
 8008c8a:	1dfb      	adds	r3, r7, #7
 8008c8c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	221a      	movs	r2, #26
 8008c92:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c94:	f000 f84c 	bl	8008d30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CUSTOM_HID_SerialStrDescriptor */

  /* USER CODE END USBD_CUSTOM_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008c98:	4b02      	ldr	r3, [pc, #8]	; (8008ca4 <USBD_CUSTOM_HID_SerialStrDescriptor+0x24>)
}
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	200000d8 	.word	0x200000d8

08008ca8 <USBD_CUSTOM_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	0002      	movs	r2, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	1dfb      	adds	r3, r7, #7
 8008cb4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008cb6:	1dfb      	adds	r3, r7, #7
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <USBD_CUSTOM_HID_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4908      	ldr	r1, [pc, #32]	; (8008ce4 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x3c>)
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x40>)
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f7ff fe24 	bl	8008912 <USBD_GetString>
 8008cca:	e005      	b.n	8008cd8 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	4905      	ldr	r1, [pc, #20]	; (8008ce4 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x3c>)
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x40>)
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f7ff fe1d 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_CUSTOM_HID_ConfigStrDescriptor+0x3c>)
}
 8008cda:	0018      	movs	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	b002      	add	sp, #8
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	46c0      	nop			; (mov r8, r8)
 8008ce4:	20000488 	.word	0x20000488
 8008ce8:	08009628 	.word	0x08009628

08008cec <USBD_CUSTOM_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CUSTOM_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	1dfb      	adds	r3, r7, #7
 8008cf8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008cfa:	1dfb      	adds	r3, r7, #7
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	4908      	ldr	r1, [pc, #32]	; (8008d28 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x3c>)
 8008d06:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x40>)
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f7ff fe02 	bl	8008912 <USBD_GetString>
 8008d0e:	e005      	b.n	8008d1c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	4905      	ldr	r1, [pc, #20]	; (8008d28 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x3c>)
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x40>)
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7ff fdfb 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_CUSTOM_HID_InterfaceStrDescriptor+0x3c>)
}
 8008d1e:	0018      	movs	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	b002      	add	sp, #8
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	20000488 	.word	0x20000488
 8008d2c:	0800963c 	.word	0x0800963c

08008d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d36:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <Get_SerialNum+0x48>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <Get_SerialNum+0x4c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d42:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <Get_SerialNum+0x50>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00b      	beq.n	8008d6e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d56:	490b      	ldr	r1, [pc, #44]	; (8008d84 <Get_SerialNum+0x54>)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f000 f815 	bl	8008d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d62:	4909      	ldr	r1, [pc, #36]	; (8008d88 <Get_SerialNum+0x58>)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2204      	movs	r2, #4
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f000 f80f 	bl	8008d8c <IntToUnicode>
  }
}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	1fff7590 	.word	0x1fff7590
 8008d7c:	1fff7594 	.word	0x1fff7594
 8008d80:	1fff7598 	.word	0x1fff7598
 8008d84:	200000da 	.word	0x200000da
 8008d88:	200000ea 	.word	0x200000ea

08008d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	1dfb      	adds	r3, r7, #7
 8008d98:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008d9a:	2117      	movs	r1, #23
 8008d9c:	187b      	adds	r3, r7, r1
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008da2:	187b      	adds	r3, r7, r1
 8008da4:	2200      	movs	r2, #0
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	e02f      	b.n	8008e0a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	0f1b      	lsrs	r3, r3, #28
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d80d      	bhi.n	8008dce <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	0f1b      	lsrs	r3, r3, #28
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	2317      	movs	r3, #23
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	0019      	movs	r1, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	185b      	adds	r3, r3, r1
 8008dc6:	3230      	adds	r2, #48	; 0x30
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	e00c      	b.n	8008de8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	0f1b      	lsrs	r3, r3, #28
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	2317      	movs	r3, #23
 8008dd6:	18fb      	adds	r3, r7, r3
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	0019      	movs	r1, r3
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	185b      	adds	r3, r3, r1
 8008de2:	3237      	adds	r2, #55	; 0x37
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008dee:	2117      	movs	r1, #23
 8008df0:	187b      	adds	r3, r7, r1
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	3301      	adds	r3, #1
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e00:	187b      	adds	r3, r7, r1
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	187b      	adds	r3, r7, r1
 8008e06:	3201      	adds	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	2317      	movs	r3, #23
 8008e0c:	18fa      	adds	r2, r7, r3
 8008e0e:	1dfb      	adds	r3, r7, #7
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d3c8      	bcc.n	8008daa <IntToUnicode+0x1e>
  }
}
 8008e18:	46c0      	nop			; (mov r8, r8)
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b006      	add	sp, #24
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e24:	b590      	push	{r4, r7, lr}
 8008e26:	b099      	sub	sp, #100	; 0x64
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e2c:	2414      	movs	r4, #20
 8008e2e:	193b      	adds	r3, r7, r4
 8008e30:	0018      	movs	r0, r3
 8008e32:	234c      	movs	r3, #76	; 0x4c
 8008e34:	001a      	movs	r2, r3
 8008e36:	2100      	movs	r1, #0
 8008e38:	f000 fbc8 	bl	80095cc <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a25      	ldr	r2, [pc, #148]	; (8008ed8 <HAL_PCD_MspInit+0xb4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d143      	bne.n	8008ece <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e46:	193b      	adds	r3, r7, r4
 8008e48:	2280      	movs	r2, #128	; 0x80
 8008e4a:	0452      	lsls	r2, r2, #17
 8008e4c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008e4e:	193b      	adds	r3, r7, r4
 8008e50:	2200      	movs	r2, #0
 8008e52:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e54:	193b      	adds	r3, r7, r4
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7fa fce0 	bl	800381c <HAL_RCCEx_PeriphCLKConfig>
 8008e5c:	1e03      	subs	r3, r0, #0
 8008e5e:	d001      	beq.n	8008e64 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8008e60:	f7f7 fd1c 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e68:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	0189      	lsls	r1, r1, #6
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e76:	2380      	movs	r3, #128	; 0x80
 8008e78:	019b      	lsls	r3, r3, #6
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	055b      	lsls	r3, r3, #21
 8008e88:	4013      	ands	r3, r2
 8008e8a:	d116      	bne.n	8008eba <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e8c:	4b13      	ldr	r3, [pc, #76]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e92:	2180      	movs	r1, #128	; 0x80
 8008e94:	0549      	lsls	r1, r1, #21
 8008e96:	430a      	orrs	r2, r1
 8008e98:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e9e:	2380      	movs	r3, #128	; 0x80
 8008ea0:	055b      	lsls	r3, r3, #21
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008ea8:	f7f9 ff54 	bl	8002d54 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eac:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008eb2:	490b      	ldr	r1, [pc, #44]	; (8008ee0 <HAL_PCD_MspInit+0xbc>)
 8008eb4:	400a      	ands	r2, r1
 8008eb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8008eb8:	e001      	b.n	8008ebe <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008eba:	f7f9 ff4b 	bl	8002d54 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	2008      	movs	r0, #8
 8008ec4:	f7f7 ff1e 	bl	8000d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8008ec8:	2008      	movs	r0, #8
 8008eca:	f7f7 ff30 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	b019      	add	sp, #100	; 0x64
 8008ed4:	bd90      	pop	{r4, r7, pc}
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	40005c00 	.word	0x40005c00
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	efffffff 	.word	0xefffffff

08008ee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	23c1      	movs	r3, #193	; 0xc1
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	58d2      	ldr	r2, [r2, r3]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	21b1      	movs	r1, #177	; 0xb1
 8008ef8:	0089      	lsls	r1, r1, #2
 8008efa:	468c      	mov	ip, r1
 8008efc:	4463      	add	r3, ip
 8008efe:	0019      	movs	r1, r3
 8008f00:	0010      	movs	r0, r2
 8008f02:	f7fe fa49 	bl	8007398 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	b002      	add	sp, #8
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0e:	b590      	push	{r4, r7, lr}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	000a      	movs	r2, r1
 8008f18:	1cfb      	adds	r3, r7, #3
 8008f1a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	23c1      	movs	r3, #193	; 0xc1
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	58d4      	ldr	r4, [r2, r3]
 8008f24:	1cfb      	adds	r3, r7, #3
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	23c8      	movs	r3, #200	; 0xc8
 8008f2c:	0059      	lsls	r1, r3, #1
 8008f2e:	0013      	movs	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	189b      	adds	r3, r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	18c3      	adds	r3, r0, r3
 8008f38:	185b      	adds	r3, r3, r1
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	1cfb      	adds	r3, r7, #3
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	0019      	movs	r1, r3
 8008f42:	0020      	movs	r0, r4
 8008f44:	f7fe fa92 	bl	800746c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f48:	46c0      	nop			; (mov r8, r8)
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b003      	add	sp, #12
 8008f4e:	bd90      	pop	{r4, r7, pc}

08008f50 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	000a      	movs	r2, r1
 8008f5a:	1cfb      	adds	r3, r7, #3
 8008f5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	23c1      	movs	r3, #193	; 0xc1
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	58d0      	ldr	r0, [r2, r3]
 8008f66:	1cfb      	adds	r3, r7, #3
 8008f68:	781a      	ldrb	r2, [r3, #0]
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	0013      	movs	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	189b      	adds	r3, r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	18cb      	adds	r3, r1, r3
 8008f76:	3350      	adds	r3, #80	; 0x50
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	1cfb      	adds	r3, r7, #3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	0019      	movs	r1, r3
 8008f80:	f7fe fb5c 	bl	800763c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f84:	46c0      	nop			; (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	23c1      	movs	r3, #193	; 0xc1
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	58d3      	ldr	r3, [r2, r3]
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7fe fcc7 	bl	8007930 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	b002      	add	sp, #8
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fb2:	230f      	movs	r3, #15
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d001      	beq.n	8008fc6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008fc2:	f7f7 fc6b 	bl	800089c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	23c1      	movs	r3, #193	; 0xc1
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	58d2      	ldr	r2, [r2, r3]
 8008fce:	230f      	movs	r3, #15
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	0019      	movs	r1, r3
 8008fd6:	0010      	movs	r0, r2
 8008fd8:	f7fe fc67 	bl	80078aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	23c1      	movs	r3, #193	; 0xc1
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	58d3      	ldr	r3, [r2, r3]
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7fe fc01 	bl	80077ec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b004      	add	sp, #16
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	23c1      	movs	r3, #193	; 0xc1
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	58d3      	ldr	r3, [r2, r3]
 8009004:	0018      	movs	r0, r3
 8009006:	f7fe fc61 	bl	80078cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <HAL_PCD_SuspendCallback+0x34>)
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	4b04      	ldr	r3, [pc, #16]	; (8009028 <HAL_PCD_SuspendCallback+0x34>)
 8009018:	2106      	movs	r1, #6
 800901a:	430a      	orrs	r2, r1
 800901c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b002      	add	sp, #8
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	e000ed00 	.word	0xe000ed00

0800902c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d007      	beq.n	800904c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <HAL_PCD_ResumeCallback+0x38>)
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	4b08      	ldr	r3, [pc, #32]	; (8009064 <HAL_PCD_ResumeCallback+0x38>)
 8009042:	2106      	movs	r1, #6
 8009044:	438a      	bics	r2, r1
 8009046:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009048:	f000 fa5e 	bl	8009508 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	23c1      	movs	r3, #193	; 0xc1
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	58d3      	ldr	r3, [r2, r3]
 8009054:	0018      	movs	r0, r3
 8009056:	f7fe fc51 	bl	80078fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b002      	add	sp, #8
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8009070:	4a2f      	ldr	r2, [pc, #188]	; (8009130 <USBD_LL_Init+0xc8>)
 8009072:	23c1      	movs	r3, #193	; 0xc1
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	23b2      	movs	r3, #178	; 0xb2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	492b      	ldr	r1, [pc, #172]	; (8009130 <USBD_LL_Init+0xc8>)
 8009082:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8009084:	4b2a      	ldr	r3, [pc, #168]	; (8009130 <USBD_LL_Init+0xc8>)
 8009086:	4a2b      	ldr	r2, [pc, #172]	; (8009134 <USBD_LL_Init+0xcc>)
 8009088:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800908a:	4b29      	ldr	r3, [pc, #164]	; (8009130 <USBD_LL_Init+0xc8>)
 800908c:	2208      	movs	r2, #8
 800908e:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <USBD_LL_Init+0xc8>)
 8009092:	2208      	movs	r2, #8
 8009094:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8009096:	4b26      	ldr	r3, [pc, #152]	; (8009130 <USBD_LL_Init+0xc8>)
 8009098:	2202      	movs	r2, #2
 800909a:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800909c:	4b24      	ldr	r3, [pc, #144]	; (8009130 <USBD_LL_Init+0xc8>)
 800909e:	2202      	movs	r2, #2
 80090a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80090a2:	4b23      	ldr	r3, [pc, #140]	; (8009130 <USBD_LL_Init+0xc8>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80090a8:	4b21      	ldr	r3, [pc, #132]	; (8009130 <USBD_LL_Init+0xc8>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80090ae:	4b20      	ldr	r3, [pc, #128]	; (8009130 <USBD_LL_Init+0xc8>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <USBD_LL_Init+0xc8>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80090ba:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <USBD_LL_Init+0xc8>)
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <USBD_LL_Init+0xc8>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <USBD_LL_Init+0xc8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80090cc:	4b18      	ldr	r3, [pc, #96]	; (8009130 <USBD_LL_Init+0xc8>)
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7f8 f872 	bl	80011b8 <HAL_PCD_Init>
 80090d4:	1e03      	subs	r3, r0, #0
 80090d6:	d001      	beq.n	80090dc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80090d8:	f7f7 fbe0 	bl	800089c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	23b2      	movs	r3, #178	; 0xb2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	58d0      	ldr	r0, [r2, r3]
 80090e4:	2318      	movs	r3, #24
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	f7f9 fdc1 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	23b2      	movs	r3, #178	; 0xb2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	58d0      	ldr	r0, [r2, r3]
 80090f6:	2358      	movs	r3, #88	; 0x58
 80090f8:	2200      	movs	r2, #0
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	f7f9 fdb8 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	23b2      	movs	r3, #178	; 0xb2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	58d0      	ldr	r0, [r2, r3]
 8009108:	2398      	movs	r3, #152	; 0x98
 800910a:	2200      	movs	r2, #0
 800910c:	2181      	movs	r1, #129	; 0x81
 800910e:	f7f9 fdaf 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	23b2      	movs	r3, #178	; 0xb2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	58d0      	ldr	r0, [r2, r3]
 800911a:	23d8      	movs	r3, #216	; 0xd8
 800911c:	2200      	movs	r2, #0
 800911e:	2101      	movs	r1, #1
 8009120:	f7f9 fda6 	bl	8002c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	0018      	movs	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	b002      	add	sp, #8
 800912c:	bd80      	pop	{r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	20000688 	.word	0x20000688
 8009134:	40005c00 	.word	0x40005c00

08009138 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009140:	210f      	movs	r1, #15
 8009142:	187b      	adds	r3, r7, r1
 8009144:	2200      	movs	r2, #0
 8009146:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009148:	260e      	movs	r6, #14
 800914a:	19bb      	adds	r3, r7, r6
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	23b2      	movs	r3, #178	; 0xb2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	58d3      	ldr	r3, [r2, r3]
 8009158:	000d      	movs	r5, r1
 800915a:	187c      	adds	r4, r7, r1
 800915c:	0018      	movs	r0, r3
 800915e:	f7f8 f945 	bl	80013ec <HAL_PCD_Start>
 8009162:	0003      	movs	r3, r0
 8009164:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009166:	19bc      	adds	r4, r7, r6
 8009168:	197b      	adds	r3, r7, r5
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f9d2 	bl	8009516 <USBD_Get_USB_Status>
 8009172:	0003      	movs	r3, r0
 8009174:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009176:	19bb      	adds	r3, r7, r6
 8009178:	781b      	ldrb	r3, [r3, #0]
}
 800917a:	0018      	movs	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	b005      	add	sp, #20
 8009180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009182 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	000c      	movs	r4, r1
 800918c:	0010      	movs	r0, r2
 800918e:	0019      	movs	r1, r3
 8009190:	1cfb      	adds	r3, r7, #3
 8009192:	1c22      	adds	r2, r4, #0
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	1cbb      	adds	r3, r7, #2
 8009198:	1c02      	adds	r2, r0, #0
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	003b      	movs	r3, r7
 800919e:	1c0a      	adds	r2, r1, #0
 80091a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a2:	260f      	movs	r6, #15
 80091a4:	19bb      	adds	r3, r7, r6
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	250e      	movs	r5, #14
 80091ac:	197b      	adds	r3, r7, r5
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	23b2      	movs	r3, #178	; 0xb2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	58d0      	ldr	r0, [r2, r3]
 80091ba:	19bc      	adds	r4, r7, r6
 80091bc:	1cbb      	adds	r3, r7, #2
 80091be:	781d      	ldrb	r5, [r3, #0]
 80091c0:	003b      	movs	r3, r7
 80091c2:	881a      	ldrh	r2, [r3, #0]
 80091c4:	1cfb      	adds	r3, r7, #3
 80091c6:	7819      	ldrb	r1, [r3, #0]
 80091c8:	002b      	movs	r3, r5
 80091ca:	f7f8 fa76 	bl	80016ba <HAL_PCD_EP_Open>
 80091ce:	0003      	movs	r3, r0
 80091d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d2:	250e      	movs	r5, #14
 80091d4:	197c      	adds	r4, r7, r5
 80091d6:	19bb      	adds	r3, r7, r6
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	0018      	movs	r0, r3
 80091dc:	f000 f99b 	bl	8009516 <USBD_Get_USB_Status>
 80091e0:	0003      	movs	r3, r0
 80091e2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80091e4:	197b      	adds	r3, r7, r5
 80091e6:	781b      	ldrb	r3, [r3, #0]
}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b005      	add	sp, #20
 80091ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	000a      	movs	r2, r1
 80091fa:	1cfb      	adds	r3, r7, #3
 80091fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fe:	210f      	movs	r1, #15
 8009200:	187b      	adds	r3, r7, r1
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	260e      	movs	r6, #14
 8009208:	19bb      	adds	r3, r7, r6
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	23b2      	movs	r3, #178	; 0xb2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	58d2      	ldr	r2, [r2, r3]
 8009216:	000d      	movs	r5, r1
 8009218:	187c      	adds	r4, r7, r1
 800921a:	1cfb      	adds	r3, r7, #3
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	0019      	movs	r1, r3
 8009220:	0010      	movs	r0, r2
 8009222:	f7f8 fac4 	bl	80017ae <HAL_PCD_EP_Close>
 8009226:	0003      	movs	r3, r0
 8009228:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922a:	19bc      	adds	r4, r7, r6
 800922c:	197b      	adds	r3, r7, r5
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	0018      	movs	r0, r3
 8009232:	f000 f970 	bl	8009516 <USBD_Get_USB_Status>
 8009236:	0003      	movs	r3, r0
 8009238:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800923a:	19bb      	adds	r3, r7, r6
 800923c:	781b      	ldrb	r3, [r3, #0]
}
 800923e:	0018      	movs	r0, r3
 8009240:	46bd      	mov	sp, r7
 8009242:	b005      	add	sp, #20
 8009244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009246 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	000a      	movs	r2, r1
 8009250:	1cfb      	adds	r3, r7, #3
 8009252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	210f      	movs	r1, #15
 8009256:	187b      	adds	r3, r7, r1
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925c:	260e      	movs	r6, #14
 800925e:	19bb      	adds	r3, r7, r6
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	23b2      	movs	r3, #178	; 0xb2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	58d2      	ldr	r2, [r2, r3]
 800926c:	000d      	movs	r5, r1
 800926e:	187c      	adds	r4, r7, r1
 8009270:	1cfb      	adds	r3, r7, #3
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	0019      	movs	r1, r3
 8009276:	0010      	movs	r0, r2
 8009278:	f7f8 fb7b 	bl	8001972 <HAL_PCD_EP_SetStall>
 800927c:	0003      	movs	r3, r0
 800927e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009280:	19bc      	adds	r4, r7, r6
 8009282:	197b      	adds	r3, r7, r5
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	0018      	movs	r0, r3
 8009288:	f000 f945 	bl	8009516 <USBD_Get_USB_Status>
 800928c:	0003      	movs	r3, r0
 800928e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009290:	19bb      	adds	r3, r7, r6
 8009292:	781b      	ldrb	r3, [r3, #0]
}
 8009294:	0018      	movs	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	b005      	add	sp, #20
 800929a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800929c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	000a      	movs	r2, r1
 80092a6:	1cfb      	adds	r3, r7, #3
 80092a8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092aa:	210f      	movs	r1, #15
 80092ac:	187b      	adds	r3, r7, r1
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	260e      	movs	r6, #14
 80092b4:	19bb      	adds	r3, r7, r6
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	23b2      	movs	r3, #178	; 0xb2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	58d2      	ldr	r2, [r2, r3]
 80092c2:	000d      	movs	r5, r1
 80092c4:	187c      	adds	r4, r7, r1
 80092c6:	1cfb      	adds	r3, r7, #3
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	0019      	movs	r1, r3
 80092cc:	0010      	movs	r0, r2
 80092ce:	f7f8 fbae 	bl	8001a2e <HAL_PCD_EP_ClrStall>
 80092d2:	0003      	movs	r3, r0
 80092d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d6:	19bc      	adds	r4, r7, r6
 80092d8:	197b      	adds	r3, r7, r5
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	0018      	movs	r0, r3
 80092de:	f000 f91a 	bl	8009516 <USBD_Get_USB_Status>
 80092e2:	0003      	movs	r3, r0
 80092e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80092e6:	19bb      	adds	r3, r7, r6
 80092e8:	781b      	ldrb	r3, [r3, #0]
}
 80092ea:	0018      	movs	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	b005      	add	sp, #20
 80092f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092f2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	000a      	movs	r2, r1
 80092fc:	1cfb      	adds	r3, r7, #3
 80092fe:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	23b2      	movs	r3, #178	; 0xb2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	58d3      	ldr	r3, [r2, r3]
 8009308:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800930a:	1cfb      	adds	r3, r7, #3
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b25b      	sxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	da0d      	bge.n	8009330 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009314:	1cfb      	adds	r3, r7, #3
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	227f      	movs	r2, #127	; 0x7f
 800931a:	401a      	ands	r2, r3
 800931c:	68f9      	ldr	r1, [r7, #12]
 800931e:	203e      	movs	r0, #62	; 0x3e
 8009320:	0013      	movs	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	189b      	adds	r3, r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	18cb      	adds	r3, r1, r3
 800932a:	181b      	adds	r3, r3, r0
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	e00d      	b.n	800934c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009330:	1cfb      	adds	r3, r7, #3
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	227f      	movs	r2, #127	; 0x7f
 8009336:	401a      	ands	r2, r3
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	23bf      	movs	r3, #191	; 0xbf
 800933c:	0059      	lsls	r1, r3, #1
 800933e:	0013      	movs	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	189b      	adds	r3, r3, r2
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	18c3      	adds	r3, r0, r3
 8009348:	185b      	adds	r3, r3, r1
 800934a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	b004      	add	sp, #16
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	000a      	movs	r2, r1
 800935e:	1cfb      	adds	r3, r7, #3
 8009360:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009362:	210f      	movs	r1, #15
 8009364:	187b      	adds	r3, r7, r1
 8009366:	2200      	movs	r2, #0
 8009368:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	260e      	movs	r6, #14
 800936c:	19bb      	adds	r3, r7, r6
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	23b2      	movs	r3, #178	; 0xb2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	58d2      	ldr	r2, [r2, r3]
 800937a:	000d      	movs	r5, r1
 800937c:	187c      	adds	r4, r7, r1
 800937e:	1cfb      	adds	r3, r7, #3
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	0019      	movs	r1, r3
 8009384:	0010      	movs	r0, r2
 8009386:	f7f8 f96d 	bl	8001664 <HAL_PCD_SetAddress>
 800938a:	0003      	movs	r3, r0
 800938c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800938e:	19bc      	adds	r4, r7, r6
 8009390:	197b      	adds	r3, r7, r5
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	0018      	movs	r0, r3
 8009396:	f000 f8be 	bl	8009516 <USBD_Get_USB_Status>
 800939a:	0003      	movs	r3, r0
 800939c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800939e:	19bb      	adds	r3, r7, r6
 80093a0:	781b      	ldrb	r3, [r3, #0]
}
 80093a2:	0018      	movs	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b005      	add	sp, #20
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ac:	b087      	sub	sp, #28
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	230b      	movs	r3, #11
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	1c0a      	adds	r2, r1, #0
 80093bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093be:	2617      	movs	r6, #23
 80093c0:	19bb      	adds	r3, r7, r6
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c6:	2516      	movs	r5, #22
 80093c8:	197b      	adds	r3, r7, r5
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	23b2      	movs	r3, #178	; 0xb2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	58d0      	ldr	r0, [r2, r3]
 80093d6:	19bc      	adds	r4, r7, r6
 80093d8:	683d      	ldr	r5, [r7, #0]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	230b      	movs	r3, #11
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	002b      	movs	r3, r5
 80093e4:	f7f8 fa7b 	bl	80018de <HAL_PCD_EP_Transmit>
 80093e8:	0003      	movs	r3, r0
 80093ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ec:	2516      	movs	r5, #22
 80093ee:	197c      	adds	r4, r7, r5
 80093f0:	19bb      	adds	r3, r7, r6
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	0018      	movs	r0, r3
 80093f6:	f000 f88e 	bl	8009516 <USBD_Get_USB_Status>
 80093fa:	0003      	movs	r3, r0
 80093fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80093fe:	197b      	adds	r3, r7, r5
 8009400:	781b      	ldrb	r3, [r3, #0]
}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b007      	add	sp, #28
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800940a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800940a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940c:	b087      	sub	sp, #28
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
 8009416:	230b      	movs	r3, #11
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	1c0a      	adds	r2, r1, #0
 800941c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941e:	2617      	movs	r6, #23
 8009420:	19bb      	adds	r3, r7, r6
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009426:	2516      	movs	r5, #22
 8009428:	197b      	adds	r3, r7, r5
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	23b2      	movs	r3, #178	; 0xb2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	58d0      	ldr	r0, [r2, r3]
 8009436:	19bc      	adds	r4, r7, r6
 8009438:	683d      	ldr	r5, [r7, #0]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	230b      	movs	r3, #11
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	7819      	ldrb	r1, [r3, #0]
 8009442:	002b      	movs	r3, r5
 8009444:	f7f8 fa06 	bl	8001854 <HAL_PCD_EP_Receive>
 8009448:	0003      	movs	r3, r0
 800944a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944c:	2516      	movs	r5, #22
 800944e:	197c      	adds	r4, r7, r5
 8009450:	19bb      	adds	r3, r7, r6
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	0018      	movs	r0, r3
 8009456:	f000 f85e 	bl	8009516 <USBD_Get_USB_Status>
 800945a:	0003      	movs	r3, r0
 800945c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800945e:	197b      	adds	r3, r7, r5
 8009460:	781b      	ldrb	r3, [r3, #0]
}
 8009462:	0018      	movs	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	b007      	add	sp, #28
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800946c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	000a      	movs	r2, r1
 8009476:	1cfb      	adds	r3, r7, #3
 8009478:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800947a:	1cfb      	adds	r3, r7, #3
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <HAL_PCDEx_LPM_Callback+0x1c>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d014      	beq.n	80094b0 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009486:	e025      	b.n	80094d4 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 8009490:	f000 f83a 	bl	8009508 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <HAL_PCDEx_LPM_Callback+0x70>)
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	4b10      	ldr	r3, [pc, #64]	; (80094dc <HAL_PCDEx_LPM_Callback+0x70>)
 800949a:	2106      	movs	r1, #6
 800949c:	438a      	bics	r2, r1
 800949e:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	23c1      	movs	r3, #193	; 0xc1
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	58d3      	ldr	r3, [r2, r3]
 80094a8:	0018      	movs	r0, r3
 80094aa:	f7fe fa27 	bl	80078fc <USBD_LL_Resume>
    break;
 80094ae:	e011      	b.n	80094d4 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	23c1      	movs	r3, #193	; 0xc1
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	58d3      	ldr	r3, [r2, r3]
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7fe fa07 	bl	80078cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <HAL_PCDEx_LPM_Callback+0x70>)
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	4b04      	ldr	r3, [pc, #16]	; (80094dc <HAL_PCDEx_LPM_Callback+0x70>)
 80094cc:	2106      	movs	r1, #6
 80094ce:	430a      	orrs	r2, r1
 80094d0:	611a      	str	r2, [r3, #16]
    break;
 80094d2:	46c0      	nop			; (mov r8, r8)
}
 80094d4:	46c0      	nop			; (mov r8, r8)
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b002      	add	sp, #8
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	e000ed00 	.word	0xe000ed00

080094e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_static_malloc+0x14>)
}
 80094ea:	0018      	movs	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	20000990 	.word	0x20000990

080094f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

}
 8009500:	46c0      	nop			; (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b002      	add	sp, #8
 8009506:	bd80      	pop	{r7, pc}

08009508 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800950c:	f7f7 f8b2 	bl	8000674 <SystemClock_Config>
}
 8009510:	46c0      	nop			; (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	0002      	movs	r2, r0
 800951e:	1dfb      	adds	r3, r7, #7
 8009520:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009522:	230f      	movs	r3, #15
 8009524:	18fb      	adds	r3, r7, r3
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800952a:	1dfb      	adds	r3, r7, #7
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b03      	cmp	r3, #3
 8009530:	d017      	beq.n	8009562 <USBD_Get_USB_Status+0x4c>
 8009532:	dc1b      	bgt.n	800956c <USBD_Get_USB_Status+0x56>
 8009534:	2b02      	cmp	r3, #2
 8009536:	d00f      	beq.n	8009558 <USBD_Get_USB_Status+0x42>
 8009538:	dc18      	bgt.n	800956c <USBD_Get_USB_Status+0x56>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <USBD_Get_USB_Status+0x2e>
 800953e:	2b01      	cmp	r3, #1
 8009540:	d005      	beq.n	800954e <USBD_Get_USB_Status+0x38>
 8009542:	e013      	b.n	800956c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009544:	230f      	movs	r3, #15
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	2200      	movs	r2, #0
 800954a:	701a      	strb	r2, [r3, #0]
    break;
 800954c:	e013      	b.n	8009576 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800954e:	230f      	movs	r3, #15
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	2203      	movs	r2, #3
 8009554:	701a      	strb	r2, [r3, #0]
    break;
 8009556:	e00e      	b.n	8009576 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009558:	230f      	movs	r3, #15
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	2201      	movs	r2, #1
 800955e:	701a      	strb	r2, [r3, #0]
    break;
 8009560:	e009      	b.n	8009576 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009562:	230f      	movs	r3, #15
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	2203      	movs	r2, #3
 8009568:	701a      	strb	r2, [r3, #0]
    break;
 800956a:	e004      	b.n	8009576 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800956c:	230f      	movs	r3, #15
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	2203      	movs	r2, #3
 8009572:	701a      	strb	r2, [r3, #0]
    break;
 8009574:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009576:	230f      	movs	r3, #15
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	781b      	ldrb	r3, [r3, #0]
}
 800957c:	0018      	movs	r0, r3
 800957e:	46bd      	mov	sp, r7
 8009580:	b004      	add	sp, #16
 8009582:	bd80      	pop	{r7, pc}

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	2600      	movs	r6, #0
 8009588:	4d0c      	ldr	r5, [pc, #48]	; (80095bc <__libc_init_array+0x38>)
 800958a:	4c0d      	ldr	r4, [pc, #52]	; (80095c0 <__libc_init_array+0x3c>)
 800958c:	1b64      	subs	r4, r4, r5
 800958e:	10a4      	asrs	r4, r4, #2
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	2600      	movs	r6, #0
 8009596:	f000 f821 	bl	80095dc <_init>
 800959a:	4d0a      	ldr	r5, [pc, #40]	; (80095c4 <__libc_init_array+0x40>)
 800959c:	4c0a      	ldr	r4, [pc, #40]	; (80095c8 <__libc_init_array+0x44>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	00b3      	lsls	r3, r6, #2
 80095aa:	58eb      	ldr	r3, [r5, r3]
 80095ac:	4798      	blx	r3
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	00b3      	lsls	r3, r6, #2
 80095b4:	58eb      	ldr	r3, [r5, r3]
 80095b6:	4798      	blx	r3
 80095b8:	3601      	adds	r6, #1
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	080097c4 	.word	0x080097c4
 80095c0:	080097c4 	.word	0x080097c4
 80095c4:	080097c4 	.word	0x080097c4
 80095c8:	080097c8 	.word	0x080097c8

080095cc <memset>:
 80095cc:	0003      	movs	r3, r0
 80095ce:	1882      	adds	r2, r0, r2
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d100      	bne.n	80095d6 <memset+0xa>
 80095d4:	4770      	bx	lr
 80095d6:	7019      	strb	r1, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	e7f9      	b.n	80095d0 <memset+0x4>

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	46c0      	nop			; (mov r8, r8)
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
